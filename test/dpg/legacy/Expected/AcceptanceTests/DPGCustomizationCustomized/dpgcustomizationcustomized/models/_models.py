# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from .. import _serialization


class Input(_serialization.Model):
    """Input.

    All required parameters must be populated in order to send to Azure.

    :ivar hello: Required.
    :vartype hello: str
    """

    _validation = {
        "hello": {"required": True},
    }

    _attribute_map = {
        "hello": {"key": "hello", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword hello: Required.
        :paramtype hello: str
        """
        super(Input, self).__init__(**kwargs)
        self.hello = kwargs["hello"]


class Product(_serialization.Model):
    """Product.

    All required parameters must be populated in order to send to Azure.

    :ivar received: Required. Known values are: "raw" and "model".
    :vartype received: str or ~dpgcustomizationcustomized.models.ProductReceived
    """

    _validation = {
        "received": {"required": True},
    }

    _attribute_map = {
        "received": {"key": "received", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword received: Required. Known values are: "raw" and "model".
        :paramtype received: str or ~dpgcustomizationcustomized.models.ProductReceived
        """
        super(Product, self).__init__(**kwargs)
        self.received = kwargs["received"]


class LROProduct(Product):
    """LROProduct.

    All required parameters must be populated in order to send to Azure.

    :ivar received: Required. Known values are: "raw" and "model".
    :vartype received: str or ~dpgcustomizationcustomized.models.ProductReceived
    :ivar provisioning_state: Required.
    :vartype provisioning_state: str
    """

    _validation = {
        "received": {"required": True},
        "provisioning_state": {"required": True},
    }

    _attribute_map = {
        "received": {"key": "received", "type": "str"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword received: Required. Known values are: "raw" and "model".
        :paramtype received: str or ~dpgcustomizationcustomized.models.ProductReceived
        :keyword provisioning_state: Required.
        :paramtype provisioning_state: str
        """
        super(LROProduct, self).__init__(**kwargs)
        self.provisioning_state = kwargs["provisioning_state"]


class ProductResult(_serialization.Model):
    """ProductResult.

    :ivar values:
    :vartype values: list[~dpgcustomizationcustomized.models.Product]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        "values": {"key": "values", "type": "[Product]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword values:
        :paramtype values: list[~dpgcustomizationcustomized.models.Product]
        :keyword next_link:
        :paramtype next_link: str
        """
        super(ProductResult, self).__init__(**kwargs)
        self.values = kwargs.get("values", None)
        self.next_link = kwargs.get("next_link", None)
