# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from azure.core.exceptions import map_error
from azure.mgmt.core.exceptions import ARMError
from azure.core.polling import LROPoller, NoPolling
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .. import models


class LROSADsOperations(object):
    """LROSADsOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self._config = config


    def _put_non_retry400_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_non_retry400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)


        if response.status_code == 200:
            self._deserialize('Product', response)
        if response.status_code == 201:
            self._deserialize('Product', response)

        return response

    def put_non_retry400(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a 400 to the initial request.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_non_retry400_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_non_retry400.metadata = {'url': '/lro/nonretryerror/put/400'}


    def _put_non_retry201_creating400_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_non_retry201_creating400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)


        if response.status_code == 200:
            self._deserialize('Product', response)
        if response.status_code == 201:
            self._deserialize('Product', response)

        return response

    def put_non_retry201_creating400(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a Product with
        'ProvisioningState' = 'Creating' and 201 response code.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_non_retry201_creating400_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_non_retry201_creating400.metadata = {'url': '/lro/nonretryerror/put/201/creating/400'}


    def _put_non_retry201_creating400_invalid_json_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_non_retry201_creating400_invalid_json.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)


        if response.status_code == 200:
            self._deserialize('Product', response)
        if response.status_code == 201:
            self._deserialize('Product', response)

        return response

    def put_non_retry201_creating400_invalid_json(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a Product with
        'ProvisioningState' = 'Creating' and 201 response code.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_non_retry201_creating400_invalid_json_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_non_retry201_creating400_invalid_json.metadata = {'url': '/lro/nonretryerror/put/201/creating/400/invalidjson'}


    def _put_async_relative_retry400_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_async_relative_retry400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        header_dict = {}

        if response.status_code == 200:
            self._deserialize('Product', response)
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }

        return response

    def put_async_relative_retry400(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a 200 with
        ProvisioningState=’Creating’. Poll the endpoint indicated in the
        Azure-AsyncOperation header for operation status.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_async_relative_retry400_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_async_relative_retry400.metadata = {'url': '/lro/nonretryerror/putasync/retry/400'}


    def _delete_non_retry400_initial(
            self, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete_non_retry400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def delete_non_retry400(
            self, cls=None, polling=True, **kwargs):
        """Long running delete request, service returns a 400 with an error body.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._delete_non_retry400_initial(
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete_non_retry400.metadata = {'url': '/lro/nonretryerror/delete/400'}


    def _delete202_non_retry400_initial(
            self, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete202_non_retry400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def delete202_non_retry400(
            self, cls=None, polling=True, **kwargs):
        """Long running delete request, service returns a 202 with a location
        header.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._delete202_non_retry400_initial(
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete202_non_retry400.metadata = {'url': '/lro/nonretryerror/delete/202/retry/400'}


    def _delete_async_relative_retry400_initial(
            self, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete_async_relative_retry400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def delete_async_relative_retry400(
            self, cls=None, polling=True, **kwargs):
        """Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation header
        for operation status.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._delete_async_relative_retry400_initial(
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete_async_relative_retry400.metadata = {'url': '/lro/nonretryerror/deleteasync/retry/400'}


    def _post_non_retry400_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post_non_retry400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def post_non_retry400(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running post request, service returns a 400 with no error body.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._post_non_retry400_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    post_non_retry400.metadata = {'url': '/lro/nonretryerror/post/400'}


    def _post202_non_retry400_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post202_non_retry400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def post202_non_retry400(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running post request, service returns a 202 with a location
        header.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._post202_non_retry400_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    post202_non_retry400.metadata = {'url': '/lro/nonretryerror/post/202/retry/400'}


    def _post_async_relative_retry400_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post_async_relative_retry400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def post_async_relative_retry400(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running post request, service returns a 202 to the initial request
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._post_async_relative_retry400_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    post_async_relative_retry400.metadata = {'url': '/lro/nonretryerror/postasync/retry/400'}


    def _put_error201_no_provisioning_state_payload_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_error201_no_provisioning_state_payload.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)


        if response.status_code == 200:
            self._deserialize('Product', response)
        if response.status_code == 201:
            self._deserialize('Product', response)

        return response

    def put_error201_no_provisioning_state_payload(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a 201 to the initial request
        with no payload.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_error201_no_provisioning_state_payload_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_error201_no_provisioning_state_payload.metadata = {'url': '/lro/error/put/201/noprovisioningstatepayload'}


    def _put_async_relative_retry_no_status_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_async_relative_retry_no_status.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        header_dict = {}

        if response.status_code == 200:
            self._deserialize('Product', response)
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }

        return response

    def put_async_relative_retry_no_status(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a 200 to the initial request,
        with an entity that contains ProvisioningState=’Creating’. Poll the
        endpoint indicated in the Azure-AsyncOperation header for operation
        status.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_async_relative_retry_no_status_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_async_relative_retry_no_status.metadata = {'url': '/lro/error/putasync/retry/nostatus'}


    def _put_async_relative_retry_no_status_payload_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_async_relative_retry_no_status_payload.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        header_dict = {}

        if response.status_code == 200:
            self._deserialize('Product', response)
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }

        return response

    def put_async_relative_retry_no_status_payload(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a 200 to the initial request,
        with an entity that contains ProvisioningState=’Creating’. Poll the
        endpoint indicated in the Azure-AsyncOperation header for operation
        status.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_async_relative_retry_no_status_payload_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_async_relative_retry_no_status_payload.metadata = {'url': '/lro/error/putasync/retry/nostatuspayload'}


    def _delete204_succeeded_initial(
            self, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete204_succeeded.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def delete204_succeeded(
            self, cls=None, polling=True, **kwargs):
        """Long running delete request, service returns a 204 to the initial
        request, indicating success.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._delete204_succeeded_initial(
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {}
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete204_succeeded.metadata = {'url': '/lro/error/delete/204/nolocation'}


    def _delete_async_relative_retry_no_status_initial(
            self, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete_async_relative_retry_no_status.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def delete_async_relative_retry_no_status(
            self, cls=None, polling=True, **kwargs):
        """Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation header
        for operation status.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._delete_async_relative_retry_no_status_initial(
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete_async_relative_retry_no_status.metadata = {'url': '/lro/error/deleteasync/retry/nostatus'}


    def _post202_no_location_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post202_no_location.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def post202_no_location(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running post request, service returns a 202 to the initial
        request, without a location header.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._post202_no_location_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    post202_no_location.metadata = {'url': '/lro/error/post/202/nolocation'}


    def _post_async_relative_retry_no_payload_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post_async_relative_retry_no_payload.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def post_async_relative_retry_no_payload(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._post_async_relative_retry_no_payload_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    post_async_relative_retry_no_payload.metadata = {'url': '/lro/error/postasync/retry/nopayload'}


    def _put200_invalid_json_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put200_invalid_json.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)


        if response.status_code == 200:
            self._deserialize('Product', response)

        return response

    def put200_invalid_json(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a 200 to the initial request,
        with an entity that is not a valid json.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put200_invalid_json_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put200_invalid_json.metadata = {'url': '/lro/error/put/200/invalidjson'}


    def _put_async_relative_retry_invalid_header_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_async_relative_retry_invalid_header.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        header_dict = {}

        if response.status_code == 200:
            self._deserialize('Product', response)
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }

        return response

    def put_async_relative_retry_invalid_header(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a 200 to the initial request,
        with an entity that contains ProvisioningState=’Creating’. The endpoint
        indicated in the Azure-AsyncOperation header is invalid.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_async_relative_retry_invalid_header_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_async_relative_retry_invalid_header.metadata = {'url': '/lro/error/putasync/retry/invalidheader'}


    def _put_async_relative_retry_invalid_json_polling_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put_async_relative_retry_invalid_json_polling.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        header_dict = {}

        if response.status_code == 200:
            self._deserialize('Product', response)
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }

        return response

    def put_async_relative_retry_invalid_json_polling(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running put request, service returns a 200 to the initial request,
        with an entity that contains ProvisioningState=’Creating’. Poll the
        endpoint indicated in the Azure-AsyncOperation header for operation
        status.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Product
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~lro.models.Product]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._put_async_relative_retry_invalid_json_polling_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            header_dict = {
                'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                'Location': self._deserialize('str', response.headers.get('Location')),
                'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
            }
            deserialized = self._deserialize('Product', response)

            return deserialized

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    put_async_relative_retry_invalid_json_polling.metadata = {'url': '/lro/error/putasync/retry/invalidjsonpolling'}


    def _delete202_retry_invalid_header_initial(
            self, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete202_retry_invalid_header.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def delete202_retry_invalid_header(
            self, cls=None, polling=True, **kwargs):
        """Long running delete request, service returns a 202 to the initial
        request receing a reponse with an invalid 'Location' and 'Retry-After'
        headers.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._delete202_retry_invalid_header_initial(
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete202_retry_invalid_header.metadata = {'url': '/lro/error/delete/202/retry/invalidheader'}


    def _delete_async_relative_retry_invalid_header_initial(
            self, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete_async_relative_retry_invalid_header.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def delete_async_relative_retry_invalid_header(
            self, cls=None, polling=True, **kwargs):
        """Long running delete request, service returns a 202 to the initial
        request. The endpoint indicated in the Azure-AsyncOperation header is
        invalid.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._delete_async_relative_retry_invalid_header_initial(
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete_async_relative_retry_invalid_header.metadata = {'url': '/lro/error/deleteasync/retry/invalidheader'}


    def _delete_async_relative_retry_invalid_json_polling_initial(
            self, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete_async_relative_retry_invalid_json_polling.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def delete_async_relative_retry_invalid_json_polling(
            self, cls=None, polling=True, **kwargs):
        """Long running delete request, service returns a 202 to the initial
        request. Poll the endpoint indicated in the Azure-AsyncOperation header
        for operation status.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._delete_async_relative_retry_invalid_json_polling_initial(
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete_async_relative_retry_invalid_json_polling.metadata = {'url': '/lro/error/deleteasync/retry/invalidjsonpolling'}


    def _post202_retry_invalid_header_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post202_retry_invalid_header.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def post202_retry_invalid_header(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running post request, service returns a 202 to the initial
        request, with invalid 'Location' and 'Retry-After' headers.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._post202_retry_invalid_header_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    post202_retry_invalid_header.metadata = {'url': '/lro/error/post/202/retry/invalidheader'}


    def _post_async_relative_retry_invalid_header_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post_async_relative_retry_invalid_header.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def post_async_relative_retry_invalid_header(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’. The
        endpoint indicated in the Azure-AsyncOperation header is invalid.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._post_async_relative_retry_invalid_header_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    post_async_relative_retry_invalid_header.metadata = {'url': '/lro/error/postasync/retry/invalidheader'}


    def _post_async_relative_retry_invalid_json_polling_initial(
            self, product=None, cls=None, **kwargs):
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post_async_relative_retry_invalid_json_polling.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self._config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())

        # Construct body
        if product is not None:
            body_content = self._serialize.body(product, 'Product')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise ARMError(response=response)

        return response

    def post_async_relative_retry_invalid_json_polling(
            self, product=None, cls=None, polling=True, **kwargs):
        """Long running post request, service returns a 202 to the initial
        request, with an entity that contains ProvisioningState=’Creating’.
        Poll the endpoint indicated in the Azure-AsyncOperation header for
        operation status.

        :param product: Product to put
        :type product: ~lro.models.Product
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns None
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[None]
        :raises: :class:`ARMError<azure.mgmt.core.ARMError>`
        """
        raw_result = self._post_async_relative_retry_invalid_json_polling_initial(
            product=product,
            **kwargs
        )

        def get_long_running_output(response):
            if cls:
                response_headers = {
                    'Azure-AsyncOperation': self._deserialize('str', response.headers.get('Azure-AsyncOperation')),
                    'Location': self._deserialize('str', response.headers.get('Location')),
                    'Retry-After': self._deserialize('int', response.headers.get('Retry-After')),
                }
                return cls(response, None, response_headers)

        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
        if polling is True: polling_method = ARMPolling(lro_delay, **kwargs)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    post_async_relative_retry_invalid_json_polling.metadata = {'url': '/lro/error/postasync/retry/invalidjsonpolling'}
