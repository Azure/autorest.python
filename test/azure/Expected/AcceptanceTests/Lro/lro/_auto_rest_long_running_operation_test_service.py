# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional

from azure.mgmt.core import ARMPipelineClient
from msrest import Deserializer, Serializer

from ._configuration import AutoRestLongRunningOperationTestServiceConfiguration
from .operations import LrOSOperations
from .operations import LroRetrysOperations
from .operations import LrosaDsOperations
from .operations import LrOSCustomHeaderOperations
from . import models


class AutoRestLongRunningOperationTestService(object):
    """Long-running Operation for AutoRest

    :ivar lr_os: LrOSOperations operations
    :vartype lr_os: lro.operations.LrOSOperations
    :ivar lro_retrys: LroRetrysOperations operations
    :vartype lro_retrys: lro.operations.LroRetrysOperations
    :ivar lrosa_ds: LrosaDsOperations operations
    :vartype lrosa_ds: lro.operations.LrosaDsOperations
    :ivar lr_os_custom_header: LrOSCustomHeaderOperations operations
    :vartype lr_os_custom_header: lro.operations.LrOSCustomHeaderOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: azure.core.credentials.TokenCredential
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'http://localhost:3000'
        self._config = AutoRestLongRunningOperationTestServiceConfiguration(credential, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.lr_os = LrOSOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.lro_retrys = LroRetrysOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.lrosa_ds = LrosaDsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.lr_os_custom_header = LrOSCustomHeaderOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> AutoRestLongRunningOperationTestService
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
