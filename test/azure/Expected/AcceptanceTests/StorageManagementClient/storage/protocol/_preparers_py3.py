# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Optional, Union

from azure.core.pipeline.transport import HttpRequest


def _check_name_availability_request(
    self, body: "_models.StorageAccountCheckNameAvailabilityParameters", **kwargs
) -> HttpRequest:
    api_version = "2015-05-01-preview"
    content_type = kwargs.pop("content_type", "application/json")
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop(
        "template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"
    )
    path_format_arguments = {
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body
    return self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)


def _create_initial_request(
    self, resource_group_name: str, account_name: str, body: "_models.StorageAccountCreateParameters", **kwargs
) -> HttpRequest:
    api_version = "2015-05-01-preview"
    content_type = kwargs.pop("content_type", "application/json")
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
    )
    path_format_arguments = {
        "resourceGroupName": self._serialize.url("resource_group_name", resource_group_name, "str"),
        "accountName": self._serialize.url("account_name", account_name, "str"),
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body
    return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)


def _delete_request(self, resource_group_name: str, account_name: str, **kwargs) -> HttpRequest:
    api_version = "2015-05-01-preview"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
    )
    path_format_arguments = {
        "resourceGroupName": self._serialize.url("resource_group_name", resource_group_name, "str"),
        "accountName": self._serialize.url("account_name", account_name, "str"),
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]

    return self._client.delete(url, query_parameters, header_parameters)


def _get_properties_request(self, resource_group_name: str, account_name: str, **kwargs) -> HttpRequest:
    api_version = "2015-05-01-preview"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
    )
    path_format_arguments = {
        "resourceGroupName": self._serialize.url("resource_group_name", resource_group_name, "str"),
        "accountName": self._serialize.url("account_name", account_name, "str"),
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    return self._client.get(url, query_parameters, header_parameters)


def _update_request(
    self, resource_group_name: str, account_name: str, body: "_models.StorageAccountUpdateParameters", **kwargs
) -> HttpRequest:
    api_version = "2015-05-01-preview"
    content_type = kwargs.pop("content_type", "application/json")
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}",
    )
    path_format_arguments = {
        "resourceGroupName": self._serialize.url("resource_group_name", resource_group_name, "str"),
        "accountName": self._serialize.url("account_name", account_name, "str"),
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body
    return self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)


def _list_keys_request(self, resource_group_name: str, account_name: str, **kwargs) -> HttpRequest:
    api_version = "2015-05-01-preview"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys",
    )
    path_format_arguments = {
        "resourceGroupName": self._serialize.url("resource_group_name", resource_group_name, "str"),
        "accountName": self._serialize.url("account_name", account_name, "str"),
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    return self._client.post(url, query_parameters, header_parameters)


def _list_request(self, **kwargs) -> HttpRequest:
    api_version = "2015-05-01-preview"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts")
    path_format_arguments = {
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    return self._client.get(url, query_parameters, header_parameters)


def _list_by_resource_group_request(self, resource_group_name: str, **kwargs) -> HttpRequest:
    api_version = "2015-05-01-preview"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts",
    )
    path_format_arguments = {
        "resourceGroupName": self._serialize.url("resource_group_name", resource_group_name, "str"),
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    return self._client.get(url, query_parameters, header_parameters)


def _regenerate_key_request(
    self, resource_group_name: str, account_name: str, body: "_models.StorageAccountRegenerateKeyParameters", **kwargs
) -> HttpRequest:
    api_version = "2015-05-01-preview"
    content_type = kwargs.pop("content_type", "application/json")
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey",
    )
    path_format_arguments = {
        "resourceGroupName": self._serialize.url("resource_group_name", resource_group_name, "str"),
        "accountName": self._serialize.url("account_name", account_name, "str"),
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = self._serialize.header("content_type", content_type, "str")
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs["content"] = body
    return self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)


def _list_request(self, **kwargs) -> HttpRequest:
    api_version = "2015-05-01-preview"
    accept = "application/json, text/json"

    # Construct URL
    url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages")
    path_format_arguments = {
        "subscriptionId": self._serialize.url("self._config.subscription_id", self._config.subscription_id, "str"),
    }
    url = self._client.format_url(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["api-version"] = self._serialize.query("api_version", api_version, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    return self._client.get(url, query_parameters, header_parameters)
