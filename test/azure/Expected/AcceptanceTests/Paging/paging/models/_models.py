# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model

class OdataProductResult(Model):
    """OdataProductResult.

    :param values:
	:type values: list[~paging.models.Product]
    :param odatanext_link:
	:type odatanext_link: str
    """

    _attribute_map = {
        'values': {'key': 'values', 'type': '[Product]'},
        'odatanext_link': {'key': 'odata\\.nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OdataProductResult, self).__init__(**kwargs)
        self.values = kwargs.get('values', None)
        self.odatanext_link = kwargs.get('odatanext_link', None)

class OperationResult(Model):
    """OperationResult.

    :param status: The status of the request. Possible values include: 'Succeeded', 'Failed', 'canceled', 'Accepted', 'Creating', 'Created', 'Updating', 'Updated', 'Deleting', 'Deleted', 'OK'.
	:type status: str or ~paging.models.OperationResultStatus
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationResult, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)

class Product(Model):
    """Product.

    :param properties:
	:type properties: ~paging.models.ProductProperties
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'ProductProperties'},
    }

    def __init__(self, **kwargs):
        super(Product, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)

class ProductProperties(Model):
    """ProductProperties.

    :param id:
	:type id: int
    :param name:
	:type name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProductProperties, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)

class ProductResult(Model):
    """ProductResult.

    :param values:
	:type values: list[~paging.models.Product]
    :param next_link:
	:type next_link: str
    """

    _attribute_map = {
        'values': {'key': 'values', 'type': '[Product]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProductResult, self).__init__(**kwargs)
        self.values = kwargs.get('values', None)
        self.next_link = kwargs.get('next_link', None)

class ProductResultValue(Model):
    """ProductResultValue.

    :param value:
	:type value: list[~paging.models.Product]
    :param next_link:
	:type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Product]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProductResultValue, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)

