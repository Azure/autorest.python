# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class CustomParameterGroup(msrest.serialization.Model):
    """Parameter group.

    All required parameters must be populated in order to send to Azure.

    :param api_version: Required. Sets the api version to use.
    :type api_version: str
    :param tenant: Required. Sets the tenant to use.
    :type tenant: str
    """

    _validation = {
        "api_version": {"required": True},
        "tenant": {"required": True},
    }

    _attribute_map = {
        "api_version": {"key": "api_version", "type": "str"},
        "tenant": {"key": "tenant", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(CustomParameterGroup, self).__init__(**kwargs)
        self.api_version = kwargs["api_version"]
        self.tenant = kwargs["tenant"]


class OdataProductResult(msrest.serialization.Model):
    """OdataProductResult.

    :param values:
    :type values: list[~paging.models.Product]
    :param odata_next_link:
    :type odata_next_link: str
    """

    _attribute_map = {
        "values": {"key": "values", "type": "[Product]"},
        "odata_next_link": {"key": "odata\\.nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(OdataProductResult, self).__init__(**kwargs)
        self.values = kwargs.get("values", None)
        self.odata_next_link = kwargs.get("odata_next_link", None)


class OperationResult(msrest.serialization.Model):
    """OperationResult.

    :param status: The status of the request. Possible values include: "Succeeded", "Failed",
     "canceled", "Accepted", "Creating", "Created", "Updating", "Updated", "Deleting", "Deleted",
     "OK".
    :type status: str or ~paging.models.OperationResultStatus
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(OperationResult, self).__init__(**kwargs)
        self.status = kwargs.get("status", None)


class PagingGetMultiplePagesLroOptions(msrest.serialization.Model):
    """Parameter group.

    :param maxresults: Sets the maximum number of items to return in the response.
    :type maxresults: int
    :param timeout: Sets the maximum time that the server can spend processing the request, in
     seconds. The default is 30 seconds.
    :type timeout: int
    """

    _attribute_map = {
        "maxresults": {"key": "maxresults", "type": "int"},
        "timeout": {"key": "timeout", "type": "int"},
    }

    def __init__(self, **kwargs):
        super(PagingGetMultiplePagesLroOptions, self).__init__(**kwargs)
        self.maxresults = kwargs.get("maxresults", None)
        self.timeout = kwargs.get("timeout", 30)


class PagingGetMultiplePagesOptions(msrest.serialization.Model):
    """Parameter group.

    :param maxresults: Sets the maximum number of items to return in the response.
    :type maxresults: int
    :param timeout: Sets the maximum time that the server can spend processing the request, in
     seconds. The default is 30 seconds.
    :type timeout: int
    """

    _attribute_map = {
        "maxresults": {"key": "maxresults", "type": "int"},
        "timeout": {"key": "timeout", "type": "int"},
    }

    def __init__(self, **kwargs):
        super(PagingGetMultiplePagesOptions, self).__init__(**kwargs)
        self.maxresults = kwargs.get("maxresults", None)
        self.timeout = kwargs.get("timeout", 30)


class PagingGetMultiplePagesWithOffsetOptions(msrest.serialization.Model):
    """Parameter group.

    All required parameters must be populated in order to send to Azure.

    :param maxresults: Sets the maximum number of items to return in the response.
    :type maxresults: int
    :param offset: Required. Offset of return value.
    :type offset: int
    :param timeout: Sets the maximum time that the server can spend processing the request, in
     seconds. The default is 30 seconds.
    :type timeout: int
    """

    _validation = {
        "offset": {"required": True},
    }

    _attribute_map = {
        "maxresults": {"key": "maxresults", "type": "int"},
        "offset": {"key": "offset", "type": "int"},
        "timeout": {"key": "timeout", "type": "int"},
    }

    def __init__(self, **kwargs):
        super(PagingGetMultiplePagesWithOffsetOptions, self).__init__(**kwargs)
        self.maxresults = kwargs.get("maxresults", None)
        self.offset = kwargs["offset"]
        self.timeout = kwargs.get("timeout", 30)


class PagingGetOdataMultiplePagesOptions(msrest.serialization.Model):
    """Parameter group.

    :param maxresults: Sets the maximum number of items to return in the response.
    :type maxresults: int
    :param timeout: Sets the maximum time that the server can spend processing the request, in
     seconds. The default is 30 seconds.
    :type timeout: int
    """

    _attribute_map = {
        "maxresults": {"key": "maxresults", "type": "int"},
        "timeout": {"key": "timeout", "type": "int"},
    }

    def __init__(self, **kwargs):
        super(PagingGetOdataMultiplePagesOptions, self).__init__(**kwargs)
        self.maxresults = kwargs.get("maxresults", None)
        self.timeout = kwargs.get("timeout", 30)


class Product(msrest.serialization.Model):
    """Product.

    :param properties:
    :type properties: ~paging.models.ProductProperties
    """

    _attribute_map = {
        "properties": {"key": "properties", "type": "ProductProperties"},
    }

    def __init__(self, **kwargs):
        super(Product, self).__init__(**kwargs)
        self.properties = kwargs.get("properties", None)


class ProductProperties(msrest.serialization.Model):
    """ProductProperties.

    :param id:
    :type id: int
    :param name:
    :type name: str
    """

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ProductProperties, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)
        self.name = kwargs.get("name", None)


class ProductResult(msrest.serialization.Model):
    """ProductResult.

    :param values:
    :type values: list[~paging.models.Product]
    :param next_link:
    :type next_link: str
    """

    _attribute_map = {
        "values": {"key": "values", "type": "[Product]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ProductResult, self).__init__(**kwargs)
        self.values = kwargs.get("values", None)
        self.next_link = kwargs.get("next_link", None)


class ProductResultValue(msrest.serialization.Model):
    """ProductResultValue.

    :param value:
    :type value: list[~paging.models.Product]
    :param next_link:
    :type next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[Product]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ProductResultValue, self).__init__(**kwargs)
        self.value = kwargs.get("value", None)
        self.next_link = kwargs.get("next_link", None)


class ProductResultValueWithXMSClientName(msrest.serialization.Model):
    """ProductResultValueWithXMSClientName.

    :param indexes:
    :type indexes: list[~paging.models.Product]
    :param next_link:
    :type next_link: str
    """

    _attribute_map = {
        "indexes": {"key": "values", "type": "[Product]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(ProductResultValueWithXMSClientName, self).__init__(**kwargs)
        self.indexes = kwargs.get("indexes", None)
        self.next_link = kwargs.get("next_link", None)
