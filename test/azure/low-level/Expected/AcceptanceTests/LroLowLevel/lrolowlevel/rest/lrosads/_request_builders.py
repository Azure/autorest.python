# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

_SERIALIZER = Serializer()

# fmt: off

def build_put_non_retry400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a 400 to the initial request.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200, 201
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/put/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_non_retry201_creating400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and
    201 response code.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200, 201
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/put/201/creating/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_non_retry201_creating400_invalid_json_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a Product with 'ProvisioningState' = 'Creating' and
    201 response code.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200, 201
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/put/201/creating/400/invalidjson')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_async_relative_retry400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a 200 with ProvisioningState=’Creating’. Poll the
    endpoint indicated in the Azure-AsyncOperation header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/putasync/retry/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_non_retry400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running delete request, service returns a 400 with an error body.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/delete/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete202_non_retry400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running delete request, service returns a 202 with a location header.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/delete/202/retry/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_async_relative_retry400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running delete request, service returns a 202 to the initial request. Poll the endpoint
    indicated in the Azure-AsyncOperation header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/deleteasync/retry/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_non_retry400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running post request, service returns a 400 with no error body.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/post/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post202_non_retry400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running post request, service returns a 202 with a location header.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/post/202/retry/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_async_relative_retry400_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running post request, service returns a 202 to the initial request Poll the endpoint
    indicated in the Azure-AsyncOperation header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/nonretryerror/postasync/retry/400')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_error201_no_provisioning_state_payload_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a 201 to the initial request with no payload.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200, 201
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/put/201/noprovisioningstatepayload')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_async_relative_retry_no_status_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a 200 to the initial request, with an entity that
    contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
    header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/putasync/retry/nostatus')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_async_relative_retry_no_status_payload_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a 200 to the initial request, with an entity that
    contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
    header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/putasync/retry/nostatuspayload')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete204_succeeded_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running delete request, service returns a 204 to the initial request, indicating success.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/delete/204/nolocation')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_async_relative_retry_no_status_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running delete request, service returns a 202 to the initial request. Poll the endpoint
    indicated in the Azure-AsyncOperation header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/deleteasync/retry/nostatus')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post202_no_location_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running post request, service returns a 202 to the initial request, without a location
    header.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/post/202/nolocation')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_async_relative_retry_no_payload_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running post request, service returns a 202 to the initial request, with an entity that
    contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
    header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/postasync/retry/nopayload')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put200_invalid_json_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a 200 to the initial request, with an entity that is
    not a valid json.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/put/200/invalidjson')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_async_relative_retry_invalid_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a 200 to the initial request, with an entity that
    contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation
    header is invalid.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/putasync/retry/invalidheader')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_async_relative_retry_invalid_json_polling_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running put request, service returns a 200 to the initial request, with an entity that
    contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
    header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/putasync/retry/invalidjsonpolling')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete202_retry_invalid_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running delete request, service returns a 202 to the initial request receing a reponse
    with an invalid 'Location' and 'Retry-After' headers.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/delete/202/retry/invalidheader')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_async_relative_retry_invalid_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running delete request, service returns a 202 to the initial request. The endpoint
    indicated in the Azure-AsyncOperation header is invalid.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/deleteasync/retry/invalidheader')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_delete_async_relative_retry_invalid_json_polling_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running delete request, service returns a 202 to the initial request. Poll the endpoint
    indicated in the Azure-AsyncOperation header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/deleteasync/retry/invalidjsonpolling')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post202_retry_invalid_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running post request, service returns a 202 to the initial request, with invalid
    'Location' and 'Retry-After' headers.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/post/202/retry/invalidheader')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_async_relative_retry_invalid_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running post request, service returns a 202 to the initial request, with an entity that
    contains ProvisioningState=’Creating’. The endpoint indicated in the Azure-AsyncOperation
    header is invalid.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/postasync/retry/invalidheader')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_async_relative_retry_invalid_json_polling_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Long running post request, service returns a 202 to the initial request, with an entity that
    contains ProvisioningState=’Creating’. Poll the endpoint indicated in the Azure-AsyncOperation
    header for operation status.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Product to put.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Product to put.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str (optional)",
                "location": "str (optional)",
                "name": "str (optional)",
                "properties": {
                    "provisioningState": "str (optional)",
                    "provisioningStateValues": "str (optional)"
                },
                "tags": {
                    "str": "str (optional)"
                },
                "type": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/lro/error/postasync/retry/invalidjsonpolling')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )
