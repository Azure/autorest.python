# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Dict, Optional, TypeVar

from msrest import Serializer

from azure.core.rest import HttpRequest

from ..._vendor import _format_url_section

T = TypeVar("T")
JSONType = Any

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_check_name_availability_request(
    subscription_id: str, *, json: JSONType = None, content: Any = None, **kwargs: Any
) -> HttpRequest:
    """Checks that account name is valid and is not in use.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. The name of the storage account within the specified
     resource group. Storage account names must be between 3 and 24 characters in length and use
     numbers and lower-case letters only. Default value is None.
    :paramtype json: JSONType
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). The name of the storage account within the specified
     resource group. Storage account names must be between 3 and 24 characters in length and use
     numbers and lower-case letters only. Default value is None.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "name": "str",  # Required.
                "type": "Microsoft.Storage/storageAccounts"  # Optional. Default value is
                  "Microsoft.Storage/storageAccounts".
            }

            # response body for status code(s): 200
            response.json() == {
                "message": "str",  # Optional. Gets an error message explaining the Reason
                  value in more detail.
                "nameAvailable": bool,  # Optional. Gets a boolean value that indicates
                  whether the name is available for you to use. If true, the name is available. If
                  false, the name has already been taken or invalid and cannot be used.
                "reason": "str"  # Optional. Gets the reason that a storage account name
                  could not be used. The Reason element is only returned if NameAvailable is false.
                  Possible values include: "AccountNameInvalid", "AlreadyExists".
            }
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str
    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    accept = "application/json, text/json"
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_create_request(
    resource_group_name: str,
    account_name: str,
    subscription_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Asynchronously creates a new storage account with the specified parameters. Existing accounts
    cannot be updated with this API and should instead use the Update Storage Account API. If an
    account is already created and subsequent PUT request is issued with exact same set of
    properties, then HTTP 200 would be returned.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param resource_group_name: The name of the resource group within the userâ€™s subscription.
    :type resource_group_name: str
    :param account_name: The name of the storage account within the specified resource group.
     Storage account names must be between 3 and 24 characters in length and use numbers and
     lower-case letters only.
    :type account_name: str
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. The parameters to provide for the created account. Default
     value is None.
    :paramtype json: JSONType
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). The parameters to provide for the created account. Default
     value is None.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str",  # Optional. Resource Id.
                "location": "str",  # Required. Resource location.
                "name": "str",  # Optional. Resource name.
                "properties": {
                    "accountType": "str"  # Optional. Gets or sets the account type.
                      Possible values include: "Standard_LRS", "Standard_ZRS", "Standard_GRS",
                      "Standard_RAGRS", "Premium_LRS".
                },
                "tags": {
                    "str": "str"  # Optional. A set of tags. Resource tags.
                },
                "type": "str"  # Optional. Resource type.
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str",  # Optional. Resource Id.
                "location": "str",  # Required. Resource location.
                "name": "str",  # Optional. Resource name.
                "properties": {
                    "accountType": "str",  # Optional. Gets the type of the storage
                      account. Possible values include: "Standard_LRS", "Standard_ZRS",
                      "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                    "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation
                      date and time of the storage account in UTC.
                    "customDomain": {
                        "name": "str",  # Optional. Gets or sets the custom domain
                          name. Name is the CNAME source.
                        "useSubDomain": bool  # Optional. Indicates whether indirect
                          CName validation is enabled. Default value is false. This should only be
                          set on updates.
                    },
                    "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the
                      timestamp of the most recent instance of a failover to the secondary
                      location. Only the most recent timestamp is retained. This element is not
                      returned if there has never been a failover instance. Only available if the
                      accountType is StandardGRS or StandardRAGRS.
                    "primaryEndpoints": {
                        "FooPoint": {
                            "Bar.Point": {
                                "RecursivePoint": ...
                            }
                        },
                        "blob": "str",  # Optional. Gets the blob endpoint.
                        "dummyEndPoint": ...,
                        "queue": "str",  # Optional. Gets the queue endpoint.
                        "table": "str"  # Optional. Gets the table endpoint.
                    },
                    "primaryLocation": "str",  # Optional. Gets the location of the
                      primary for the storage account.
                    "provisioningState": "str",  # Optional. Gets the status of the
                      storage account at the time the operation was called. Possible values
                      include: "Creating", "ResolvingDNS", "Succeeded".
                    "secondaryEndpoints": {
                        "FooPoint": {
                            "Bar.Point": {
                                "RecursivePoint": ...
                            }
                        },
                        "blob": "str",  # Optional. Gets the blob endpoint.
                        "dummyEndPoint": ...,
                        "queue": "str",  # Optional. Gets the queue endpoint.
                        "table": "str"  # Optional. Gets the table endpoint.
                    },
                    "secondaryLocation": "str",  # Optional. Gets the location of the geo
                      replicated secondary for the storage account. Only available if the
                      accountType is StandardGRS or StandardRAGRS.
                    "statusOfPrimary": "str",  # Optional. Gets the status indicating
                      whether the primary location of the storage account is available or
                      unavailable. Possible values include: "Available", "Unavailable".
                    "statusOfSecondary": "str"  # Optional. Gets the status indicating
                      whether the secondary location of the storage account is available or
                      unavailable. Only available if the accountType is StandardGRS or
                      StandardRAGRS. Possible values include: "Available", "Unavailable".
                },
                "tags": {
                    "str": "str"  # Optional. A set of tags. Resource tags.
                },
                "type": "str"  # Optional. Resource type.
            }
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str
    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    accept = "application/json, text/json"
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_request(
    resource_group_name: str, account_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    """Deletes a storage account in Microsoft Azure.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param resource_group_name: The name of the resource group within the userâ€™s subscription.
    :type resource_group_name: str
    :param account_name: The name of the storage account within the specified resource group.
     Storage account names must be between 3 and 24 characters in length and use numbers and
     lower-case letters only.
    :type account_name: str
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    return HttpRequest(method="DELETE", url=_url, params=_query_parameters, **kwargs)


def build_get_properties_request(
    resource_group_name: str, account_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    """Returns the properties for the specified storage account including but not limited to name,
    account type, location, and account status. The ListKeys operation should be used to retrieve
    storage keys.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param resource_group_name: The name of the resource group within the userâ€™s subscription.
    :type resource_group_name: str
    :param account_name: The name of the storage account within the specified resource group.
     Storage account names must be between 3 and 24 characters in length and use numbers and
     lower-case letters only.
    :type account_name: str
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "id": "str",  # Optional. Resource Id.
                "location": "str",  # Required. Resource location.
                "name": "str",  # Optional. Resource name.
                "properties": {
                    "accountType": "str",  # Optional. Gets the type of the storage
                      account. Possible values include: "Standard_LRS", "Standard_ZRS",
                      "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                    "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation
                      date and time of the storage account in UTC.
                    "customDomain": {
                        "name": "str",  # Optional. Gets or sets the custom domain
                          name. Name is the CNAME source.
                        "useSubDomain": bool  # Optional. Indicates whether indirect
                          CName validation is enabled. Default value is false. This should only be
                          set on updates.
                    },
                    "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the
                      timestamp of the most recent instance of a failover to the secondary
                      location. Only the most recent timestamp is retained. This element is not
                      returned if there has never been a failover instance. Only available if the
                      accountType is StandardGRS or StandardRAGRS.
                    "primaryEndpoints": {
                        "FooPoint": {
                            "Bar.Point": {
                                "RecursivePoint": ...
                            }
                        },
                        "blob": "str",  # Optional. Gets the blob endpoint.
                        "dummyEndPoint": ...,
                        "queue": "str",  # Optional. Gets the queue endpoint.
                        "table": "str"  # Optional. Gets the table endpoint.
                    },
                    "primaryLocation": "str",  # Optional. Gets the location of the
                      primary for the storage account.
                    "provisioningState": "str",  # Optional. Gets the status of the
                      storage account at the time the operation was called. Possible values
                      include: "Creating", "ResolvingDNS", "Succeeded".
                    "secondaryEndpoints": {
                        "FooPoint": {
                            "Bar.Point": {
                                "RecursivePoint": ...
                            }
                        },
                        "blob": "str",  # Optional. Gets the blob endpoint.
                        "dummyEndPoint": ...,
                        "queue": "str",  # Optional. Gets the queue endpoint.
                        "table": "str"  # Optional. Gets the table endpoint.
                    },
                    "secondaryLocation": "str",  # Optional. Gets the location of the geo
                      replicated secondary for the storage account. Only available if the
                      accountType is StandardGRS or StandardRAGRS.
                    "statusOfPrimary": "str",  # Optional. Gets the status indicating
                      whether the primary location of the storage account is available or
                      unavailable. Possible values include: "Available", "Unavailable".
                    "statusOfSecondary": "str"  # Optional. Gets the status indicating
                      whether the secondary location of the storage account is available or
                      unavailable. Only available if the accountType is StandardGRS or
                      StandardRAGRS. Possible values include: "Available", "Unavailable".
                },
                "tags": {
                    "str": "str"  # Optional. A set of tags. Resource tags.
                },
                "type": "str"  # Optional. Resource type.
            }
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str

    accept = "application/json, text/json"
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_update_request(
    resource_group_name: str,
    account_name: str,
    subscription_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Updates the account type or tags for a storage account. It can also be used to add a custom
    domain (note that custom domains cannot be added via the Create operation). Only one custom
    domain is supported per storage account. This API can only be used to update one of tags,
    accountType, or customDomain per call. To update multiple of these properties, call the API
    multiple times with one change per call. This call does not change the storage keys for the
    account. If you want to change storage account keys, use the RegenerateKey operation. The
    location and name of the storage account cannot be changed after creation.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param resource_group_name: The name of the resource group within the userâ€™s subscription.
    :type resource_group_name: str
    :param account_name: The name of the storage account within the specified resource group.
     Storage account names must be between 3 and 24 characters in length and use numbers and
     lower-case letters only.
    :type account_name: str
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. The parameters to update on the account. Note that only
     one property can be changed at a time using this API. Default value is None.
    :paramtype json: JSONType
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). The parameters to update on the account. Note that only one
     property can be changed at a time using this API. Default value is None.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": "str",  # Optional. Resource Id.
                "location": "str",  # Required. Resource location.
                "name": "str",  # Optional. Resource name.
                "properties": {
                    "accountType": "str",  # Optional. Gets or sets the account type.
                      Note that StandardZRS and PremiumLRS accounts cannot be changed to other
                      account types, and other account types cannot be changed to StandardZRS or
                      PremiumLRS. Possible values include: "Standard_LRS", "Standard_ZRS",
                      "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                    "customDomain": {
                        "name": "str",  # Optional. Gets or sets the custom domain
                          name. Name is the CNAME source.
                        "useSubDomain": bool  # Optional. Indicates whether indirect
                          CName validation is enabled. Default value is false. This should only be
                          set on updates.
                    }
                },
                "tags": {
                    "str": "str"  # Optional. A set of tags. Resource tags.
                },
                "type": "str"  # Optional. Resource type.
            }

            # response body for status code(s): 200
            response.json() == {
                "id": "str",  # Optional. Resource Id.
                "location": "str",  # Required. Resource location.
                "name": "str",  # Optional. Resource name.
                "properties": {
                    "accountType": "str",  # Optional. Gets the type of the storage
                      account. Possible values include: "Standard_LRS", "Standard_ZRS",
                      "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                    "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation
                      date and time of the storage account in UTC.
                    "customDomain": {
                        "name": "str",  # Optional. Gets or sets the custom domain
                          name. Name is the CNAME source.
                        "useSubDomain": bool  # Optional. Indicates whether indirect
                          CName validation is enabled. Default value is false. This should only be
                          set on updates.
                    },
                    "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the
                      timestamp of the most recent instance of a failover to the secondary
                      location. Only the most recent timestamp is retained. This element is not
                      returned if there has never been a failover instance. Only available if the
                      accountType is StandardGRS or StandardRAGRS.
                    "primaryEndpoints": {
                        "FooPoint": {
                            "Bar.Point": {
                                "RecursivePoint": ...
                            }
                        },
                        "blob": "str",  # Optional. Gets the blob endpoint.
                        "dummyEndPoint": ...,
                        "queue": "str",  # Optional. Gets the queue endpoint.
                        "table": "str"  # Optional. Gets the table endpoint.
                    },
                    "primaryLocation": "str",  # Optional. Gets the location of the
                      primary for the storage account.
                    "provisioningState": "str",  # Optional. Gets the status of the
                      storage account at the time the operation was called. Possible values
                      include: "Creating", "ResolvingDNS", "Succeeded".
                    "secondaryEndpoints": {
                        "FooPoint": {
                            "Bar.Point": {
                                "RecursivePoint": ...
                            }
                        },
                        "blob": "str",  # Optional. Gets the blob endpoint.
                        "dummyEndPoint": ...,
                        "queue": "str",  # Optional. Gets the queue endpoint.
                        "table": "str"  # Optional. Gets the table endpoint.
                    },
                    "secondaryLocation": "str",  # Optional. Gets the location of the geo
                      replicated secondary for the storage account. Only available if the
                      accountType is StandardGRS or StandardRAGRS.
                    "statusOfPrimary": "str",  # Optional. Gets the status indicating
                      whether the primary location of the storage account is available or
                      unavailable. Possible values include: "Available", "Unavailable".
                    "statusOfSecondary": "str"  # Optional. Gets the status indicating
                      whether the secondary location of the storage account is available or
                      unavailable. Only available if the accountType is StandardGRS or
                      StandardRAGRS. Possible values include: "Available", "Unavailable".
                },
                "tags": {
                    "str": "str"  # Optional. A set of tags. Resource tags.
                },
                "type": "str"  # Optional. Resource type.
            }
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str
    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    accept = "application/json, text/json"
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="PATCH",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_list_keys_request(
    resource_group_name: str, account_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    """Lists the access keys for the specified storage account.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param resource_group_name: The name of the resource group within the userâ€™s subscription.
    :type resource_group_name: str
    :param account_name: The name of the storage account.
    :type account_name: str
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "key1": "str",  # Optional. Gets the value of key 1.
                "key2": "str"  # Optional. Gets the value of key 2.
            }
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str

    accept = "application/json, text/json"
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_list_request(subscription_id: str, **kwargs: Any) -> HttpRequest:
    """Lists all the storage accounts available under the subscription. Note that storage keys are not
    returned; use the ListKeys operation for this.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "str",  # Optional. Gets the link to the next set of results.
                  Currently this will always be empty as the API does not support pagination.
                "value": [
                    {
                        "id": "str",  # Optional. Resource Id.
                        "location": "str",  # Required. Resource location.
                        "name": "str",  # Optional. Resource name.
                        "properties": {
                            "accountType": "str",  # Optional. Gets the type of
                              the storage account. Possible values include: "Standard_LRS",
                              "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                            "creationTime": "2020-02-20 00:00:00",  # Optional.
                              Gets the creation date and time of the storage account in UTC.
                            "customDomain": {
                                "name": "str",  # Optional. Gets or sets the
                                  custom domain name. Name is the CNAME source.
                                "useSubDomain": bool  # Optional. Indicates
                                  whether indirect CName validation is enabled. Default value is
                                  false. This should only be set on updates.
                            },
                            "lastGeoFailoverTime": "2020-02-20 00:00:00",  #
                              Optional. Gets the timestamp of the most recent instance of a
                              failover to the secondary location. Only the most recent timestamp is
                              retained. This element is not returned if there has never been a
                              failover instance. Only available if the accountType is StandardGRS
                              or StandardRAGRS.
                            "primaryEndpoints": {
                                "FooPoint": {
                                    "Bar.Point": {
                                        "RecursivePoint": ...
                                    }
                                },
                                "blob": "str",  # Optional. Gets the blob
                                  endpoint.
                                "dummyEndPoint": ...,
                                "queue": "str",  # Optional. Gets the queue
                                  endpoint.
                                "table": "str"  # Optional. Gets the table
                                  endpoint.
                            },
                            "primaryLocation": "str",  # Optional. Gets the
                              location of the primary for the storage account.
                            "provisioningState": "str",  # Optional. Gets the
                              status of the storage account at the time the operation was called.
                              Possible values include: "Creating", "ResolvingDNS", "Succeeded".
                            "secondaryEndpoints": {
                                "FooPoint": {
                                    "Bar.Point": {
                                        "RecursivePoint": ...
                                    }
                                },
                                "blob": "str",  # Optional. Gets the blob
                                  endpoint.
                                "dummyEndPoint": ...,
                                "queue": "str",  # Optional. Gets the queue
                                  endpoint.
                                "table": "str"  # Optional. Gets the table
                                  endpoint.
                            },
                            "secondaryLocation": "str",  # Optional. Gets the
                              location of the geo replicated secondary for the storage account.
                              Only available if the accountType is StandardGRS or StandardRAGRS.
                            "statusOfPrimary": "str",  # Optional. Gets the
                              status indicating whether the primary location of the storage account
                              is available or unavailable. Possible values include: "Available",
                              "Unavailable".
                            "statusOfSecondary": "str"  # Optional. Gets the
                              status indicating whether the secondary location of the storage
                              account is available or unavailable. Only available if the
                              accountType is StandardGRS or StandardRAGRS. Possible values include:
                              "Available", "Unavailable".
                        },
                        "tags": {
                            "str": "str"  # Optional. A set of tags. Resource
                              tags.
                        },
                        "type": "str"  # Optional. Resource type.
                    }
                ]
            }
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str

    accept = "application/json, text/json"
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_list_by_resource_group_request(resource_group_name: str, subscription_id: str, **kwargs: Any) -> HttpRequest:
    """Lists all the storage accounts available under the given resource group. Note that storage keys
    are not returned; use the ListKeys operation for this.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param resource_group_name: The name of the resource group within the userâ€™s subscription.
    :type resource_group_name: str
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "nextLink": "str",  # Optional. Gets the link to the next set of results.
                  Currently this will always be empty as the API does not support pagination.
                "value": [
                    {
                        "id": "str",  # Optional. Resource Id.
                        "location": "str",  # Required. Resource location.
                        "name": "str",  # Optional. Resource name.
                        "properties": {
                            "accountType": "str",  # Optional. Gets the type of
                              the storage account. Possible values include: "Standard_LRS",
                              "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                            "creationTime": "2020-02-20 00:00:00",  # Optional.
                              Gets the creation date and time of the storage account in UTC.
                            "customDomain": {
                                "name": "str",  # Optional. Gets or sets the
                                  custom domain name. Name is the CNAME source.
                                "useSubDomain": bool  # Optional. Indicates
                                  whether indirect CName validation is enabled. Default value is
                                  false. This should only be set on updates.
                            },
                            "lastGeoFailoverTime": "2020-02-20 00:00:00",  #
                              Optional. Gets the timestamp of the most recent instance of a
                              failover to the secondary location. Only the most recent timestamp is
                              retained. This element is not returned if there has never been a
                              failover instance. Only available if the accountType is StandardGRS
                              or StandardRAGRS.
                            "primaryEndpoints": {
                                "FooPoint": {
                                    "Bar.Point": {
                                        "RecursivePoint": ...
                                    }
                                },
                                "blob": "str",  # Optional. Gets the blob
                                  endpoint.
                                "dummyEndPoint": ...,
                                "queue": "str",  # Optional. Gets the queue
                                  endpoint.
                                "table": "str"  # Optional. Gets the table
                                  endpoint.
                            },
                            "primaryLocation": "str",  # Optional. Gets the
                              location of the primary for the storage account.
                            "provisioningState": "str",  # Optional. Gets the
                              status of the storage account at the time the operation was called.
                              Possible values include: "Creating", "ResolvingDNS", "Succeeded".
                            "secondaryEndpoints": {
                                "FooPoint": {
                                    "Bar.Point": {
                                        "RecursivePoint": ...
                                    }
                                },
                                "blob": "str",  # Optional. Gets the blob
                                  endpoint.
                                "dummyEndPoint": ...,
                                "queue": "str",  # Optional. Gets the queue
                                  endpoint.
                                "table": "str"  # Optional. Gets the table
                                  endpoint.
                            },
                            "secondaryLocation": "str",  # Optional. Gets the
                              location of the geo replicated secondary for the storage account.
                              Only available if the accountType is StandardGRS or StandardRAGRS.
                            "statusOfPrimary": "str",  # Optional. Gets the
                              status indicating whether the primary location of the storage account
                              is available or unavailable. Possible values include: "Available",
                              "Unavailable".
                            "statusOfSecondary": "str"  # Optional. Gets the
                              status indicating whether the secondary location of the storage
                              account is available or unavailable. Only available if the
                              accountType is StandardGRS or StandardRAGRS. Possible values include:
                              "Available", "Unavailable".
                        },
                        "tags": {
                            "str": "str"  # Optional. A set of tags. Resource
                              tags.
                        },
                        "type": "str"  # Optional. Resource type.
                    }
                ]
            }
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str

    accept = "application/json, text/json"
    # Construct URL
    _url = (
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"
    )
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_regenerate_key_request(
    resource_group_name: str,
    account_name: str,
    subscription_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    """Regenerates the access keys for the specified storage account.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param resource_group_name: The name of the resource group within the userâ€™s subscription.
    :type resource_group_name: str
    :param account_name: The name of the storage account within the specified resource group.
     Storage account names must be between 3 and 24 characters in length and use numbers and
     lower-case letters only.
    :type account_name: str
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure
     subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape. Specifies name of the key which should be regenerated.
     Default value is None.
    :paramtype json: JSONType
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input). Specifies name of the key which should be regenerated.
     Default value is None.
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "keyName": "str"  # Optional. Possible values include: "key1", "key2".
            }

            # response body for status code(s): 200
            response.json() == {
                "key1": "str",  # Optional. Gets the value of key 1.
                "key2": "str"  # Optional. Gets the value of key 2.
            }
    """

    api_version = kwargs.pop("api_version", "2015-05-01-preview")  # type: str
    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    accept = "application/json, text/json"
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        json=json,
        content=content,
        **kwargs
    )
