# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, AsyncIterable, Callable, Dict, Generic, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.polling import AsyncNoPolling, AsyncPollingMethod
from azure.core.rest import HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.async_arm_polling import AsyncARMPolling
from custompollerpagerdefinitions.aio import AsyncCustomPager, AsyncCustomPoller

from ... import models as _models
from ..._rest import paging as rest_paging

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class PagingOperations:
    """PagingOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~custompollerpager.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def get_no_item_name_pages(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResultValue"]:
        """A paging operation that must return result of the default 'value' node.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResultValue or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResultValue]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResultValue"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_no_item_name_pages_request(
                    template_url=self.get_no_item_name_pages.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_no_item_name_pages_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResultValue', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_no_item_name_pages.metadata = {'url': '/paging/noitemname'}  # type: ignore

    def get_null_next_link_name_pages(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that must ignore any kind of nextLink, and stop after page 1.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_null_next_link_name_pages_request(
                    template_url=self.get_null_next_link_name_pages.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_null_next_link_name_pages_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_null_next_link_name_pages.metadata = {'url': '/paging/nullnextlink'}  # type: ignore

    def get_single_pages(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that finishes on the first call without a nextlink.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype:
         ~custompollerpagerdefinitions.aio.AsyncCustomPager[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_single_pages_request(
                    template_url=self.get_single_pages.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_single_pages_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncCustomPager(
            get_next, extract_data
        )
    get_single_pages.metadata = {'url': '/paging/single'}  # type: ignore

    def first_response_empty(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResultValue"]:
        """A paging operation whose first response's items list is empty, but still returns a next link.
        Second (and final) call, will give you an items list of 1.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResultValue or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResultValue]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResultValue"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_first_response_empty_request(
                    template_url=self.first_response_empty.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_first_response_empty_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResultValue', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    first_response_empty.metadata = {'url': '/paging/firstResponseEmpty/1'}  # type: ignore

    def get_multiple_pages(
        self,
        client_request_id: Optional[str] = None,
        paging_get_multiple_pages_options: Optional["_models.PagingGetMultiplePagesOptions"] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that includes a nextLink that has 10 pages.

        :param client_request_id:
        :type client_request_id: str
        :param paging_get_multiple_pages_options: Parameter group.
        :type paging_get_multiple_pages_options:
         ~custompollerpager.models.PagingGetMultiplePagesOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                _maxresults = None
                _timeout = None
                if paging_get_multiple_pages_options is not None:
                    _maxresults = paging_get_multiple_pages_options.maxresults
                    _timeout = paging_get_multiple_pages_options.timeout

                request = rest_paging.build_get_multiple_pages_request(
                    client_request_id=client_request_id,
                    maxresults=_maxresults,
                    timeout=_timeout,
                    template_url=self.get_multiple_pages.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                _maxresults = None
                _timeout = None
                if paging_get_multiple_pages_options is not None:
                    _maxresults = paging_get_multiple_pages_options.maxresults
                    _timeout = paging_get_multiple_pages_options.timeout

                request = rest_paging.build_get_multiple_pages_request(
                    client_request_id=client_request_id,
                    maxresults=_maxresults,
                    timeout=_timeout,
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_multiple_pages.metadata = {'url': '/paging/multiple'}  # type: ignore

    def get_with_query_params(
        self,
        required_query_parameter: int,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that includes a next operation. It has a different query parameter from it's
        next operation nextOperationWithQueryParams. Returns a ProductResult.

        :param required_query_parameter: A required integer query parameter. Put in value '100' to pass
         test.
        :type required_query_parameter: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_with_query_params_request(
                    required_query_parameter=required_query_parameter,
                    template_url=self.get_with_query_params.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_next_operation_with_query_params_request(
                    template_url='/paging/multiple/nextOperationWithQueryParams',
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_with_query_params.metadata = {'url': '/paging/multiple/getWithQueryParams'}  # type: ignore

    def get_odata_multiple_pages(
        self,
        client_request_id: Optional[str] = None,
        paging_get_odata_multiple_pages_options: Optional["_models.PagingGetOdataMultiplePagesOptions"] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.OdataProductResult"]:
        """A paging operation that includes a nextLink in odata format that has 10 pages.

        :param client_request_id:
        :type client_request_id: str
        :param paging_get_odata_multiple_pages_options: Parameter group.
        :type paging_get_odata_multiple_pages_options:
         ~custompollerpager.models.PagingGetOdataMultiplePagesOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either OdataProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.OdataProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.OdataProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                _maxresults = None
                _timeout = None
                if paging_get_odata_multiple_pages_options is not None:
                    _maxresults = paging_get_odata_multiple_pages_options.maxresults
                    _timeout = paging_get_odata_multiple_pages_options.timeout

                request = rest_paging.build_get_odata_multiple_pages_request(
                    client_request_id=client_request_id,
                    maxresults=_maxresults,
                    timeout=_timeout,
                    template_url=self.get_odata_multiple_pages.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                _maxresults = None
                _timeout = None
                if paging_get_odata_multiple_pages_options is not None:
                    _maxresults = paging_get_odata_multiple_pages_options.maxresults
                    _timeout = paging_get_odata_multiple_pages_options.timeout

                request = rest_paging.build_get_odata_multiple_pages_request(
                    client_request_id=client_request_id,
                    maxresults=_maxresults,
                    timeout=_timeout,
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('OdataProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_odata_multiple_pages.metadata = {'url': '/paging/multiple/odata'}  # type: ignore

    def get_multiple_pages_with_offset(
        self,
        paging_get_multiple_pages_with_offset_options: "_models.PagingGetMultiplePagesWithOffsetOptions",
        client_request_id: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that includes a nextLink that has 10 pages.

        :param paging_get_multiple_pages_with_offset_options: Parameter group.
        :type paging_get_multiple_pages_with_offset_options:
         ~custompollerpager.models.PagingGetMultiplePagesWithOffsetOptions
        :param client_request_id:
        :type client_request_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                _maxresults = None
                _offset = None
                _timeout = None
                if paging_get_multiple_pages_with_offset_options is not None:
                    _maxresults = paging_get_multiple_pages_with_offset_options.maxresults
                    _offset = paging_get_multiple_pages_with_offset_options.offset
                    _timeout = paging_get_multiple_pages_with_offset_options.timeout

                request = rest_paging.build_get_multiple_pages_with_offset_request(
                    offset=_offset,
                    client_request_id=client_request_id,
                    maxresults=_maxresults,
                    timeout=_timeout,
                    template_url=self.get_multiple_pages_with_offset.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                _maxresults = None
                _offset = None
                _timeout = None
                if paging_get_multiple_pages_with_offset_options is not None:
                    _maxresults = paging_get_multiple_pages_with_offset_options.maxresults
                    _offset = paging_get_multiple_pages_with_offset_options.offset
                    _timeout = paging_get_multiple_pages_with_offset_options.timeout

                request = rest_paging.build_get_multiple_pages_with_offset_request(
                    offset=_offset,
                    client_request_id=client_request_id,
                    maxresults=_maxresults,
                    timeout=_timeout,
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_multiple_pages_with_offset.metadata = {'url': '/paging/multiple/withpath/{offset}'}  # type: ignore

    def get_multiple_pages_retry_first(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that fails on the first call with 500 and then retries and then get a
        response including a nextLink that has 10 pages.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_multiple_pages_retry_first_request(
                    template_url=self.get_multiple_pages_retry_first.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_multiple_pages_retry_first_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_multiple_pages_retry_first.metadata = {'url': '/paging/multiple/retryfirst'}  # type: ignore

    def get_multiple_pages_retry_second(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails
        first with 500. The client should retry and finish all 10 pages eventually.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_multiple_pages_retry_second_request(
                    template_url=self.get_multiple_pages_retry_second.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_multiple_pages_retry_second_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_multiple_pages_retry_second.metadata = {'url': '/paging/multiple/retrysecond'}  # type: ignore

    def get_single_pages_failure(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that receives a 400 on the first call.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_single_pages_failure_request(
                    template_url=self.get_single_pages_failure.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_single_pages_failure_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_single_pages_failure.metadata = {'url': '/paging/single/failure'}  # type: ignore

    def get_multiple_pages_failure(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that receives a 400 on the second call.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_multiple_pages_failure_request(
                    template_url=self.get_multiple_pages_failure.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_multiple_pages_failure_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_multiple_pages_failure.metadata = {'url': '/paging/multiple/failure'}  # type: ignore

    def get_multiple_pages_failure_uri(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResult"]:
        """A paging operation that receives an invalid nextLink.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_multiple_pages_failure_uri_request(
                    template_url=self.get_multiple_pages_failure_uri.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_multiple_pages_failure_uri_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_multiple_pages_failure_uri.metadata = {'url': '/paging/multiple/failureuri'}  # type: ignore

    def get_multiple_pages_fragment_next_link(
        self,
        api_version: str,
        tenant: str,
        **kwargs: Any
    ) -> AsyncIterable["_models.OdataProductResult"]:
        """A paging operation that doesn't return a full URL, just a fragment.

        :param api_version: Sets the api version to use.
        :type api_version: str
        :param tenant: Sets the tenant to use.
        :type tenant: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either OdataProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.OdataProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.OdataProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_multiple_pages_fragment_next_link_request(
                    tenant=tenant,
                    api_version=api_version,
                    template_url=self.get_multiple_pages_fragment_next_link.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_next_fragment_request(
                    tenant=tenant,
                    next_link=next_link,
                    api_version=api_version,
                    template_url='/paging/multiple/fragment/{tenant}/{nextLink}',
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('OdataProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_multiple_pages_fragment_next_link.metadata = {'url': '/paging/multiple/fragment/{tenant}'}  # type: ignore

    def get_multiple_pages_fragment_with_grouping_next_link(
        self,
        custom_parameter_group: "_models.CustomParameterGroup",
        **kwargs: Any
    ) -> AsyncIterable["_models.OdataProductResult"]:
        """A paging operation that doesn't return a full URL, just a fragment with parameters grouped.

        :param custom_parameter_group: Parameter group.
        :type custom_parameter_group: ~custompollerpager.models.CustomParameterGroup
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either OdataProductResult or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.OdataProductResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.OdataProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                _api_version = None
                _tenant = None
                if custom_parameter_group is not None:
                    _api_version = custom_parameter_group.api_version
                    _tenant = custom_parameter_group.tenant

                request = rest_paging.build_get_multiple_pages_fragment_with_grouping_next_link_request(
                    tenant=_tenant,
                    api_version=_api_version,
                    template_url=self.get_multiple_pages_fragment_with_grouping_next_link.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                _api_version = None
                _tenant = None
                if custom_parameter_group is not None:
                    _api_version = custom_parameter_group.api_version
                    _tenant = custom_parameter_group.tenant

                request = rest_paging.build_next_fragment_with_grouping_request(
                    tenant=_tenant,
                    next_link=next_link,
                    api_version=_api_version,
                    template_url='/paging/multiple/fragmentwithgrouping/{tenant}/{nextLink}',
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('OdataProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.odata_next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_multiple_pages_fragment_with_grouping_next_link.metadata = {'url': '/paging/multiple/fragmentwithgrouping/{tenant}'}  # type: ignore

    async def _get_multiple_pages_lro_initial(
        self,
        client_request_id: Optional[str] = None,
        paging_get_multiple_pages_lro_options: Optional["_models.PagingGetMultiplePagesLroOptions"] = None,
        **kwargs: Any
    ) -> "_models.ProductResult":
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        _maxresults = None
        _timeout = None
        if paging_get_multiple_pages_lro_options is not None:
            _maxresults = paging_get_multiple_pages_lro_options.maxresults
            _timeout = paging_get_multiple_pages_lro_options.timeout

        request = rest_paging.build_get_multiple_pages_lro_request_initial(
            client_request_id=client_request_id,
            maxresults=_maxresults,
            timeout=_timeout,
            template_url=self._get_multiple_pages_lro_initial.metadata['url'],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('ProductResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    _get_multiple_pages_lro_initial.metadata = {'url': '/paging/multiple/lro'}  # type: ignore


    async def begin_get_multiple_pages_lro(
        self,
        client_request_id: Optional[str] = None,
        paging_get_multiple_pages_lro_options: Optional["_models.PagingGetMultiplePagesLroOptions"] = None,
        **kwargs: Any
    ) -> AsyncCustomPoller[AsyncItemPaged["_models.ProductResult"]]:
        """A long-running paging operation that includes a nextLink that has 10 pages.

        :param client_request_id:
        :type client_request_id: str
        :param paging_get_multiple_pages_lro_options: Parameter group.
        :type paging_get_multiple_pages_lro_options:
         ~custompollerpager.models.PagingGetMultiplePagesLroOptions
        :keyword callable cls: A custom type or function that will be passed the direct response
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncARMPolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncCustomPoller that returns an iterator like instance of either
         ProductResult or the result of cls(response)
        :rtype:
         ~custompollerpagerdefinitions.aio.AsyncCustomPoller[~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResult]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                _maxresults = None
                _timeout = None
                if paging_get_multiple_pages_lro_options is not None:
                    _maxresults = paging_get_multiple_pages_lro_options.maxresults
                    _timeout = paging_get_multiple_pages_lro_options.timeout

                request = rest_paging.build_get_multiple_pages_lro_request_initial(
                    client_request_id=client_request_id,
                    maxresults=_maxresults,
                    timeout=_timeout,
                    template_url=self.begin_get_multiple_pages_lro.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                _maxresults = None
                _timeout = None
                if paging_get_multiple_pages_lro_options is not None:
                    _maxresults = paging_get_multiple_pages_lro_options.maxresults
                    _timeout = paging_get_multiple_pages_lro_options.timeout

                request = rest_paging.build_get_multiple_pages_lro_request_initial(
                    client_request_id=client_request_id,
                    maxresults=_maxresults,
                    timeout=_timeout,
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResult', pipeline_response)
            list_of_elem = deserialized.values
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        polling = kwargs.pop('polling', True)  # type: Union[bool, AsyncPollingMethod]
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResult"]
        lro_delay = kwargs.pop(
            'polling_interval',
            self._config.polling_interval
        )
        cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._get_multiple_pages_lro_initial(
                client_request_id=client_request_id,
                paging_get_multiple_pages_lro_options=paging_get_multiple_pages_lro_options,
                cls=lambda x,y,z: x,
                **kwargs
            )

        kwargs.pop('error_map', None)
        kwargs.pop('content_type', None)
        def get_long_running_output(pipeline_response):
            async def internal_get_next(next_link=None):
                if next_link is None:
                    return pipeline_response
                else:
                    return await get_next(next_link)

            return AsyncItemPaged(
                internal_get_next, extract_data
            )
        if polling is True: polling_method = AsyncARMPolling(lro_delay,  **kwargs)
        elif polling is False: polling_method = AsyncNoPolling()
        else: polling_method = polling
        if cont_token:
            return AsyncCustomPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output
            )
        else:
            return AsyncCustomPoller(self._client, raw_result, get_long_running_output, polling_method)
    begin_get_multiple_pages_lro.metadata = {'url': '/paging/multiple/lro'}  # type: ignore


    def get_paging_model_with_item_name_with_xms_client_name(
        self,
        **kwargs: Any
    ) -> AsyncIterable["_models.ProductResultValueWithXMSClientName"]:
        """A paging operation that returns a paging model whose item name is is overriden by
        x-ms-client-name 'indexes'.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ProductResultValueWithXMSClientName or the result
         of cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~custompollerpager.models.ProductResultValueWithXMSClientName]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ProductResultValueWithXMSClientName"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = rest_paging.build_get_paging_model_with_item_name_with_xms_client_name_request(
                    template_url=self.get_paging_model_with_item_name_with_xms_client_name.metadata['url'],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:
                
                request = rest_paging.build_get_paging_model_with_item_name_with_xms_client_name_request(
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('ProductResultValueWithXMSClientName', pipeline_response)
            list_of_elem = deserialized.indexes
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_paging_model_with_item_name_with_xms_client_name.metadata = {'url': '/paging/itemNameWithXMSClientName'}  # type: ignore
