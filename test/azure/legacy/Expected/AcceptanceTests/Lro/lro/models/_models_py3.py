# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, Optional, TYPE_CHECKING, Union

import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class OperationResult(msrest.serialization.Model):
    """OperationResult.

    :ivar status: The status of the request. Known values are: "Succeeded", "Failed", "canceled",
     "Accepted", "Creating", "Created", "Updating", "Updated", "Deleting", "Deleted", and "OK".
    :vartype status: str or ~lro.models.OperationResultStatus
    :ivar error:
    :vartype error: ~lro.models.OperationResultError
    """

    _attribute_map = {
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "OperationResultError"},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.OperationResultStatus"]] = None,
        error: Optional["_models.OperationResultError"] = None,
        **kwargs
    ):
        """
        :keyword status: The status of the request. Known values are: "Succeeded", "Failed",
         "canceled", "Accepted", "Creating", "Created", "Updating", "Updated", "Deleting", "Deleted",
         and "OK".
        :paramtype status: str or ~lro.models.OperationResultStatus
        :keyword error:
        :paramtype error: ~lro.models.OperationResultError
        """
        super().__init__(**kwargs)
        self.status = status
        self.error = error


class OperationResultError(msrest.serialization.Model):
    """OperationResultError.

    :ivar code: The error code for an operation failure.
    :vartype code: int
    :ivar message: The detailed arror message.
    :vartype message: str
    """

    _attribute_map = {
        "code": {"key": "code", "type": "int"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, code: Optional[int] = None, message: Optional[str] = None, **kwargs):
        """
        :keyword code: The error code for an operation failure.
        :paramtype code: int
        :keyword message: The detailed arror message.
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message


class Resource(msrest.serialization.Model):
    """Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar type: Resource Type.
    :vartype type: str
    :ivar tags: Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar location: Resource Location.
    :vartype location: str
    :ivar name: Resource Name.
    :vartype name: str
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
        "name": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, location: Optional[str] = None, **kwargs):
        """
        :keyword tags: Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword location: Resource Location.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.type = None
        self.tags = tags
        self.location = location
        self.name = None


class Product(Resource):
    """Product.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar type: Resource Type.
    :vartype type: str
    :ivar tags: Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar location: Resource Location.
    :vartype location: str
    :ivar name: Resource Name.
    :vartype name: str
    :ivar provisioning_state:
    :vartype provisioning_state: str
    :ivar provisioning_state_values: Known values are: "Succeeded", "Failed", "canceled",
     "Accepted", "Creating", "Created", "Updating", "Updated", "Deleting", "Deleted", and "OK".
    :vartype provisioning_state_values: str or ~lro.models.ProductPropertiesProvisioningStateValues
    """

    _validation = {
        "id": {"readonly": True},
        "type": {"readonly": True},
        "name": {"readonly": True},
        "provisioning_state_values": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "provisioning_state_values": {"key": "properties.provisioningStateValues", "type": "str"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        provisioning_state: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tags: Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword location: Resource Location.
        :paramtype location: str
        :keyword provisioning_state:
        :paramtype provisioning_state: str
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.provisioning_state = provisioning_state
        self.provisioning_state_values = None


class Sku(msrest.serialization.Model):
    """Sku.

    :ivar name:
    :vartype name: str
    :ivar id:
    :vartype id: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "id": {"key": "id", "type": "str"},
    }

    def __init__(
        self, *, name: Optional[str] = None, id: Optional[str] = None, **kwargs  # pylint: disable=redefined-builtin
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword id:
        :paramtype id: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.id = id


class SubResource(msrest.serialization.Model):
    """SubResource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Sub Resource Id.
    :vartype id: str
    """

    _validation = {
        "id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, **kwargs):
        """ """
        super().__init__(**kwargs)
        self.id = None


class SubProduct(SubResource):
    """SubProduct.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Sub Resource Id.
    :vartype id: str
    :ivar provisioning_state:
    :vartype provisioning_state: str
    :ivar provisioning_state_values: Known values are: "Succeeded", "Failed", "canceled",
     "Accepted", "Creating", "Created", "Updating", "Updated", "Deleting", "Deleted", and "OK".
    :vartype provisioning_state_values: str or
     ~lro.models.SubProductPropertiesProvisioningStateValues
    """

    _validation = {
        "id": {"readonly": True},
        "provisioning_state_values": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "provisioning_state_values": {"key": "properties.provisioningStateValues", "type": "str"},
    }

    def __init__(self, *, provisioning_state: Optional[str] = None, **kwargs):
        """
        :keyword provisioning_state:
        :paramtype provisioning_state: str
        """
        super().__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.provisioning_state_values = None
