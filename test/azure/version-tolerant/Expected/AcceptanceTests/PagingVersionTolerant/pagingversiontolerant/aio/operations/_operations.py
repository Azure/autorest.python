# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from json import loads as _loads
from typing import Any, AsyncIterable, Callable, Dict, Generic, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async

from ...operations._operations import (
    build_paging_first_response_empty_request,
    build_paging_get_multiple_pages_failure_request,
    build_paging_get_multiple_pages_failure_uri_request,
    build_paging_get_multiple_pages_fragment_next_link_request,
    build_paging_get_multiple_pages_fragment_with_grouping_next_link_request,
    build_paging_get_multiple_pages_lro_request_initial,
    build_paging_get_multiple_pages_request,
    build_paging_get_multiple_pages_retry_first_request,
    build_paging_get_multiple_pages_retry_second_request,
    build_paging_get_multiple_pages_with_offset_request,
    build_paging_get_no_item_name_pages_request,
    build_paging_get_null_next_link_name_pages_request,
    build_paging_get_odata_multiple_pages_request,
    build_paging_get_paging_model_with_item_name_with_xms_client_name_request,
    build_paging_get_single_pages_failure_request,
    build_paging_get_single_pages_request,
    build_paging_get_with_query_params_request,
    build_paging_next_fragment_request,
    build_paging_next_fragment_with_grouping_request,
    build_paging_next_operation_with_query_params_request,
)

T = TypeVar("T")
JSONType = Any
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class PagingOperations:
    """PagingOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_no_item_name_pages(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that must return result of the default 'value' node.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "value": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_no_item_name_pages_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_no_item_name_pages_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_no_item_name_pages.metadata = {"url": "/paging/noitemname"}  # type: ignore

    @distributed_trace
    def get_null_next_link_name_pages(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that must ignore any kind of nextLink, and stop after page 1.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_null_next_link_name_pages_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_null_next_link_name_pages_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_null_next_link_name_pages.metadata = {"url": "/paging/nullnextlink"}  # type: ignore

    @distributed_trace
    def get_single_pages(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that finishes on the first call without a nextlink.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_single_pages_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_single_pages_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_single_pages.metadata = {"url": "/paging/single"}  # type: ignore

    @distributed_trace
    def first_response_empty(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation whose first response's items list is empty, but still returns a next link.
        Second (and final) call, will give you an items list of 1.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "value": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_first_response_empty_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_first_response_empty_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    first_response_empty.metadata = {"url": "/paging/firstResponseEmpty/1"}  # type: ignore

    @distributed_trace
    def get_multiple_pages(
        self,
        *,
        client_request_id: Optional[str] = None,
        maxresults: Optional[int] = None,
        timeout: Optional[int] = 30,
        **kwargs: Any
    ) -> AsyncIterable[JSONType]:
        """A paging operation that includes a nextLink that has 10 pages.

        :keyword client_request_id:
        :paramtype client_request_id: str
        :keyword maxresults: Sets the maximum number of items to return in the response.
        :paramtype maxresults: int
        :keyword timeout: Sets the maximum time that the server can spend processing the request, in
         seconds. The default is 30 seconds.
        :paramtype timeout: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_request(
                    client_request_id=client_request_id,
                    maxresults=maxresults,
                    timeout=timeout,
                )
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_multiple_pages_request(
                    client_request_id=client_request_id,
                    maxresults=maxresults,
                    timeout=timeout,
                )
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_multiple_pages.metadata = {"url": "/paging/multiple"}  # type: ignore

    @distributed_trace
    def get_with_query_params(self, *, required_query_parameter: int, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that includes a next operation. It has a different query parameter from it's
        next operation nextOperationWithQueryParams. Returns a ProductResult.

        :keyword required_query_parameter: A required integer query parameter. Put in value '100' to
         pass test.
        :paramtype required_query_parameter: int
        :keyword query_constant: A constant. Must be True and will be passed as a query parameter to
         nextOperationWithQueryParams. The default value is True. Note that overriding this default
         value may result in unsupported behavior.
        :paramtype query_constant: bool
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        query_constant = kwargs.pop("query_constant", True)  # type: bool

        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_with_query_params_request(
                    query_constant=query_constant,
                    required_query_parameter=required_query_parameter,
                )
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_next_operation_with_query_params_request(
                    query_constant=query_constant,
                )
                request.url = self._client.format_url(request.url)

            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_with_query_params.metadata = {"url": "/paging/multiple/getWithQueryParams"}  # type: ignore

    @distributed_trace
    def get_odata_multiple_pages(
        self,
        *,
        client_request_id: Optional[str] = None,
        maxresults: Optional[int] = None,
        timeout: Optional[int] = 30,
        **kwargs: Any
    ) -> AsyncIterable[JSONType]:
        """A paging operation that includes a nextLink in odata format that has 10 pages.

        :keyword client_request_id:
        :paramtype client_request_id: str
        :keyword maxresults: Sets the maximum number of items to return in the response.
        :paramtype maxresults: int
        :keyword timeout: Sets the maximum time that the server can spend processing the request, in
         seconds. The default is 30 seconds.
        :paramtype timeout: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "odata.nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_odata_multiple_pages_request(
                    client_request_id=client_request_id,
                    maxresults=maxresults,
                    timeout=timeout,
                )
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_odata_multiple_pages_request(
                    client_request_id=client_request_id,
                    maxresults=maxresults,
                    timeout=timeout,
                )
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("odata.nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_odata_multiple_pages.metadata = {"url": "/paging/multiple/odata"}  # type: ignore

    @distributed_trace
    def get_multiple_pages_with_offset(
        self,
        offset: int,
        *,
        client_request_id: Optional[str] = None,
        maxresults: Optional[int] = None,
        timeout: Optional[int] = 30,
        **kwargs: Any
    ) -> AsyncIterable[JSONType]:
        """A paging operation that includes a nextLink that has 10 pages.

        :param offset: Offset of return value.
        :type offset: int
        :keyword client_request_id:
        :paramtype client_request_id: str
        :keyword maxresults: Sets the maximum number of items to return in the response.
        :paramtype maxresults: int
        :keyword timeout: Sets the maximum time that the server can spend processing the request, in
         seconds. The default is 30 seconds.
        :paramtype timeout: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_with_offset_request(
                    offset=offset,
                    client_request_id=client_request_id,
                    maxresults=maxresults,
                    timeout=timeout,
                )
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_multiple_pages_with_offset_request(
                    offset=offset,
                    client_request_id=client_request_id,
                    maxresults=maxresults,
                    timeout=timeout,
                )
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_multiple_pages_with_offset.metadata = {"url": "/paging/multiple/withpath/{offset}"}  # type: ignore

    @distributed_trace
    def get_multiple_pages_retry_first(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that fails on the first call with 500 and then retries and then get a
        response including a nextLink that has 10 pages.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_retry_first_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_multiple_pages_retry_first_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_multiple_pages_retry_first.metadata = {"url": "/paging/multiple/retryfirst"}  # type: ignore

    @distributed_trace
    def get_multiple_pages_retry_second(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that includes a nextLink that has 10 pages, of which the 2nd call fails
        first with 500. The client should retry and finish all 10 pages eventually.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_retry_second_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_multiple_pages_retry_second_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_multiple_pages_retry_second.metadata = {"url": "/paging/multiple/retrysecond"}  # type: ignore

    @distributed_trace
    def get_single_pages_failure(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that receives a 400 on the first call.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_single_pages_failure_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_single_pages_failure_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_single_pages_failure.metadata = {"url": "/paging/single/failure"}  # type: ignore

    @distributed_trace
    def get_multiple_pages_failure(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that receives a 400 on the second call.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_failure_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_multiple_pages_failure_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_multiple_pages_failure.metadata = {"url": "/paging/multiple/failure"}  # type: ignore

    @distributed_trace
    def get_multiple_pages_failure_uri(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that receives an invalid nextLink.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_failure_uri_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_multiple_pages_failure_uri_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_multiple_pages_failure_uri.metadata = {"url": "/paging/multiple/failureuri"}  # type: ignore

    @distributed_trace
    def get_multiple_pages_fragment_next_link(
        self, tenant: str, *, api_version: str, **kwargs: Any
    ) -> AsyncIterable[JSONType]:
        """A paging operation that doesn't return a full URL, just a fragment.

        :param tenant: Sets the tenant to use.
        :type tenant: str
        :keyword api_version: Sets the api version to use.
        :paramtype api_version: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "odata.nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_fragment_next_link_request(
                    tenant=tenant,
                    api_version=api_version,
                )
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_next_fragment_request(
                    tenant=tenant,
                    next_link=next_link,
                    api_version=api_version,
                )
                request.url = self._client.format_url(request.url)

            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("odata.nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_multiple_pages_fragment_next_link.metadata = {"url": "/paging/multiple/fragment/{tenant}"}  # type: ignore

    @distributed_trace
    def get_multiple_pages_fragment_with_grouping_next_link(
        self, tenant: str, *, api_version: str, **kwargs: Any
    ) -> AsyncIterable[JSONType]:
        """A paging operation that doesn't return a full URL, just a fragment with parameters grouped.

        :param tenant: Sets the tenant to use.
        :type tenant: str
        :keyword api_version: Sets the api version to use.
        :paramtype api_version: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "odata.nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_fragment_with_grouping_next_link_request(
                    tenant=tenant,
                    api_version=api_version,
                )
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_next_fragment_with_grouping_request(
                    tenant=tenant,
                    next_link=next_link,
                    api_version=api_version,
                )
                request.url = self._client.format_url(request.url)

            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("odata.nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_multiple_pages_fragment_with_grouping_next_link.metadata = {"url": "/paging/multiple/fragmentwithgrouping/{tenant}"}  # type: ignore

    async def _get_multiple_pages_lro_initial(
        self,
        *,
        client_request_id: Optional[str] = None,
        maxresults: Optional[int] = None,
        timeout: Optional[int] = 30,
        **kwargs: Any
    ) -> JSONType:
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paging_get_multiple_pages_lro_request_initial(
            client_request_id=client_request_id,
            maxresults=maxresults,
            timeout=timeout,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def begin_get_multiple_pages_lro(
        self,
        *,
        client_request_id: Optional[str] = None,
        maxresults: Optional[int] = None,
        timeout: Optional[int] = 30,
        **kwargs: Any
    ) -> AsyncLROPoller[AsyncItemPaged[JSONType]]:
        """A long-running paging operation that includes a nextLink that has 10 pages.

        :keyword client_request_id:
        :paramtype client_request_id: str
        :keyword maxresults: Sets the maximum number of items to return in the response.
        :paramtype maxresults: int
        :keyword timeout: Sets the maximum time that the server can spend processing the request, in
         seconds. The default is 30 seconds.
        :paramtype timeout: int
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncLROBasePolling. Pass in False
         for this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns an iterator like instance of JSON object
        :rtype: ~azure.core.polling.AsyncLROPoller[~azure.core.async_paging.AsyncItemPaged[JSONType]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """

        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_multiple_pages_lro_request_initial(
                    client_request_id=client_request_id,
                    maxresults=maxresults,
                    timeout=timeout,
                )
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_multiple_pages_lro_request_initial(
                    client_request_id=client_request_id,
                    maxresults=maxresults,
                    timeout=timeout,
                )
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        polling = kwargs.pop("polling", True)  # type: Union[bool, azure.core.polling.AsyncPollingMethod]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._get_multiple_pages_lro_initial(
                client_request_id=client_request_id,
                maxresults=maxresults,
                timeout=timeout,
                cls=lambda x, y, z: x,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            async def internal_get_next(next_link=None):
                if next_link is None:
                    return pipeline_response
                else:
                    return await get_next(next_link)

            return AsyncItemPaged(internal_get_next, extract_data)

        if polling is True:
            polling_method = AsyncLROBasePolling(lro_delay, **kwargs)
        elif polling is False:
            polling_method = AsyncNoPolling()
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    begin_get_multiple_pages_lro.metadata = {"url": "/paging/multiple/lro"}  # type: ignore

    @distributed_trace
    def get_paging_model_with_item_name_with_xms_client_name(self, **kwargs: Any) -> AsyncIterable[JSONType]:
        """A paging operation that returns a paging model whose item name is is overriden by
        x-ms-client-name 'indexes'.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional.
                    "values": [
                        {
                            "properties": {
                                "id": 0,  # Optional.
                                "name": "str"  # Optional.
                            }
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_paging_get_paging_model_with_item_name_with_xms_client_name_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_paging_get_paging_model_with_item_name_with_xms_client_name_request()
                request.url = self._client.format_url(next_link)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["values"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_paging_model_with_item_name_with_xms_client_name.metadata = {"url": "/paging/itemNameWithXMSClientName"}  # type: ignore
