# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from json import loads as _loads
from typing import Any, AsyncIterable, Callable, Dict, Generic, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.async_arm_polling import AsyncARMPolling

from ...operations._operations import (
    build_storage_accounts_check_name_availability_request,
    build_storage_accounts_create_request_initial,
    build_storage_accounts_delete_request,
    build_storage_accounts_get_properties_request,
    build_storage_accounts_list_by_resource_group_request,
    build_storage_accounts_list_keys_request,
    build_storage_accounts_list_request,
    build_storage_accounts_regenerate_key_request,
    build_storage_accounts_update_request,
    build_usage_list_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class StorageAccountsOperations:
    """StorageAccountsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def check_name_availability(self, account_name: Any, **kwargs: Any) -> Any:
        """Checks that account name is valid and is not in use.

        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: Any
        :return: JSON object
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                account_name = {
                    "name": "str",
                    "type": "Microsoft.Storage/storageAccounts"  # Optional. Default value is "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200
                response.json() == {
                    "message": "str",  # Optional. Gets an error message explaining the Reason value in more detail.
                    "nameAvailable": bool,  # Optional. Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or invalid and cannot be used.
                    "reason": "str"  # Optional. Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false. Valid values are: "AccountNameInvalid", "AlreadyExists".
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = account_name

        request = build_storage_accounts_check_name_availability_request(
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            json=json,
            template_url=self.check_name_availability.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    check_name_availability.metadata = {"url": "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"}  # type: ignore

    async def _create_initial(
        self, resource_group_name: str, account_name: str, parameters: Any, **kwargs: Any
    ) -> Optional[Any]:
        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[Any]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = parameters

        request = build_storage_accounts_create_request_initial(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            json=json,
            template_url=self._create_initial.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            if response.body():
                deserialized = _loads(response.body())
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    _create_initial.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"}  # type: ignore

    @distributed_trace_async
    async def begin_create(
        self, resource_group_name: str, account_name: str, parameters: Any, **kwargs: Any
    ) -> AsyncLROPoller[Any]:
        """Asynchronously creates a new storage account with the specified parameters. Existing accounts
        cannot be updated with this API and should instead use the Update Storage Account API. If an
        account is already created and subsequent PUT request is issued with exact same set of
        properties, then HTTP 200 would be returned.

        :param resource_group_name: The name of the resource group within the userâ€™s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :param parameters: The parameters to provide for the created account.
        :type parameters: Any
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be AsyncARMPolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of AsyncLROPoller that returns JSON object
        :rtype: ~azure.core.polling.AsyncLROPoller[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str"  # Optional. Gets or sets the account type. Valid values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str",  # Optional. Gets the type of the storage account. Valid values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                        "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation date and time of the storage account in UTC.
                        "customDomain": {
                            "name": "str",  # Optional. Gets or sets the custom domain name. Name is the CNAME source.
                            "useSubDomain": bool  # Optional. Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
                        },
                        "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.
                        "primaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "primaryLocation": "str",  # Optional. Gets the location of the primary for the storage account.
                        "provisioningState": "str",  # Optional. Gets the status of the storage account at the time the operation was called. Valid values are: "Creating", "ResolvingDNS", "Succeeded".
                        "secondaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "secondaryLocation": "str",  # Optional. Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.
                        "statusOfPrimary": "str",  # Optional. Gets the status indicating whether the primary location of the storage account is available or unavailable. Valid values are: "Available", "Unavailable".
                        "statusOfSecondary": "str"  # Optional. Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS. Valid values are: "Available", "Unavailable".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }
        """
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]
        polling = kwargs.pop("polling", True)  # type: Union[bool, azure.core.polling.AsyncPollingMethod]
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = await self._create_initial(
                resource_group_name=resource_group_name,
                account_name=account_name,
                parameters=parameters,
                content_type=content_type,
                cls=lambda x, y, z: x,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.body():
                deserialized = _loads(response.body())
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method = AsyncARMPolling(lro_delay, **kwargs)
        elif polling is False:
            polling_method = AsyncNoPolling()
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        else:
            return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)

    begin_create.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"}  # type: ignore

    @distributed_trace_async
    async def delete(self, resource_group_name: str, account_name: str, **kwargs: Any) -> None:
        """Deletes a storage account in Microsoft Azure.

        :param resource_group_name: The name of the resource group within the userâ€™s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_storage_accounts_delete_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            template_url=self.delete.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"}  # type: ignore

    @distributed_trace_async
    async def get_properties(self, resource_group_name: str, account_name: str, **kwargs: Any) -> Any:
        """Returns the properties for the specified storage account including but not limited to name,
        account type, location, and account status. The ListKeys operation should be used to retrieve
        storage keys.

        :param resource_group_name: The name of the resource group within the userâ€™s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :return: JSON object
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str",  # Optional. Gets the type of the storage account. Valid values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                        "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation date and time of the storage account in UTC.
                        "customDomain": {
                            "name": "str",  # Optional. Gets or sets the custom domain name. Name is the CNAME source.
                            "useSubDomain": bool  # Optional. Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
                        },
                        "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.
                        "primaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "primaryLocation": "str",  # Optional. Gets the location of the primary for the storage account.
                        "provisioningState": "str",  # Optional. Gets the status of the storage account at the time the operation was called. Valid values are: "Creating", "ResolvingDNS", "Succeeded".
                        "secondaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "secondaryLocation": "str",  # Optional. Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.
                        "statusOfPrimary": "str",  # Optional. Gets the status indicating whether the primary location of the storage account is available or unavailable. Valid values are: "Available", "Unavailable".
                        "statusOfSecondary": "str"  # Optional. Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS. Valid values are: "Available", "Unavailable".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_storage_accounts_get_properties_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            template_url=self.get_properties.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_properties.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"}  # type: ignore

    @distributed_trace_async
    async def update(self, resource_group_name: str, account_name: str, parameters: Any, **kwargs: Any) -> Any:
        """Updates the account type or tags for a storage account. It can also be used to add a custom
        domain (note that custom domains cannot be added via the Create operation). Only one custom
        domain is supported per storage account. This API can only be used to update one of tags,
        accountType, or customDomain per call. To update multiple of these properties, call the API
        multiple times with one change per call. This call does not change the storage keys for the
        account. If you want to change storage account keys, use the RegenerateKey operation. The
        location and name of the storage account cannot be changed after creation.

        :param resource_group_name: The name of the resource group within the userâ€™s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :param parameters: The parameters to update on the account. Note that only one property can be
         changed at a time using this API.
        :type parameters: Any
        :return: JSON object
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str",  # Optional. Gets or sets the account type. Note that StandardZRS and PremiumLRS accounts cannot be changed to other account types, and other account types cannot be changed to StandardZRS or PremiumLRS. Valid values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                        "customDomain": {
                            "name": "str",  # Optional. Gets or sets the custom domain name. Name is the CNAME source.
                            "useSubDomain": bool  # Optional. Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
                        }
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str",  # Optional. Gets the type of the storage account. Valid values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                        "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation date and time of the storage account in UTC.
                        "customDomain": {
                            "name": "str",  # Optional. Gets or sets the custom domain name. Name is the CNAME source.
                            "useSubDomain": bool  # Optional. Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
                        },
                        "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.
                        "primaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "primaryLocation": "str",  # Optional. Gets the location of the primary for the storage account.
                        "provisioningState": "str",  # Optional. Gets the status of the storage account at the time the operation was called. Valid values are: "Creating", "ResolvingDNS", "Succeeded".
                        "secondaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "secondaryLocation": "str",  # Optional. Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.
                        "statusOfPrimary": "str",  # Optional. Gets the status indicating whether the primary location of the storage account is available or unavailable. Valid values are: "Available", "Unavailable".
                        "statusOfSecondary": "str"  # Optional. Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS. Valid values are: "Available", "Unavailable".
                    },
                    "tags": {
                        "str": "str"  # Optional. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = parameters

        request = build_storage_accounts_update_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            json=json,
            template_url=self.update.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"}  # type: ignore

    @distributed_trace_async
    async def list_keys(self, resource_group_name: str, account_name: str, **kwargs: Any) -> Any:
        """Lists the access keys for the specified storage account.

        :param resource_group_name: The name of the resource group within the userâ€™s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account.
        :type account_name: str
        :return: JSON object
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "key1": "str",  # Optional. Gets the value of key 1.
                    "key2": "str"  # Optional. Gets the value of key 2.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_storage_accounts_list_keys_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            template_url=self.list_keys.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_keys.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys"}  # type: ignore

    @distributed_trace
    def list(self, **kwargs: Any) -> AsyncIterable[Any]:
        """Lists all the storage accounts available under the subscription. Note that storage keys are not
        returned; use the ListKeys operation for this.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional. Gets the link to the next set of results. Currently this will always be empty as the API does not support pagination.
                    "value": [
                        {
                            "id": "str",  # Optional. Resource Id.
                            "location": "str",  # Resource location.
                            "name": "str",  # Optional. Resource name.
                            "properties": {
                                "accountType": "str",  # Optional. Gets the type of the storage account. Valid values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                                "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation date and time of the storage account in UTC.
                                "customDomain": {
                                    "name": "str",  # Optional. Gets or sets the custom domain name. Name is the CNAME source.
                                    "useSubDomain": bool  # Optional. Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
                                },
                                "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.
                                "primaryEndpoints": {
                                    "FooPoint": {
                                        "Bar.Point": {
                                            "RecursivePoint": ...
                                        }
                                    },
                                    "blob": "str",  # Optional. Gets the blob endpoint.
                                    "dummyEndPoint": ...,
                                    "queue": "str",  # Optional. Gets the queue endpoint.
                                    "table": "str"  # Optional. Gets the table endpoint.
                                },
                                "primaryLocation": "str",  # Optional. Gets the location of the primary for the storage account.
                                "provisioningState": "str",  # Optional. Gets the status of the storage account at the time the operation was called. Valid values are: "Creating", "ResolvingDNS", "Succeeded".
                                "secondaryEndpoints": {
                                    "FooPoint": {
                                        "Bar.Point": {
                                            "RecursivePoint": ...
                                        }
                                    },
                                    "blob": "str",  # Optional. Gets the blob endpoint.
                                    "dummyEndPoint": ...,
                                    "queue": "str",  # Optional. Gets the queue endpoint.
                                    "table": "str"  # Optional. Gets the table endpoint.
                                },
                                "secondaryLocation": "str",  # Optional. Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.
                                "statusOfPrimary": "str",  # Optional. Gets the status indicating whether the primary location of the storage account is available or unavailable. Valid values are: "Available", "Unavailable".
                                "statusOfSecondary": "str"  # Optional. Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS. Valid values are: "Available", "Unavailable".
                            },
                            "tags": {
                                "str": "str"  # Optional. Resource tags.
                            },
                            "type": "str"  # Optional. Resource type.
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_storage_accounts_list_request(
                    subscription_id=self._config.subscription_id,
                    template_url=self.list.metadata["url"],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_storage_accounts_list_request(
                    subscription_id=self._config.subscription_id,
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list.metadata = {"url": "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts"}  # type: ignore

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> AsyncIterable[Any]:
        """Lists all the storage accounts available under the given resource group. Note that storage keys
        are not returned; use the ListKeys operation for this.

        :param resource_group_name: The name of the resource group within the userâ€™s subscription.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[Any]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional. Gets the link to the next set of results. Currently this will always be empty as the API does not support pagination.
                    "value": [
                        {
                            "id": "str",  # Optional. Resource Id.
                            "location": "str",  # Resource location.
                            "name": "str",  # Optional. Resource name.
                            "properties": {
                                "accountType": "str",  # Optional. Gets the type of the storage account. Valid values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                                "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation date and time of the storage account in UTC.
                                "customDomain": {
                                    "name": "str",  # Optional. Gets or sets the custom domain name. Name is the CNAME source.
                                    "useSubDomain": bool  # Optional. Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
                                },
                                "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.
                                "primaryEndpoints": {
                                    "FooPoint": {
                                        "Bar.Point": {
                                            "RecursivePoint": ...
                                        }
                                    },
                                    "blob": "str",  # Optional. Gets the blob endpoint.
                                    "dummyEndPoint": ...,
                                    "queue": "str",  # Optional. Gets the queue endpoint.
                                    "table": "str"  # Optional. Gets the table endpoint.
                                },
                                "primaryLocation": "str",  # Optional. Gets the location of the primary for the storage account.
                                "provisioningState": "str",  # Optional. Gets the status of the storage account at the time the operation was called. Valid values are: "Creating", "ResolvingDNS", "Succeeded".
                                "secondaryEndpoints": {
                                    "FooPoint": {
                                        "Bar.Point": {
                                            "RecursivePoint": ...
                                        }
                                    },
                                    "blob": "str",  # Optional. Gets the blob endpoint.
                                    "dummyEndPoint": ...,
                                    "queue": "str",  # Optional. Gets the queue endpoint.
                                    "table": "str"  # Optional. Gets the table endpoint.
                                },
                                "secondaryLocation": "str",  # Optional. Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.
                                "statusOfPrimary": "str",  # Optional. Gets the status indicating whether the primary location of the storage account is available or unavailable. Valid values are: "Available", "Unavailable".
                                "statusOfSecondary": "str"  # Optional. Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS. Valid values are: "Available", "Unavailable".
                            },
                            "tags": {
                                "str": "str"  # Optional. Resource tags.
                            },
                            "type": "str"  # Optional. Resource type.
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        def prepare_request(next_link=None):
            if not next_link:

                request = build_storage_accounts_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    template_url=self.list_by_resource_group.metadata["url"],
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)

            else:

                request = build_storage_accounts_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    template_url=next_link,
                )._to_pipeline_transport_request()
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = _loads(pipeline_response.http_response.body())
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    list_by_resource_group.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"}  # type: ignore

    @distributed_trace_async
    async def regenerate_key(
        self, resource_group_name: str, account_name: str, regenerate_key: Any, **kwargs: Any
    ) -> Any:
        """Regenerates the access keys for the specified storage account.

        :param resource_group_name: The name of the resource group within the userâ€™s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :param regenerate_key: Specifies name of the key which should be regenerated.
        :type regenerate_key: Any
        :return: JSON object
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                regenerate_key = {
                    "keyName": "str"  # Optional.  Valid values are: "key1", "key2".
                }

                # response body for status code(s): 200
                response.json() == {
                    "key1": "str",  # Optional. Gets the value of key 1.
                    "key2": "str"  # Optional. Gets the value of key 2.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = regenerate_key

        request = build_storage_accounts_regenerate_key_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            content_type=content_type,
            json=json,
            template_url=self.regenerate_key.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    regenerate_key.metadata = {"url": "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey"}  # type: ignore


class UsageOperations:
    """UsageOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def list(self, **kwargs: Any) -> Any:
        """Gets the current usage count and the limit for the resources under the subscription.

        :return: JSON object
        :rtype: Any
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "value": [
                        {
                            "currentValue": 0,  # Optional. Gets the current count of the allocated resources in the subscription.
                            "limit": 0,  # Optional. Gets the maximum count of the resources that can be allocated in the subscription.
                            "name": {
                                "localizedValue": "str",  # Optional. Gets a localized string describing the resource name.
                                "value": "str"  # Optional. Gets a string describing the resource name.
                            },
                            "unit": "str"  # Optional. Gets the unit of measurement. Valid values are: "Count", "Bytes", "Seconds", "Percent", "CountsPerSecond", "BytesPerSecond".
                        }
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Any]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_usage_list_request(
            subscription_id=self._config.subscription_id,
            template_url=self.list.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list.metadata = {"url": "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages"}  # type: ignore
