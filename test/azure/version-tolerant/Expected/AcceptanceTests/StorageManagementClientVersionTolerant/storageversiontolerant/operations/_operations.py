# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Iterable, Optional, TypeVar, Union, cast

from msrest import Serializer

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.arm_polling import ARMPolling

from .._vendor import _format_url_section

T = TypeVar("T")
JSONType = Any
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_storage_accounts_check_name_availability_request(
    subscription_id: str, *, json: JSONType = None, content: Any = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, json=json, content=content, **kwargs)


def build_storage_accounts_create_request_initial(
    resource_group_name: str,
    account_name: str,
    subscription_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, json=json, content=content, **kwargs)


def build_storage_accounts_delete_request(
    resource_group_name: str, account_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, **kwargs)


def build_storage_accounts_get_properties_request(
    resource_group_name: str, account_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_storage_accounts_update_request(
    resource_group_name: str,
    account_name: str,
    subscription_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, json=json, content=content, **kwargs)


def build_storage_accounts_list_keys_request(
    resource_group_name: str, account_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_storage_accounts_list_request(subscription_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_storage_accounts_list_by_resource_group_request(
    resource_group_name: str, subscription_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = (
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"
    )
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_storage_accounts_regenerate_key_request(
    resource_group_name: str,
    account_name: str,
    subscription_id: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey"  # pylint: disable=line-too-long
    path_format_arguments = {
        "resourceGroupName": _SERIALIZER.url("resource_group_name", resource_group_name, "str"),
        "accountName": _SERIALIZER.url("account_name", account_name, "str"),
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, json=json, content=content, **kwargs)


def build_usage_list_request(subscription_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
    accept = _headers.pop("Accept", "application/json, text/json")

    # Construct URL
    _url = "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/usages"
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class StorageAccountsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~storageversiontolerant.StorageManagementClient`'s
        :attr:`storage_accounts` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def check_name_availability(
        self, account_name: JSONType, *, content_type: Optional[str] = "application/json", **kwargs: Any
    ) -> JSONType:
        """Checks that account name is valid and is not in use.

        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: JSONType
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json" or "text/json". Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                account_name = {
                    "name": "str",  # Required.
                    "type": "Microsoft.Storage/storageAccounts"  # Optional. Default value is
                      "Microsoft.Storage/storageAccounts".
                }

                # response body for status code(s): 200
                response.json() == {
                    "message": "str",  # Optional. Gets an error message explaining the Reason
                      value in more detail.
                    "nameAvailable": bool,  # Optional. Gets a boolean value that indicates
                      whether the name is available for you to use. If true, the name is available. If
                      false, the name has already been taken or invalid and cannot be used.
                    "reason": "str"  # Optional. Gets the reason that a storage account name
                      could not be used. The Reason element is only returned if NameAvailable is false.
                      Known values are: "AccountNameInvalid", "AlreadyExists".
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]

        _json = account_name

        request = build_storage_accounts_check_name_availability_request(
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSONType, deserialized), {})

        return cast(JSONType, deserialized)

    def _create_initial(
        self,
        resource_group_name: str,
        account_name: str,
        parameters: JSONType,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> Optional[JSONType]:
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[JSONType]]

        _json = parameters

        request = build_storage_accounts_create_request_initial(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def begin_create(
        self,
        resource_group_name: str,
        account_name: str,
        parameters: JSONType,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSONType]:
        """Asynchronously creates a new storage account with the specified parameters. Existing accounts
        cannot be updated with this API and should instead use the Update Storage Account API. If an
        account is already created and subsequent PUT request is issued with exact same set of
        properties, then HTTP 200 would be returned.

        :param resource_group_name: The name of the resource group within the user’s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :param parameters: The parameters to provide for the created account.
        :type parameters: JSONType
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json" or "text/json". Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be ARMPolling. Pass in False for this
         operation to not poll, or pass in your own initialized polling object for a personal polling
         strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Required. Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str"  # Optional. Gets or sets the account type.
                          Known values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS",
                          "Standard_RAGRS", "Premium_LRS".
                    },
                    "tags": {
                        "str": "str"  # Optional. A set of tags. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Required. Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str",  # Optional. Gets the type of the storage
                          account. Known values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS",
                          "Standard_RAGRS", "Premium_LRS".
                        "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation
                          date and time of the storage account in UTC.
                        "customDomain": {
                            "name": "str",  # Optional. Gets or sets the custom domain
                              name. Name is the CNAME source.
                            "useSubDomain": bool  # Optional. Indicates whether indirect
                              CName validation is enabled. Default value is false. This should only be
                              set on updates.
                        },
                        "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the
                          timestamp of the most recent instance of a failover to the secondary
                          location. Only the most recent timestamp is retained. This element is not
                          returned if there has never been a failover instance. Only available if the
                          accountType is StandardGRS or StandardRAGRS.
                        "primaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "primaryLocation": "str",  # Optional. Gets the location of the
                          primary for the storage account.
                        "provisioningState": "str",  # Optional. Gets the status of the
                          storage account at the time the operation was called. Known values are:
                          "Creating", "ResolvingDNS", "Succeeded".
                        "secondaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "secondaryLocation": "str",  # Optional. Gets the location of the geo
                          replicated secondary for the storage account. Only available if the
                          accountType is StandardGRS or StandardRAGRS.
                        "statusOfPrimary": "str",  # Optional. Gets the status indicating
                          whether the primary location of the storage account is available or
                          unavailable. Known values are: "Available", "Unavailable".
                        "statusOfSecondary": "str"  # Optional. Gets the status indicating
                          whether the secondary location of the storage account is available or
                          unavailable. Only available if the accountType is StandardGRS or
                          StandardRAGRS. Known values are: "Available", "Unavailable".
                    },
                    "tags": {
                        "str": "str"  # Optional. A set of tags. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]
        polling = kwargs.pop("polling", True)  # type: Union[bool, PollingMethod]
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token = kwargs.pop("continuation_token", None)  # type: Optional[str]
        if cont_token is None:
            raw_result = self._create_initial(  # type: ignore
                resource_group_name=resource_group_name,
                account_name=account_name,
                parameters=parameters,
                content_type=content_type,
                api_version=api_version,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})
            return deserialized

        if polling is True:
            polling_method = cast(PollingMethod, ARMPolling(lro_delay, **kwargs))  # type: PollingMethod
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, resource_group_name: str, account_name: str, **kwargs: Any
    ) -> None:
        """Deletes a storage account in Microsoft Azure.

        :param resource_group_name: The name of the resource group within the user’s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_storage_accounts_delete_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_properties(self, resource_group_name: str, account_name: str, **kwargs: Any) -> JSONType:
        """Returns the properties for the specified storage account including but not limited to name,
        account type, location, and account status. The ListKeys operation should be used to retrieve
        storage keys.

        :param resource_group_name: The name of the resource group within the user’s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Required. Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str",  # Optional. Gets the type of the storage
                          account. Known values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS",
                          "Standard_RAGRS", "Premium_LRS".
                        "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation
                          date and time of the storage account in UTC.
                        "customDomain": {
                            "name": "str",  # Optional. Gets or sets the custom domain
                              name. Name is the CNAME source.
                            "useSubDomain": bool  # Optional. Indicates whether indirect
                              CName validation is enabled. Default value is false. This should only be
                              set on updates.
                        },
                        "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the
                          timestamp of the most recent instance of a failover to the secondary
                          location. Only the most recent timestamp is retained. This element is not
                          returned if there has never been a failover instance. Only available if the
                          accountType is StandardGRS or StandardRAGRS.
                        "primaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "primaryLocation": "str",  # Optional. Gets the location of the
                          primary for the storage account.
                        "provisioningState": "str",  # Optional. Gets the status of the
                          storage account at the time the operation was called. Known values are:
                          "Creating", "ResolvingDNS", "Succeeded".
                        "secondaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "secondaryLocation": "str",  # Optional. Gets the location of the geo
                          replicated secondary for the storage account. Only available if the
                          accountType is StandardGRS or StandardRAGRS.
                        "statusOfPrimary": "str",  # Optional. Gets the status indicating
                          whether the primary location of the storage account is available or
                          unavailable. Known values are: "Available", "Unavailable".
                        "statusOfSecondary": "str"  # Optional. Gets the status indicating
                          whether the secondary location of the storage account is available or
                          unavailable. Only available if the accountType is StandardGRS or
                          StandardRAGRS. Known values are: "Available", "Unavailable".
                    },
                    "tags": {
                        "str": "str"  # Optional. A set of tags. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]

        request = build_storage_accounts_get_properties_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSONType, deserialized), {})

        return cast(JSONType, deserialized)

    @distributed_trace
    def update(
        self,
        resource_group_name: str,
        account_name: str,
        parameters: JSONType,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> JSONType:
        """Updates the account type or tags for a storage account. It can also be used to add a custom
        domain (note that custom domains cannot be added via the Create operation). Only one custom
        domain is supported per storage account. This API can only be used to update one of tags,
        accountType, or customDomain per call. To update multiple of these properties, call the API
        multiple times with one change per call. This call does not change the storage keys for the
        account. If you want to change storage account keys, use the RegenerateKey operation. The
        location and name of the storage account cannot be changed after creation.

        :param resource_group_name: The name of the resource group within the user’s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :param parameters: The parameters to update on the account. Note that only one property can be
         changed at a time using this API.
        :type parameters: JSONType
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json" or "text/json". Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                parameters = {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Required. Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str",  # Optional. Gets or sets the account type.
                          Note that StandardZRS and PremiumLRS accounts cannot be changed to other
                          account types, and other account types cannot be changed to StandardZRS or
                          PremiumLRS. Known values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS",
                          "Standard_RAGRS", "Premium_LRS".
                        "customDomain": {
                            "name": "str",  # Optional. Gets or sets the custom domain
                              name. Name is the CNAME source.
                            "useSubDomain": bool  # Optional. Indicates whether indirect
                              CName validation is enabled. Default value is false. This should only be
                              set on updates.
                        }
                    },
                    "tags": {
                        "str": "str"  # Optional. A set of tags. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }

                # response body for status code(s): 200
                response.json() == {
                    "id": "str",  # Optional. Resource Id.
                    "location": "str",  # Required. Resource location.
                    "name": "str",  # Optional. Resource name.
                    "properties": {
                        "accountType": "str",  # Optional. Gets the type of the storage
                          account. Known values are: "Standard_LRS", "Standard_ZRS", "Standard_GRS",
                          "Standard_RAGRS", "Premium_LRS".
                        "creationTime": "2020-02-20 00:00:00",  # Optional. Gets the creation
                          date and time of the storage account in UTC.
                        "customDomain": {
                            "name": "str",  # Optional. Gets or sets the custom domain
                              name. Name is the CNAME source.
                            "useSubDomain": bool  # Optional. Indicates whether indirect
                              CName validation is enabled. Default value is false. This should only be
                              set on updates.
                        },
                        "lastGeoFailoverTime": "2020-02-20 00:00:00",  # Optional. Gets the
                          timestamp of the most recent instance of a failover to the secondary
                          location. Only the most recent timestamp is retained. This element is not
                          returned if there has never been a failover instance. Only available if the
                          accountType is StandardGRS or StandardRAGRS.
                        "primaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "primaryLocation": "str",  # Optional. Gets the location of the
                          primary for the storage account.
                        "provisioningState": "str",  # Optional. Gets the status of the
                          storage account at the time the operation was called. Known values are:
                          "Creating", "ResolvingDNS", "Succeeded".
                        "secondaryEndpoints": {
                            "FooPoint": {
                                "Bar.Point": {
                                    "RecursivePoint": ...
                                }
                            },
                            "blob": "str",  # Optional. Gets the blob endpoint.
                            "dummyEndPoint": ...,
                            "queue": "str",  # Optional. Gets the queue endpoint.
                            "table": "str"  # Optional. Gets the table endpoint.
                        },
                        "secondaryLocation": "str",  # Optional. Gets the location of the geo
                          replicated secondary for the storage account. Only available if the
                          accountType is StandardGRS or StandardRAGRS.
                        "statusOfPrimary": "str",  # Optional. Gets the status indicating
                          whether the primary location of the storage account is available or
                          unavailable. Known values are: "Available", "Unavailable".
                        "statusOfSecondary": "str"  # Optional. Gets the status indicating
                          whether the secondary location of the storage account is available or
                          unavailable. Only available if the accountType is StandardGRS or
                          StandardRAGRS. Known values are: "Available", "Unavailable".
                    },
                    "tags": {
                        "str": "str"  # Optional. A set of tags. Resource tags.
                    },
                    "type": "str"  # Optional. Resource type.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]

        _json = parameters

        request = build_storage_accounts_update_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSONType, deserialized), {})

        return cast(JSONType, deserialized)

    @distributed_trace
    def list_keys(self, resource_group_name: str, account_name: str, **kwargs: Any) -> JSONType:
        """Lists the access keys for the specified storage account.

        :param resource_group_name: The name of the resource group within the user’s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account.
        :type account_name: str
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "key1": "str",  # Optional. Gets the value of key 1.
                    "key2": "str"  # Optional. Gets the value of key 2.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]

        request = build_storage_accounts_list_keys_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSONType, deserialized), {})

        return cast(JSONType, deserialized)

    @distributed_trace
    def list(self, **kwargs: Any) -> Iterable[JSONType]:
        """Lists all the storage accounts available under the subscription. Note that storage keys are not
        returned; use the ListKeys operation for this.

        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional. Gets the link to the next set of results.
                      Currently this will always be empty as the API does not support pagination.
                    "value": [
                        {
                            "id": "str",  # Optional. Resource Id.
                            "location": "str",  # Required. Resource location.
                            "name": "str",  # Optional. Resource name.
                            "properties": {
                                "accountType": "str",  # Optional. Gets the type of
                                  the storage account. Known values are: "Standard_LRS",
                                  "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                                "creationTime": "2020-02-20 00:00:00",  # Optional.
                                  Gets the creation date and time of the storage account in UTC.
                                "customDomain": {
                                    "name": "str",  # Optional. Gets or sets the
                                      custom domain name. Name is the CNAME source.
                                    "useSubDomain": bool  # Optional. Indicates
                                      whether indirect CName validation is enabled. Default value is
                                      false. This should only be set on updates.
                                },
                                "lastGeoFailoverTime": "2020-02-20 00:00:00",  #
                                  Optional. Gets the timestamp of the most recent instance of a
                                  failover to the secondary location. Only the most recent timestamp is
                                  retained. This element is not returned if there has never been a
                                  failover instance. Only available if the accountType is StandardGRS
                                  or StandardRAGRS.
                                "primaryEndpoints": {
                                    "FooPoint": {
                                        "Bar.Point": {
                                            "RecursivePoint": ...
                                        }
                                    },
                                    "blob": "str",  # Optional. Gets the blob
                                      endpoint.
                                    "dummyEndPoint": ...,
                                    "queue": "str",  # Optional. Gets the queue
                                      endpoint.
                                    "table": "str"  # Optional. Gets the table
                                      endpoint.
                                },
                                "primaryLocation": "str",  # Optional. Gets the
                                  location of the primary for the storage account.
                                "provisioningState": "str",  # Optional. Gets the
                                  status of the storage account at the time the operation was called.
                                  Known values are: "Creating", "ResolvingDNS", "Succeeded".
                                "secondaryEndpoints": {
                                    "FooPoint": {
                                        "Bar.Point": {
                                            "RecursivePoint": ...
                                        }
                                    },
                                    "blob": "str",  # Optional. Gets the blob
                                      endpoint.
                                    "dummyEndPoint": ...,
                                    "queue": "str",  # Optional. Gets the queue
                                      endpoint.
                                    "table": "str"  # Optional. Gets the table
                                      endpoint.
                                },
                                "secondaryLocation": "str",  # Optional. Gets the
                                  location of the geo replicated secondary for the storage account.
                                  Only available if the accountType is StandardGRS or StandardRAGRS.
                                "statusOfPrimary": "str",  # Optional. Gets the
                                  status indicating whether the primary location of the storage account
                                  is available or unavailable. Known values are: "Available",
                                  "Unavailable".
                                "statusOfSecondary": "str"  # Optional. Gets the
                                  status indicating whether the secondary location of the storage
                                  account is available or unavailable. Only available if the
                                  accountType is StandardGRS or StandardRAGRS. Known values are:
                                  "Available", "Unavailable".
                            },
                            "tags": {
                                "str": "str"  # Optional. A set of tags. Resource
                                  tags.
                            },
                            "type": "str"  # Optional. Resource type.
                        }
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_storage_accounts_list_request(
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:

                request = build_storage_accounts_list_request(
                    subscription_id=self._config.subscription_id,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(next_link)  # type: ignore
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_by_resource_group(self, resource_group_name: str, **kwargs: Any) -> Iterable[JSONType]:
        """Lists all the storage accounts available under the given resource group. Note that storage keys
        are not returned; use the ListKeys operation for this.

        :param resource_group_name: The name of the resource group within the user’s subscription.
        :type resource_group_name: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "nextLink": "str",  # Optional. Gets the link to the next set of results.
                      Currently this will always be empty as the API does not support pagination.
                    "value": [
                        {
                            "id": "str",  # Optional. Resource Id.
                            "location": "str",  # Required. Resource location.
                            "name": "str",  # Optional. Resource name.
                            "properties": {
                                "accountType": "str",  # Optional. Gets the type of
                                  the storage account. Known values are: "Standard_LRS",
                                  "Standard_ZRS", "Standard_GRS", "Standard_RAGRS", "Premium_LRS".
                                "creationTime": "2020-02-20 00:00:00",  # Optional.
                                  Gets the creation date and time of the storage account in UTC.
                                "customDomain": {
                                    "name": "str",  # Optional. Gets or sets the
                                      custom domain name. Name is the CNAME source.
                                    "useSubDomain": bool  # Optional. Indicates
                                      whether indirect CName validation is enabled. Default value is
                                      false. This should only be set on updates.
                                },
                                "lastGeoFailoverTime": "2020-02-20 00:00:00",  #
                                  Optional. Gets the timestamp of the most recent instance of a
                                  failover to the secondary location. Only the most recent timestamp is
                                  retained. This element is not returned if there has never been a
                                  failover instance. Only available if the accountType is StandardGRS
                                  or StandardRAGRS.
                                "primaryEndpoints": {
                                    "FooPoint": {
                                        "Bar.Point": {
                                            "RecursivePoint": ...
                                        }
                                    },
                                    "blob": "str",  # Optional. Gets the blob
                                      endpoint.
                                    "dummyEndPoint": ...,
                                    "queue": "str",  # Optional. Gets the queue
                                      endpoint.
                                    "table": "str"  # Optional. Gets the table
                                      endpoint.
                                },
                                "primaryLocation": "str",  # Optional. Gets the
                                  location of the primary for the storage account.
                                "provisioningState": "str",  # Optional. Gets the
                                  status of the storage account at the time the operation was called.
                                  Known values are: "Creating", "ResolvingDNS", "Succeeded".
                                "secondaryEndpoints": {
                                    "FooPoint": {
                                        "Bar.Point": {
                                            "RecursivePoint": ...
                                        }
                                    },
                                    "blob": "str",  # Optional. Gets the blob
                                      endpoint.
                                    "dummyEndPoint": ...,
                                    "queue": "str",  # Optional. Gets the queue
                                      endpoint.
                                    "table": "str"  # Optional. Gets the table
                                      endpoint.
                                },
                                "secondaryLocation": "str",  # Optional. Gets the
                                  location of the geo replicated secondary for the storage account.
                                  Only available if the accountType is StandardGRS or StandardRAGRS.
                                "statusOfPrimary": "str",  # Optional. Gets the
                                  status indicating whether the primary location of the storage account
                                  is available or unavailable. Known values are: "Available",
                                  "Unavailable".
                                "statusOfSecondary": "str"  # Optional. Gets the
                                  status indicating whether the secondary location of the storage
                                  account is available or unavailable. Only available if the
                                  accountType is StandardGRS or StandardRAGRS. Known values are:
                                  "Available", "Unavailable".
                            },
                            "tags": {
                                "str": "str"  # Optional. A set of tags. Resource
                                  tags.
                            },
                            "type": "str"  # Optional. Resource type.
                        }
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_storage_accounts_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(request.url)  # type: ignore

            else:

                request = build_storage_accounts_list_by_resource_group_request(
                    resource_group_name=resource_group_name,
                    subscription_id=self._config.subscription_id,
                    headers=_headers,
                    params=_params,
                )
                request.url = self._client.format_url(next_link)  # type: ignore
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def regenerate_key(
        self,
        resource_group_name: str,
        account_name: str,
        regenerate_key: JSONType,
        *,
        content_type: Optional[str] = "application/json",
        **kwargs: Any
    ) -> JSONType:
        """Regenerates the access keys for the specified storage account.

        :param resource_group_name: The name of the resource group within the user’s subscription.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the specified resource group.
         Storage account names must be between 3 and 24 characters in length and use numbers and
         lower-case letters only.
        :type account_name: str
        :param regenerate_key: Specifies name of the key which should be regenerated.
        :type regenerate_key: JSONType
        :keyword content_type: Media type of the body sent to the API. Known values are:
         "application/json" or "text/json". Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                regenerate_key = {
                    "keyName": "str"  # Optional. Known values are: "key1", "key2".
                }

                # response body for status code(s): 200
                response.json() == {
                    "key1": "str",  # Optional. Gets the value of key 1.
                    "key2": "str"  # Optional. Gets the value of key 2.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]

        _json = regenerate_key

        request = build_storage_accounts_regenerate_key_request(
            resource_group_name=resource_group_name,
            account_name=account_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSONType, deserialized), {})

        return cast(JSONType, deserialized)


class UsageOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~storageversiontolerant.StorageManagementClient`'s
        :attr:`usage` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(self, **kwargs: Any) -> JSONType:
        """Gets the current usage count and the limit for the resources under the subscription.

        :return: JSON object
        :rtype: JSONType
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "value": [
                        {
                            "currentValue": 0,  # Optional. Gets the current count of the
                              allocated resources in the subscription.
                            "limit": 0,  # Optional. Gets the maximum count of the
                              resources that can be allocated in the subscription.
                            "name": {
                                "localizedValue": "str",  # Optional. Gets a
                                  localized string describing the resource name.
                                "value": "str"  # Optional. Gets a string describing
                                  the resource name.
                            },
                            "unit": "str"  # Optional. Gets the unit of measurement.
                              Known values are: "Count", "Bytes", "Seconds", "Percent",
                              "CountsPerSecond", "BytesPerSecond".
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        api_version = kwargs.pop("api_version", _params.pop("api-version", "2015-05-01-preview"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[JSONType]

        request = build_usage_list_request(
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSONType, deserialized), {})

        return cast(JSONType, deserialized)
