# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .._vendor import _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar

    T = TypeVar("T")
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
# fmt: off

def build_paths_get_boolean_true_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    bool_path = kwargs.pop('bool_path', True)  # type: bool

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/bool/true/{boolPath}')
    path_format_arguments = {
        "boolPath": _SERIALIZER.url("bool_path", bool_path, 'bool'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_get_boolean_false_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    bool_path = kwargs.pop('bool_path', False)  # type: bool

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/bool/false/{boolPath}')
    path_format_arguments = {
        "boolPath": _SERIALIZER.url("bool_path", bool_path, 'bool'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_get_int_one_million_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    int_path = kwargs.pop('int_path', 1000000)  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/int/1000000/{intPath}')
    path_format_arguments = {
        "intPath": _SERIALIZER.url("int_path", int_path, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_get_int_negative_one_million_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    int_path = kwargs.pop('int_path', -1000000)  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/int/-1000000/{intPath}')
    path_format_arguments = {
        "intPath": _SERIALIZER.url("int_path", int_path, 'int'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_get_ten_billion_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    long_path = kwargs.pop('long_path', 10000000000)  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/long/10000000000/{longPath}')
    path_format_arguments = {
        "longPath": _SERIALIZER.url("long_path", long_path, 'long'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_get_negative_ten_billion_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    long_path = kwargs.pop('long_path', -10000000000)  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/long/-10000000000/{longPath}')
    path_format_arguments = {
        "longPath": _SERIALIZER.url("long_path", long_path, 'long'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_float_scientific_positive_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    float_path = kwargs.pop('float_path', 103400000000000000000)  # type: float

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/float/1.034E+20/{floatPath}')
    path_format_arguments = {
        "floatPath": _SERIALIZER.url("float_path", float_path, 'float'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_float_scientific_negative_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    float_path = kwargs.pop('float_path', -1.034e-20)  # type: float

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/float/-1.034E-20/{floatPath}')
    path_format_arguments = {
        "floatPath": _SERIALIZER.url("float_path", float_path, 'float'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_double_decimal_positive_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    double_path = kwargs.pop('double_path', 9999999.999)  # type: float

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/double/9999999.999/{doublePath}')
    path_format_arguments = {
        "doublePath": _SERIALIZER.url("double_path", double_path, 'float'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_double_decimal_negative_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    double_path = kwargs.pop('double_path', -9999999.999)  # type: float

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/double/-9999999.999/{doublePath}')
    path_format_arguments = {
        "doublePath": _SERIALIZER.url("double_path", double_path, 'float'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_string_unicode_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    string_path = kwargs.pop('string_path', "啊齄丂狛狜隣郎隣兀﨩")  # type: str

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/string/unicode/{stringPath}')
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_string_url_encoded_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    string_path = kwargs.pop('string_path', "begin!*'();:@ &=+$,/?#[]end")  # type: str

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}')
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_string_url_non_encoded_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    string_path = kwargs.pop('string_path', "begin!*'();:@&=+$,end")  # type: str

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/string/begin!*\'();:@&=+$,end/{stringPath}')
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, 'str', skip_quote=True),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_string_empty_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    string_path = kwargs.pop('string_path', "")  # type: str

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/string/empty/{stringPath}')
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_string_null_request(
    string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/string/null/{stringPath}')
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_enum_valid_request(
    enum_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/enum/green%20color/{enumPath}')
    path_format_arguments = {
        "enumPath": _SERIALIZER.url("enum_path", enum_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_enum_null_request(
    enum_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/string/null/{enumPath}')
    path_format_arguments = {
        "enumPath": _SERIALIZER.url("enum_path", enum_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_byte_multi_byte_request(
    byte_path,  # type: bytearray
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/byte/multibyte/{bytePath}')
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, 'bytearray'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_byte_empty_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    byte_path = kwargs.pop('byte_path', bytearray("", encoding="utf-8"))  # type: bytearray

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/byte/empty/{bytePath}')
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, 'bytearray'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_byte_null_request(
    byte_path,  # type: bytearray
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/byte/null/{bytePath}')
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, 'bytearray'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_date_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    date_path = kwargs.pop('date_path', "2012-01-01")  # type: datetime.date

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/date/2012-01-01/{datePath}')
    path_format_arguments = {
        "datePath": _SERIALIZER.url("date_path", date_path, 'date'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_date_null_request(
    date_path,  # type: datetime.date
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/date/null/{datePath}')
    path_format_arguments = {
        "datePath": _SERIALIZER.url("date_path", date_path, 'date'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_date_time_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    date_time_path = kwargs.pop('date_time_path', "2012-01-01T01:01:01Z")  # type: datetime.datetime

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}')
    path_format_arguments = {
        "dateTimePath": _SERIALIZER.url("date_time_path", date_time_path, 'iso-8601'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_date_time_null_request(
    date_time_path,  # type: datetime.datetime
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/datetime/null/{dateTimePath}')
    path_format_arguments = {
        "dateTimePath": _SERIALIZER.url("date_time_path", date_time_path, 'iso-8601'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_base64_url_request(
    base64_url_path,  # type: bytes
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/string/bG9yZW0/{base64UrlPath}')
    path_format_arguments = {
        "base64UrlPath": _SERIALIZER.url("base64_url_path", base64_url_path, 'base64'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_array_csv_in_path_request(
    array_path,  # type: List[str]
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}')
    path_format_arguments = {
        "arrayPath": _SERIALIZER.url("array_path", array_path, '[str]', div=','),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_paths_unix_time_url_request(
    unix_time_url_path,  # type: datetime.datetime
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/paths/int/1460505600/{unixTimeUrlPath}')
    path_format_arguments = {
        "unixTimeUrlPath": _SERIALIZER.url("unix_time_url_path", unix_time_url_path, 'unix-time'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_boolean_true_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    bool_query = kwargs.pop('bool_query', True)  # type: bool

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/bool/true')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['boolQuery'] = _SERIALIZER.query("bool_query", bool_query, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_boolean_false_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    bool_query = kwargs.pop('bool_query', False)  # type: bool

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/bool/false')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['boolQuery'] = _SERIALIZER.query("bool_query", bool_query, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_boolean_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    bool_query = kwargs.pop('bool_query', None)  # type: Optional[bool]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/bool/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if bool_query is not None:
        query_parameters['boolQuery'] = _SERIALIZER.query("bool_query", bool_query, 'bool')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_int_one_million_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    int_query = kwargs.pop('int_query', 1000000)  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/int/1000000')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['intQuery'] = _SERIALIZER.query("int_query", int_query, 'int')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_int_negative_one_million_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    int_query = kwargs.pop('int_query', -1000000)  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/int/-1000000')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['intQuery'] = _SERIALIZER.query("int_query", int_query, 'int')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_int_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    int_query = kwargs.pop('int_query', None)  # type: Optional[int]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/int/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if int_query is not None:
        query_parameters['intQuery'] = _SERIALIZER.query("int_query", int_query, 'int')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_ten_billion_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    long_query = kwargs.pop('long_query', 10000000000)  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/long/10000000000')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['longQuery'] = _SERIALIZER.query("long_query", long_query, 'long')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_negative_ten_billion_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    long_query = kwargs.pop('long_query', -10000000000)  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/long/-10000000000')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['longQuery'] = _SERIALIZER.query("long_query", long_query, 'long')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_get_long_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    long_query = kwargs.pop('long_query', None)  # type: Optional[int]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/long/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if long_query is not None:
        query_parameters['longQuery'] = _SERIALIZER.query("long_query", long_query, 'long')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_float_scientific_positive_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    float_query = kwargs.pop('float_query', 103400000000000000000)  # type: float

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/float/1.034E+20')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['floatQuery'] = _SERIALIZER.query("float_query", float_query, 'float')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_float_scientific_negative_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    float_query = kwargs.pop('float_query', -1.034e-20)  # type: float

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/float/-1.034E-20')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['floatQuery'] = _SERIALIZER.query("float_query", float_query, 'float')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_float_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    float_query = kwargs.pop('float_query', None)  # type: Optional[float]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/float/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if float_query is not None:
        query_parameters['floatQuery'] = _SERIALIZER.query("float_query", float_query, 'float')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_double_decimal_positive_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    double_query = kwargs.pop('double_query', 9999999.999)  # type: float

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/double/9999999.999')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['doubleQuery'] = _SERIALIZER.query("double_query", double_query, 'float')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_double_decimal_negative_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    double_query = kwargs.pop('double_query', -9999999.999)  # type: float

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/double/-9999999.999')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['doubleQuery'] = _SERIALIZER.query("double_query", double_query, 'float')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_double_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    double_query = kwargs.pop('double_query', None)  # type: Optional[float]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/double/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if double_query is not None:
        query_parameters['doubleQuery'] = _SERIALIZER.query("double_query", double_query, 'float')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_string_unicode_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    string_query = kwargs.pop('string_query', "啊齄丂狛狜隣郎隣兀﨩")  # type: str

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/string/unicode/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['stringQuery'] = _SERIALIZER.query("string_query", string_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_string_url_encoded_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    string_query = kwargs.pop('string_query', "begin!*'();:@ &=+$,/?#[]end")  # type: str

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['stringQuery'] = _SERIALIZER.query("string_query", string_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_string_empty_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    string_query = kwargs.pop('string_query', "")  # type: str

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/string/empty')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['stringQuery'] = _SERIALIZER.query("string_query", string_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_string_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    string_query = kwargs.pop('string_query', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/string/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if string_query is not None:
        query_parameters['stringQuery'] = _SERIALIZER.query("string_query", string_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_enum_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    enum_query = kwargs.pop('enum_query', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/enum/green%20color')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if enum_query is not None:
        query_parameters['enumQuery'] = _SERIALIZER.query("enum_query", enum_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_enum_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    enum_query = kwargs.pop('enum_query', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/enum/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if enum_query is not None:
        query_parameters['enumQuery'] = _SERIALIZER.query("enum_query", enum_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_byte_multi_byte_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    byte_query = kwargs.pop('byte_query', None)  # type: Optional[bytearray]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/byte/multibyte')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if byte_query is not None:
        query_parameters['byteQuery'] = _SERIALIZER.query("byte_query", byte_query, 'bytearray')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_byte_empty_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    byte_query = kwargs.pop('byte_query', bytearray("", encoding="utf-8"))  # type: bytearray

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/byte/empty')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['byteQuery'] = _SERIALIZER.query("byte_query", byte_query, 'bytearray')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_byte_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    byte_query = kwargs.pop('byte_query', None)  # type: Optional[bytearray]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/byte/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if byte_query is not None:
        query_parameters['byteQuery'] = _SERIALIZER.query("byte_query", byte_query, 'bytearray')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_date_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    date_query = kwargs.pop('date_query', "2012-01-01")  # type: datetime.date

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/date/2012-01-01')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['dateQuery'] = _SERIALIZER.query("date_query", date_query, 'date')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_date_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    date_query = kwargs.pop('date_query', None)  # type: Optional[datetime.date]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/date/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if date_query is not None:
        query_parameters['dateQuery'] = _SERIALIZER.query("date_query", date_query, 'date')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_date_time_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    date_time_query = kwargs.pop('date_time_query', "2012-01-01T01:01:01Z")  # type: datetime.datetime

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/datetime/2012-01-01T01%3A01%3A01Z')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['dateTimeQuery'] = _SERIALIZER.query("date_time_query", date_time_query, 'iso-8601')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_date_time_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    date_time_query = kwargs.pop('date_time_query', None)  # type: Optional[datetime.datetime]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/datetime/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if date_time_query is not None:
        query_parameters['dateTimeQuery'] = _SERIALIZER.query("date_time_query", date_time_query, 'iso-8601')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_array_string_csv_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    array_query = kwargs.pop('array_query', None)  # type: Optional[List[str]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/array/csv/string/valid')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters['arrayQuery'] = _SERIALIZER.query("array_query", array_query, '[str]', div=',')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_array_string_csv_null_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    array_query = kwargs.pop('array_query', None)  # type: Optional[List[str]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/array/csv/string/null')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters['arrayQuery'] = _SERIALIZER.query("array_query", array_query, '[str]', div=',')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_array_string_csv_empty_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    array_query = kwargs.pop('array_query', None)  # type: Optional[List[str]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/array/csv/string/empty')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters['arrayQuery'] = _SERIALIZER.query("array_query", array_query, '[str]', div=',')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_array_string_no_collection_format_empty_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    array_query = kwargs.pop('array_query', None)  # type: Optional[List[str]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/array/none/string/empty')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters['arrayQuery'] = _SERIALIZER.query("array_query", array_query, '[str]', div=',')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_array_string_ssv_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    array_query = kwargs.pop('array_query', None)  # type: Optional[List[str]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/array/ssv/string/valid')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters['arrayQuery'] = _SERIALIZER.query("array_query", array_query, '[str]', div=' ')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_array_string_tsv_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    array_query = kwargs.pop('array_query', None)  # type: Optional[List[str]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/array/tsv/string/valid')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters['arrayQuery'] = _SERIALIZER.query("array_query", array_query, '[str]', div='	')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_queries_array_string_pipes_valid_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    array_query = kwargs.pop('array_query', None)  # type: Optional[List[str]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/queries/array/pipes/string/valid')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters['arrayQuery'] = _SERIALIZER.query("array_query", array_query, '[str]', div='|')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_path_items_get_all_with_values_request(
    path_item_string_path,  # type: str
    global_string_path,  # type: str
    local_string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    path_item_string_query = kwargs.pop('path_item_string_query', None)  # type: Optional[str]
    global_string_query = kwargs.pop('global_string_query', None)  # type: Optional[str]
    local_string_query = kwargs.pop('local_string_query', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery')
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, 'str'),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, 'str'),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters['pathItemStringQuery'] = _SERIALIZER.query("path_item_string_query", path_item_string_query, 'str')
    if global_string_query is not None:
        query_parameters['globalStringQuery'] = _SERIALIZER.query("global_string_query", global_string_query, 'str')
    if local_string_query is not None:
        query_parameters['localStringQuery'] = _SERIALIZER.query("local_string_query", local_string_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_path_items_get_global_query_null_request(
    path_item_string_path,  # type: str
    global_string_path,  # type: str
    local_string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    path_item_string_query = kwargs.pop('path_item_string_query', None)  # type: Optional[str]
    global_string_query = kwargs.pop('global_string_query', None)  # type: Optional[str]
    local_string_query = kwargs.pop('local_string_query', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery')
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, 'str'),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, 'str'),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters['pathItemStringQuery'] = _SERIALIZER.query("path_item_string_query", path_item_string_query, 'str')
    if global_string_query is not None:
        query_parameters['globalStringQuery'] = _SERIALIZER.query("global_string_query", global_string_query, 'str')
    if local_string_query is not None:
        query_parameters['localStringQuery'] = _SERIALIZER.query("local_string_query", local_string_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_path_items_get_global_and_local_query_null_request(
    path_item_string_path,  # type: str
    global_string_path,  # type: str
    local_string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    path_item_string_query = kwargs.pop('path_item_string_query', None)  # type: Optional[str]
    global_string_query = kwargs.pop('global_string_query', None)  # type: Optional[str]
    local_string_query = kwargs.pop('local_string_query', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null')
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, 'str'),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, 'str'),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters['pathItemStringQuery'] = _SERIALIZER.query("path_item_string_query", path_item_string_query, 'str')
    if global_string_query is not None:
        query_parameters['globalStringQuery'] = _SERIALIZER.query("global_string_query", global_string_query, 'str')
    if local_string_query is not None:
        query_parameters['localStringQuery'] = _SERIALIZER.query("local_string_query", local_string_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_path_items_get_local_path_item_query_null_request(
    path_item_string_path,  # type: str
    global_string_path,  # type: str
    local_string_path,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    path_item_string_query = kwargs.pop('path_item_string_query', None)  # type: Optional[str]
    global_string_query = kwargs.pop('global_string_query', None)  # type: Optional[str]
    local_string_query = kwargs.pop('local_string_query', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null')
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, 'str'),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, 'str'),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters['pathItemStringQuery'] = _SERIALIZER.query("path_item_string_query", path_item_string_query, 'str')
    if global_string_query is not None:
        query_parameters['globalStringQuery'] = _SERIALIZER.query("global_string_query", global_string_query, 'str')
    if local_string_query is not None:
        query_parameters['localStringQuery'] = _SERIALIZER.query("local_string_query", local_string_query, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class PathsOperations(object):
    """PathsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_boolean_true(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get true Boolean value on path.

        :keyword bool_path: true boolean value. The default value is True. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype bool_path: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_path = kwargs.pop("bool_path", True)  # type: bool

        request = build_paths_get_boolean_true_request(
            bool_path=bool_path,
            template_url=self.get_boolean_true.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_boolean_true.metadata = {"url": "/paths/bool/true/{boolPath}"}  # type: ignore

    @distributed_trace
    def get_boolean_false(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get false Boolean value on path.

        :keyword bool_path: false boolean value. The default value is False. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype bool_path: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_path = kwargs.pop("bool_path", False)  # type: bool

        request = build_paths_get_boolean_false_request(
            bool_path=bool_path,
            template_url=self.get_boolean_false.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_boolean_false.metadata = {"url": "/paths/bool/false/{boolPath}"}  # type: ignore

    @distributed_trace
    def get_int_one_million(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '1000000' integer value.

        :keyword int_path: '1000000' integer value. The default value is 1000000. Note that overriding
         this default value may result in unsupported behavior.
        :paramtype int_path: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_path = kwargs.pop("int_path", 1000000)  # type: int

        request = build_paths_get_int_one_million_request(
            int_path=int_path,
            template_url=self.get_int_one_million.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_int_one_million.metadata = {"url": "/paths/int/1000000/{intPath}"}  # type: ignore

    @distributed_trace
    def get_int_negative_one_million(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '-1000000' integer value.

        :keyword int_path: '-1000000' integer value. The default value is -1000000. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype int_path: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_path = kwargs.pop("int_path", -1000000)  # type: int

        request = build_paths_get_int_negative_one_million_request(
            int_path=int_path,
            template_url=self.get_int_negative_one_million.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_int_negative_one_million.metadata = {"url": "/paths/int/-1000000/{intPath}"}  # type: ignore

    @distributed_trace
    def get_ten_billion(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '10000000000' 64 bit integer value.

        :keyword long_path: '10000000000' 64 bit integer value. The default value is 10000000000. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype long_path: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_path = kwargs.pop("long_path", 10000000000)  # type: int

        request = build_paths_get_ten_billion_request(
            long_path=long_path,
            template_url=self.get_ten_billion.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_ten_billion.metadata = {"url": "/paths/long/10000000000/{longPath}"}  # type: ignore

    @distributed_trace
    def get_negative_ten_billion(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '-10000000000' 64 bit integer value.

        :keyword long_path: '-10000000000' 64 bit integer value. The default value is -10000000000.
         Note that overriding this default value may result in unsupported behavior.
        :paramtype long_path: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_path = kwargs.pop("long_path", -10000000000)  # type: int

        request = build_paths_get_negative_ten_billion_request(
            long_path=long_path,
            template_url=self.get_negative_ten_billion.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_negative_ten_billion.metadata = {"url": "/paths/long/-10000000000/{longPath}"}  # type: ignore

    @distributed_trace
    def float_scientific_positive(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '1.034E+20' numeric value.

        :keyword float_path: '1.034E+20'numeric value. The default value is 103400000000000000000. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype float_path: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_path = kwargs.pop("float_path", 103400000000000000000)  # type: float

        request = build_paths_float_scientific_positive_request(
            float_path=float_path,
            template_url=self.float_scientific_positive.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    float_scientific_positive.metadata = {"url": "/paths/float/1.034E+20/{floatPath}"}  # type: ignore

    @distributed_trace
    def float_scientific_negative(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '-1.034E-20' numeric value.

        :keyword float_path: '-1.034E-20'numeric value. The default value is -1.034e-20. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype float_path: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_path = kwargs.pop("float_path", -1.034e-20)  # type: float

        request = build_paths_float_scientific_negative_request(
            float_path=float_path,
            template_url=self.float_scientific_negative.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    float_scientific_negative.metadata = {"url": "/paths/float/-1.034E-20/{floatPath}"}  # type: ignore

    @distributed_trace
    def double_decimal_positive(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '9999999.999' numeric value.

        :keyword double_path: '9999999.999'numeric value. The default value is 9999999.999. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype double_path: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_path = kwargs.pop("double_path", 9999999.999)  # type: float

        request = build_paths_double_decimal_positive_request(
            double_path=double_path,
            template_url=self.double_decimal_positive.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    double_decimal_positive.metadata = {"url": "/paths/double/9999999.999/{doublePath}"}  # type: ignore

    @distributed_trace
    def double_decimal_negative(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '-9999999.999' numeric value.

        :keyword double_path: '-9999999.999'numeric value. The default value is -9999999.999. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype double_path: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_path = kwargs.pop("double_path", -9999999.999)  # type: float

        request = build_paths_double_decimal_negative_request(
            double_path=double_path,
            template_url=self.double_decimal_negative.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    double_decimal_negative.metadata = {"url": "/paths/double/-9999999.999/{doublePath}"}  # type: ignore

    @distributed_trace
    def string_unicode(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.

        :keyword string_path: '啊齄丂狛狜隣郎隣兀﨩'multi-byte string value. The default value is "啊齄丂狛狜隣郎隣兀﨩".
         Note that overriding this default value may result in unsupported behavior.
        :paramtype string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_path = kwargs.pop("string_path", "啊齄丂狛狜隣郎隣兀﨩")  # type: str

        request = build_paths_string_unicode_request(
            string_path=string_path,
            template_url=self.string_unicode.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_unicode.metadata = {"url": "/paths/string/unicode/{stringPath}"}  # type: ignore

    @distributed_trace
    def string_url_encoded(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get 'begin!*'();:@ &=+$,/?#[]end.

        :keyword string_path: 'begin!*'();:@ &=+$,/?#[]end' url encoded string value. The default value
         is "begin!*'();:@ &=+$,/?#[]end". Note that overriding this default value may result in
         unsupported behavior.
        :paramtype string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_path = kwargs.pop("string_path", "begin!*'();:@ &=+$,/?#[]end")  # type: str

        request = build_paths_string_url_encoded_request(
            string_path=string_path,
            template_url=self.string_url_encoded.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_url_encoded.metadata = {"url": "/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}"}  # type: ignore

    @distributed_trace
    def string_url_non_encoded(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get 'begin!*'();:@&=+$,end.

        https://tools.ietf.org/html/rfc3986#appendix-A 'path' accept any 'pchar' not encoded.

        :keyword string_path: 'begin!*'();:@&=+$,end' url encoded string value. The default value is
         "begin!*'();:@&=+$,end". Note that overriding this default value may result in unsupported
         behavior.
        :paramtype string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_path = kwargs.pop("string_path", "begin!*'();:@&=+$,end")  # type: str

        request = build_paths_string_url_non_encoded_request(
            string_path=string_path,
            template_url=self.string_url_non_encoded.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_url_non_encoded.metadata = {"url": "/paths/string/begin!*'();:@&=+$,end/{stringPath}"}  # type: ignore

    @distributed_trace
    def string_empty(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get ''.

        :keyword string_path: '' string value. The default value is "". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_path = kwargs.pop("string_path", "")  # type: str

        request = build_paths_string_empty_request(
            string_path=string_path,
            template_url=self.string_empty.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_empty.metadata = {"url": "/paths/string/empty/{stringPath}"}  # type: ignore

    @distributed_trace
    def string_null(
        self,
        string_path,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null (should throw).

        :param string_path: null string value.
        :type string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_string_null_request(
            string_path=string_path,
            template_url=self.string_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_null.metadata = {"url": "/paths/string/null/{stringPath}"}  # type: ignore

    @distributed_trace
    def enum_valid(
        self,
        enum_path,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get using uri with 'green color' in path parameter.

        :param enum_path: send the value green. Possible values are: "red color", "green color", and
         "blue color".
        :type enum_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_enum_valid_request(
            enum_path=enum_path,
            template_url=self.enum_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    enum_valid.metadata = {"url": "/paths/enum/green%20color/{enumPath}"}  # type: ignore

    @distributed_trace
    def enum_null(
        self,
        enum_path,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null (should throw on the client before the request is sent on wire).

        :param enum_path: send null should throw. Possible values are: "red color", "green color", and
         "blue color".
        :type enum_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_enum_null_request(
            enum_path=enum_path,
            template_url=self.enum_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    enum_null.metadata = {"url": "/paths/string/null/{enumPath}"}  # type: ignore

    @distributed_trace
    def byte_multi_byte(
        self,
        byte_path,  # type: bytearray
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.

        :param byte_path: '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
        :type byte_path: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_byte_multi_byte_request(
            byte_path=byte_path,
            template_url=self.byte_multi_byte.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    byte_multi_byte.metadata = {"url": "/paths/byte/multibyte/{bytePath}"}  # type: ignore

    @distributed_trace
    def byte_empty(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '' as byte array.

        :keyword byte_path: '' as byte array. The default value is bytearray("", encoding="utf-8").
         Note that overriding this default value may result in unsupported behavior.
        :paramtype byte_path: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        byte_path = kwargs.pop("byte_path", bytearray("", encoding="utf-8"))  # type: bytearray

        request = build_paths_byte_empty_request(
            byte_path=byte_path,
            template_url=self.byte_empty.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    byte_empty.metadata = {"url": "/paths/byte/empty/{bytePath}"}  # type: ignore

    @distributed_trace
    def byte_null(
        self,
        byte_path,  # type: bytearray
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null as byte array (should throw).

        :param byte_path: null as byte array (should throw).
        :type byte_path: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_byte_null_request(
            byte_path=byte_path,
            template_url=self.byte_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    byte_null.metadata = {"url": "/paths/byte/null/{bytePath}"}  # type: ignore

    @distributed_trace
    def date_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '2012-01-01' as date.

        :keyword date_path: '2012-01-01' as date. The default value is "2012-01-01". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype date_path: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_path = kwargs.pop("date_path", "2012-01-01")  # type: datetime.date

        request = build_paths_date_valid_request(
            date_path=date_path,
            template_url=self.date_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    date_valid.metadata = {"url": "/paths/date/2012-01-01/{datePath}"}  # type: ignore

    @distributed_trace
    def date_null(
        self,
        date_path,  # type: datetime.date
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null as date - this should throw or be unusable on the client side, depending on date
        representation.

        :param date_path: null as date (should throw).
        :type date_path: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_date_null_request(
            date_path=date_path,
            template_url=self.date_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    date_null.metadata = {"url": "/paths/date/null/{datePath}"}  # type: ignore

    @distributed_trace
    def date_time_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '2012-01-01T01:01:01Z' as date-time.

        :keyword date_time_path: '2012-01-01T01:01:01Z' as date-time. The default value is
         "2012-01-01T01:01:01Z". Note that overriding this default value may result in unsupported
         behavior.
        :paramtype date_time_path: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_time_path = kwargs.pop("date_time_path", "2012-01-01T01:01:01Z")  # type: datetime.datetime

        request = build_paths_date_time_valid_request(
            date_time_path=date_time_path,
            template_url=self.date_time_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    date_time_valid.metadata = {"url": "/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}"}  # type: ignore

    @distributed_trace
    def date_time_null(
        self,
        date_time_path,  # type: datetime.datetime
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null as date-time, should be disallowed or throw depending on representation of date-time.

        :param date_time_path: null as date-time.
        :type date_time_path: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_date_time_null_request(
            date_time_path=date_time_path,
            template_url=self.date_time_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    date_time_null.metadata = {"url": "/paths/datetime/null/{dateTimePath}"}  # type: ignore

    @distributed_trace
    def base64_url(
        self,
        base64_url_path,  # type: bytes
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get 'lorem' encoded value as 'bG9yZW0' (base64url).

        :param base64_url_path: base64url encoded value.
        :type base64_url_path: bytes
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_base64_url_request(
            base64_url_path=base64_url_path,
            template_url=self.base64_url.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    base64_url.metadata = {"url": "/paths/string/bG9yZW0/{base64UrlPath}"}  # type: ignore

    @distributed_trace
    def array_csv_in_path(
        self,
        array_path,  # type: List[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        csv-array format.

        :param array_path: an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, '']
         using the csv-array format.
        :type array_path: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_array_csv_in_path_request(
            array_path=array_path,
            template_url=self.array_csv_in_path.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    array_csv_in_path.metadata = {"url": "/paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}"}  # type: ignore

    @distributed_trace
    def unix_time_url(
        self,
        unix_time_url_path,  # type: datetime.datetime
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get the date 2016-04-13 encoded value as '1460505600' (Unix time).

        :param unix_time_url_path: Unix time encoded value.
        :type unix_time_url_path: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_unix_time_url_request(
            unix_time_url_path=unix_time_url_path,
            template_url=self.unix_time_url.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    unix_time_url.metadata = {"url": "/paths/int/1460505600/{unixTimeUrlPath}"}  # type: ignore


class QueriesOperations(object):
    """QueriesOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_boolean_true(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get true Boolean value on path.

        :keyword bool_query: true boolean value. The default value is True. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype bool_query: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_query = kwargs.pop("bool_query", True)  # type: bool

        request = build_queries_get_boolean_true_request(
            bool_query=bool_query,
            template_url=self.get_boolean_true.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_boolean_true.metadata = {"url": "/queries/bool/true"}  # type: ignore

    @distributed_trace
    def get_boolean_false(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get false Boolean value on path.

        :keyword bool_query: false boolean value. The default value is False. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype bool_query: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_query = kwargs.pop("bool_query", False)  # type: bool

        request = build_queries_get_boolean_false_request(
            bool_query=bool_query,
            template_url=self.get_boolean_false.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_boolean_false.metadata = {"url": "/queries/bool/false"}  # type: ignore

    @distributed_trace
    def get_boolean_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null Boolean value on query (query string should be absent).

        :keyword bool_query: null boolean value.
        :paramtype bool_query: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_query = kwargs.pop("bool_query", None)  # type: Optional[bool]

        request = build_queries_get_boolean_null_request(
            bool_query=bool_query,
            template_url=self.get_boolean_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_boolean_null.metadata = {"url": "/queries/bool/null"}  # type: ignore

    @distributed_trace
    def get_int_one_million(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '1000000' integer value.

        :keyword int_query: '1000000' integer value. The default value is 1000000. Note that overriding
         this default value may result in unsupported behavior.
        :paramtype int_query: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_query = kwargs.pop("int_query", 1000000)  # type: int

        request = build_queries_get_int_one_million_request(
            int_query=int_query,
            template_url=self.get_int_one_million.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_int_one_million.metadata = {"url": "/queries/int/1000000"}  # type: ignore

    @distributed_trace
    def get_int_negative_one_million(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '-1000000' integer value.

        :keyword int_query: '-1000000' integer value. The default value is -1000000. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype int_query: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_query = kwargs.pop("int_query", -1000000)  # type: int

        request = build_queries_get_int_negative_one_million_request(
            int_query=int_query,
            template_url=self.get_int_negative_one_million.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_int_negative_one_million.metadata = {"url": "/queries/int/-1000000"}  # type: ignore

    @distributed_trace
    def get_int_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null integer value (no query parameter).

        :keyword int_query: null integer value.
        :paramtype int_query: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_query = kwargs.pop("int_query", None)  # type: Optional[int]

        request = build_queries_get_int_null_request(
            int_query=int_query,
            template_url=self.get_int_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_int_null.metadata = {"url": "/queries/int/null"}  # type: ignore

    @distributed_trace
    def get_ten_billion(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '10000000000' 64 bit integer value.

        :keyword long_query: '10000000000' 64 bit integer value. The default value is 10000000000. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype long_query: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_query = kwargs.pop("long_query", 10000000000)  # type: int

        request = build_queries_get_ten_billion_request(
            long_query=long_query,
            template_url=self.get_ten_billion.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_ten_billion.metadata = {"url": "/queries/long/10000000000"}  # type: ignore

    @distributed_trace
    def get_negative_ten_billion(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '-10000000000' 64 bit integer value.

        :keyword long_query: '-10000000000' 64 bit integer value. The default value is -10000000000.
         Note that overriding this default value may result in unsupported behavior.
        :paramtype long_query: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_query = kwargs.pop("long_query", -10000000000)  # type: int

        request = build_queries_get_negative_ten_billion_request(
            long_query=long_query,
            template_url=self.get_negative_ten_billion.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_negative_ten_billion.metadata = {"url": "/queries/long/-10000000000"}  # type: ignore

    @distributed_trace
    def get_long_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get 'null 64 bit integer value (no query param in uri).

        :keyword long_query: null 64 bit integer value.
        :paramtype long_query: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_query = kwargs.pop("long_query", None)  # type: Optional[int]

        request = build_queries_get_long_null_request(
            long_query=long_query,
            template_url=self.get_long_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_long_null.metadata = {"url": "/queries/long/null"}  # type: ignore

    @distributed_trace
    def float_scientific_positive(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '1.034E+20' numeric value.

        :keyword float_query: '1.034E+20'numeric value. The default value is 103400000000000000000.
         Note that overriding this default value may result in unsupported behavior.
        :paramtype float_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_query = kwargs.pop("float_query", 103400000000000000000)  # type: float

        request = build_queries_float_scientific_positive_request(
            float_query=float_query,
            template_url=self.float_scientific_positive.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    float_scientific_positive.metadata = {"url": "/queries/float/1.034E+20"}  # type: ignore

    @distributed_trace
    def float_scientific_negative(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '-1.034E-20' numeric value.

        :keyword float_query: '-1.034E-20'numeric value. The default value is -1.034e-20. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype float_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_query = kwargs.pop("float_query", -1.034e-20)  # type: float

        request = build_queries_float_scientific_negative_request(
            float_query=float_query,
            template_url=self.float_scientific_negative.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    float_scientific_negative.metadata = {"url": "/queries/float/-1.034E-20"}  # type: ignore

    @distributed_trace
    def float_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null numeric value (no query parameter).

        :keyword float_query: null numeric value.
        :paramtype float_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_query = kwargs.pop("float_query", None)  # type: Optional[float]

        request = build_queries_float_null_request(
            float_query=float_query,
            template_url=self.float_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    float_null.metadata = {"url": "/queries/float/null"}  # type: ignore

    @distributed_trace
    def double_decimal_positive(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '9999999.999' numeric value.

        :keyword double_query: '9999999.999'numeric value. The default value is 9999999.999. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype double_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_query = kwargs.pop("double_query", 9999999.999)  # type: float

        request = build_queries_double_decimal_positive_request(
            double_query=double_query,
            template_url=self.double_decimal_positive.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    double_decimal_positive.metadata = {"url": "/queries/double/9999999.999"}  # type: ignore

    @distributed_trace
    def double_decimal_negative(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '-9999999.999' numeric value.

        :keyword double_query: '-9999999.999'numeric value. The default value is -9999999.999. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype double_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_query = kwargs.pop("double_query", -9999999.999)  # type: float

        request = build_queries_double_decimal_negative_request(
            double_query=double_query,
            template_url=self.double_decimal_negative.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    double_decimal_negative.metadata = {"url": "/queries/double/-9999999.999"}  # type: ignore

    @distributed_trace
    def double_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null numeric value (no query parameter).

        :keyword double_query: null numeric value.
        :paramtype double_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_query = kwargs.pop("double_query", None)  # type: Optional[float]

        request = build_queries_double_null_request(
            double_query=double_query,
            template_url=self.double_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    double_null.metadata = {"url": "/queries/double/null"}  # type: ignore

    @distributed_trace
    def string_unicode(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.

        :keyword string_query: '啊齄丂狛狜隣郎隣兀﨩'multi-byte string value. The default value is "啊齄丂狛狜隣郎隣兀﨩".
         Note that overriding this default value may result in unsupported behavior.
        :paramtype string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_query = kwargs.pop("string_query", "啊齄丂狛狜隣郎隣兀﨩")  # type: str

        request = build_queries_string_unicode_request(
            string_query=string_query,
            template_url=self.string_unicode.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_unicode.metadata = {"url": "/queries/string/unicode/"}  # type: ignore

    @distributed_trace
    def string_url_encoded(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get 'begin!*'();:@ &=+$,/?#[]end.

        :keyword string_query: 'begin!*'();:@ &=+$,/?#[]end' url encoded string value. The default
         value is "begin!*'();:@ &=+$,/?#[]end". Note that overriding this default value may result in
         unsupported behavior.
        :paramtype string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_query = kwargs.pop("string_query", "begin!*'();:@ &=+$,/?#[]end")  # type: str

        request = build_queries_string_url_encoded_request(
            string_query=string_query,
            template_url=self.string_url_encoded.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_url_encoded.metadata = {"url": "/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend"}  # type: ignore

    @distributed_trace
    def string_empty(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get ''.

        :keyword string_query: '' string value. The default value is "". Note that overriding this
         default value may result in unsupported behavior.
        :paramtype string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_query = kwargs.pop("string_query", "")  # type: str

        request = build_queries_string_empty_request(
            string_query=string_query,
            template_url=self.string_empty.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_empty.metadata = {"url": "/queries/string/empty"}  # type: ignore

    @distributed_trace
    def string_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null (no query parameter in url).

        :keyword string_query: null string value.
        :paramtype string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_query = kwargs.pop("string_query", None)  # type: Optional[str]

        request = build_queries_string_null_request(
            string_query=string_query,
            template_url=self.string_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    string_null.metadata = {"url": "/queries/string/null"}  # type: ignore

    @distributed_trace
    def enum_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get using uri with query parameter 'green color'.

        :keyword enum_query: 'green color' enum value. Possible values are: "red color", "green color",
         and "blue color".
        :paramtype enum_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        enum_query = kwargs.pop("enum_query", None)  # type: Optional[str]

        request = build_queries_enum_valid_request(
            enum_query=enum_query,
            template_url=self.enum_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    enum_valid.metadata = {"url": "/queries/enum/green%20color"}  # type: ignore

    @distributed_trace
    def enum_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null (no query parameter in url).

        :keyword enum_query: null string value. Possible values are: "red color", "green color", and
         "blue color".
        :paramtype enum_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        enum_query = kwargs.pop("enum_query", None)  # type: Optional[str]

        request = build_queries_enum_null_request(
            enum_query=enum_query,
            template_url=self.enum_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    enum_null.metadata = {"url": "/queries/enum/null"}  # type: ignore

    @distributed_trace
    def byte_multi_byte(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.

        :keyword byte_query: '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
        :paramtype byte_query: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        byte_query = kwargs.pop("byte_query", None)  # type: Optional[bytearray]

        request = build_queries_byte_multi_byte_request(
            byte_query=byte_query,
            template_url=self.byte_multi_byte.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    byte_multi_byte.metadata = {"url": "/queries/byte/multibyte"}  # type: ignore

    @distributed_trace
    def byte_empty(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '' as byte array.

        :keyword byte_query: '' as byte array. The default value is bytearray("", encoding="utf-8").
         Note that overriding this default value may result in unsupported behavior.
        :paramtype byte_query: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        byte_query = kwargs.pop("byte_query", bytearray("", encoding="utf-8"))  # type: bytearray

        request = build_queries_byte_empty_request(
            byte_query=byte_query,
            template_url=self.byte_empty.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    byte_empty.metadata = {"url": "/queries/byte/empty"}  # type: ignore

    @distributed_trace
    def byte_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null as byte array (no query parameters in uri).

        :keyword byte_query: null as byte array (no query parameters in uri).
        :paramtype byte_query: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        byte_query = kwargs.pop("byte_query", None)  # type: Optional[bytearray]

        request = build_queries_byte_null_request(
            byte_query=byte_query,
            template_url=self.byte_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    byte_null.metadata = {"url": "/queries/byte/null"}  # type: ignore

    @distributed_trace
    def date_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '2012-01-01' as date.

        :keyword date_query: '2012-01-01' as date. The default value is "2012-01-01". Note that
         overriding this default value may result in unsupported behavior.
        :paramtype date_query: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_query = kwargs.pop("date_query", "2012-01-01")  # type: datetime.date

        request = build_queries_date_valid_request(
            date_query=date_query,
            template_url=self.date_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    date_valid.metadata = {"url": "/queries/date/2012-01-01"}  # type: ignore

    @distributed_trace
    def date_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null as date - this should result in no query parameters in uri.

        :keyword date_query: null as date (no query parameters in uri).
        :paramtype date_query: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_query = kwargs.pop("date_query", None)  # type: Optional[datetime.date]

        request = build_queries_date_null_request(
            date_query=date_query,
            template_url=self.date_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    date_null.metadata = {"url": "/queries/date/null"}  # type: ignore

    @distributed_trace
    def date_time_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get '2012-01-01T01:01:01Z' as date-time.

        :keyword date_time_query: '2012-01-01T01:01:01Z' as date-time. The default value is
         "2012-01-01T01:01:01Z". Note that overriding this default value may result in unsupported
         behavior.
        :paramtype date_time_query: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_time_query = kwargs.pop("date_time_query", "2012-01-01T01:01:01Z")  # type: datetime.datetime

        request = build_queries_date_time_valid_request(
            date_time_query=date_time_query,
            template_url=self.date_time_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    date_time_valid.metadata = {"url": "/queries/datetime/2012-01-01T01%3A01%3A01Z"}  # type: ignore

    @distributed_trace
    def date_time_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get null as date-time, should result in no query parameters in uri.

        :keyword date_time_query: null as date-time (no query parameters).
        :paramtype date_time_query: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_time_query = kwargs.pop("date_time_query", None)  # type: Optional[datetime.datetime]

        request = build_queries_date_time_null_request(
            date_time_query=date_time_query,
            template_url=self.date_time_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    date_time_null.metadata = {"url": "/queries/datetime/null"}  # type: ignore

    @distributed_trace
    def array_string_csv_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        csv-array format.

        :keyword array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
         ''] using the csv-array format.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]

        request = build_queries_array_string_csv_valid_request(
            array_query=array_query,
            template_url=self.array_string_csv_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    array_string_csv_valid.metadata = {"url": "/queries/array/csv/string/valid"}  # type: ignore

    @distributed_trace
    def array_string_csv_null(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a null array of string using the csv-array format.

        :keyword array_query: a null array of string using the csv-array format.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]

        request = build_queries_array_string_csv_null_request(
            array_query=array_query,
            template_url=self.array_string_csv_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    array_string_csv_null.metadata = {"url": "/queries/array/csv/string/null"}  # type: ignore

    @distributed_trace
    def array_string_csv_empty(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get an empty array [] of string using the csv-array format.

        :keyword array_query: an empty array [] of string using the csv-array format.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]

        request = build_queries_array_string_csv_empty_request(
            array_query=array_query,
            template_url=self.array_string_csv_empty.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    array_string_csv_empty.metadata = {"url": "/queries/array/csv/string/empty"}  # type: ignore

    @distributed_trace
    def array_string_no_collection_format_empty(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Array query has no defined collection format, should default to csv. Pass in ['hello', 'nihao',
        'bonjour'] for the 'arrayQuery' parameter to the service.

        :keyword array_query: Array-typed query parameter. Pass in ['hello', 'nihao', 'bonjour'].
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]

        request = build_queries_array_string_no_collection_format_empty_request(
            array_query=array_query,
            template_url=self.array_string_no_collection_format_empty.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    array_string_no_collection_format_empty.metadata = {"url": "/queries/array/none/string/empty"}  # type: ignore

    @distributed_trace
    def array_string_ssv_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        ssv-array format.

        :keyword array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
         ''] using the ssv-array format.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]

        request = build_queries_array_string_ssv_valid_request(
            array_query=array_query,
            template_url=self.array_string_ssv_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    array_string_ssv_valid.metadata = {"url": "/queries/array/ssv/string/valid"}  # type: ignore

    @distributed_trace
    def array_string_tsv_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        tsv-array format.

        :keyword array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
         ''] using the tsv-array format.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]

        request = build_queries_array_string_tsv_valid_request(
            array_query=array_query,
            template_url=self.array_string_tsv_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    array_string_tsv_valid.metadata = {"url": "/queries/array/tsv/string/valid"}  # type: ignore

    @distributed_trace
    def array_string_pipes_valid(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        pipes-array format.

        :keyword array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
         ''] using the pipes-array format.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        array_query = kwargs.pop("array_query", None)  # type: Optional[List[str]]

        request = build_queries_array_string_pipes_valid_request(
            array_query=array_query,
            template_url=self.array_string_pipes_valid.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    array_string_pipes_valid.metadata = {"url": "/queries/array/pipes/string/valid"}  # type: ignore


class PathItemsOperations(object):
    """PathItemsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_all_with_values(
        self,
        path_item_string_path,  # type: str
        local_string_path,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery='globalStringQuery',
        pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'.

        :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
        :type path_item_string_path: str
        :param local_string_path: should contain value 'localStringPath'.
        :type local_string_path: str
        :keyword path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
         parameter.
        :paramtype path_item_string_query: str
        :keyword local_string_query: should contain value 'localStringQuery'.
        :paramtype local_string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        path_item_string_query = kwargs.pop("path_item_string_query", None)  # type: Optional[str]
        local_string_query = kwargs.pop("local_string_query", None)  # type: Optional[str]

        request = build_path_items_get_all_with_values_request(
            path_item_string_path=path_item_string_path,
            global_string_path=self._config.global_string_path,
            local_string_path=local_string_path,
            path_item_string_query=path_item_string_query,
            global_string_query=self._config.global_string_query,
            local_string_query=local_string_query,
            template_url=self.get_all_with_values.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_all_with_values.metadata = {"url": "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery"}  # type: ignore

    @distributed_trace
    def get_global_query_null(
        self,
        path_item_string_path,  # type: str
        local_string_path,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery=null,
        pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'.

        :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
        :type path_item_string_path: str
        :param local_string_path: should contain value 'localStringPath'.
        :type local_string_path: str
        :keyword path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
         parameter.
        :paramtype path_item_string_query: str
        :keyword local_string_query: should contain value 'localStringQuery'.
        :paramtype local_string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        path_item_string_query = kwargs.pop("path_item_string_query", None)  # type: Optional[str]
        local_string_query = kwargs.pop("local_string_query", None)  # type: Optional[str]

        request = build_path_items_get_global_query_null_request(
            path_item_string_path=path_item_string_path,
            global_string_path=self._config.global_string_path,
            local_string_path=local_string_path,
            path_item_string_query=path_item_string_query,
            global_string_query=self._config.global_string_query,
            local_string_query=local_string_query,
            template_url=self.get_global_query_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_global_query_null.metadata = {"url": "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery"}  # type: ignore

    @distributed_trace
    def get_global_and_local_query_null(
        self,
        path_item_string_path,  # type: str
        local_string_path,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery=null,
        pathItemStringQuery='pathItemStringQuery', localStringQuery=null.

        :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
        :type path_item_string_path: str
        :param local_string_path: should contain value 'localStringPath'.
        :type local_string_path: str
        :keyword path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
         parameter.
        :paramtype path_item_string_query: str
        :keyword local_string_query: should contain null value.
        :paramtype local_string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        path_item_string_query = kwargs.pop("path_item_string_query", None)  # type: Optional[str]
        local_string_query = kwargs.pop("local_string_query", None)  # type: Optional[str]

        request = build_path_items_get_global_and_local_query_null_request(
            path_item_string_path=path_item_string_path,
            global_string_path=self._config.global_string_path,
            local_string_path=local_string_path,
            path_item_string_query=path_item_string_query,
            global_string_query=self._config.global_string_query,
            local_string_query=local_string_query,
            template_url=self.get_global_and_local_query_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_global_and_local_query_null.metadata = {"url": "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null"}  # type: ignore

    @distributed_trace
    def get_local_path_item_query_null(
        self,
        path_item_string_path,  # type: str
        local_string_path,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery='globalStringQuery',
        pathItemStringQuery=null, localStringQuery=null.

        :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
        :type path_item_string_path: str
        :param local_string_path: should contain value 'localStringPath'.
        :type local_string_path: str
        :keyword path_item_string_query: should contain value null.
        :paramtype path_item_string_query: str
        :keyword local_string_query: should contain value null.
        :paramtype local_string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        path_item_string_query = kwargs.pop("path_item_string_query", None)  # type: Optional[str]
        local_string_query = kwargs.pop("local_string_query", None)  # type: Optional[str]

        request = build_path_items_get_local_path_item_query_null_request(
            path_item_string_path=path_item_string_path,
            global_string_path=self._config.global_string_path,
            local_string_path=local_string_path,
            path_item_string_query=path_item_string_query,
            global_string_query=self._config.global_string_query,
            local_string_query=local_string_query,
            template_url=self.get_local_path_item_query_null.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_local_path_item_query_null.metadata = {"url": "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null"}  # type: ignore
