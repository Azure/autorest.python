# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, List, Optional, TypeVar

from msrest import Serializer

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace

from .._vendor import _format_url_section

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()


def build_paths_get_boolean_true_request(**kwargs: Any) -> HttpRequest:
    bool_path = kwargs.pop("bool_path", True)  # type: bool

    accept = "application/json"
    # Construct URL
    _url = "/paths/bool/true/{boolPath}"
    path_format_arguments = {
        "boolPath": _SERIALIZER.url("bool_path", bool_path, "bool"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_get_boolean_false_request(**kwargs: Any) -> HttpRequest:
    bool_path = kwargs.pop("bool_path", False)  # type: bool

    accept = "application/json"
    # Construct URL
    _url = "/paths/bool/false/{boolPath}"
    path_format_arguments = {
        "boolPath": _SERIALIZER.url("bool_path", bool_path, "bool"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_get_int_one_million_request(**kwargs: Any) -> HttpRequest:
    int_path = kwargs.pop("int_path", 1000000)  # type: int

    accept = "application/json"
    # Construct URL
    _url = "/paths/int/1000000/{intPath}"
    path_format_arguments = {
        "intPath": _SERIALIZER.url("int_path", int_path, "int"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_get_int_negative_one_million_request(**kwargs: Any) -> HttpRequest:
    int_path = kwargs.pop("int_path", -1000000)  # type: int

    accept = "application/json"
    # Construct URL
    _url = "/paths/int/-1000000/{intPath}"
    path_format_arguments = {
        "intPath": _SERIALIZER.url("int_path", int_path, "int"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_get_ten_billion_request(**kwargs: Any) -> HttpRequest:
    long_path = kwargs.pop("long_path", 10000000000)  # type: int

    accept = "application/json"
    # Construct URL
    _url = "/paths/long/10000000000/{longPath}"
    path_format_arguments = {
        "longPath": _SERIALIZER.url("long_path", long_path, "long"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_get_negative_ten_billion_request(**kwargs: Any) -> HttpRequest:
    long_path = kwargs.pop("long_path", -10000000000)  # type: int

    accept = "application/json"
    # Construct URL
    _url = "/paths/long/-10000000000/{longPath}"
    path_format_arguments = {
        "longPath": _SERIALIZER.url("long_path", long_path, "long"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_float_scientific_positive_request(**kwargs: Any) -> HttpRequest:
    float_path = kwargs.pop("float_path", 103400000000000000000)  # type: float

    accept = "application/json"
    # Construct URL
    _url = "/paths/float/1.034E+20/{floatPath}"
    path_format_arguments = {
        "floatPath": _SERIALIZER.url("float_path", float_path, "float"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_float_scientific_negative_request(**kwargs: Any) -> HttpRequest:
    float_path = kwargs.pop("float_path", -1.034e-20)  # type: float

    accept = "application/json"
    # Construct URL
    _url = "/paths/float/-1.034E-20/{floatPath}"
    path_format_arguments = {
        "floatPath": _SERIALIZER.url("float_path", float_path, "float"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_double_decimal_positive_request(**kwargs: Any) -> HttpRequest:
    double_path = kwargs.pop("double_path", 9999999.999)  # type: float

    accept = "application/json"
    # Construct URL
    _url = "/paths/double/9999999.999/{doublePath}"
    path_format_arguments = {
        "doublePath": _SERIALIZER.url("double_path", double_path, "float"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_double_decimal_negative_request(**kwargs: Any) -> HttpRequest:
    double_path = kwargs.pop("double_path", -9999999.999)  # type: float

    accept = "application/json"
    # Construct URL
    _url = "/paths/double/-9999999.999/{doublePath}"
    path_format_arguments = {
        "doublePath": _SERIALIZER.url("double_path", double_path, "float"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_string_unicode_request(**kwargs: Any) -> HttpRequest:
    string_path = kwargs.pop("string_path", "啊齄丂狛狜隣郎隣兀﨩")  # type: str

    accept = "application/json"
    # Construct URL
    _url = "/paths/string/unicode/{stringPath}"
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_string_url_encoded_request(**kwargs: Any) -> HttpRequest:
    string_path = kwargs.pop("string_path", "begin!*'();:@ &=+$,/?#[]end")  # type: str

    accept = "application/json"
    # Construct URL
    _url = "/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}"
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_string_url_non_encoded_request(**kwargs: Any) -> HttpRequest:
    string_path = kwargs.pop("string_path", "begin!*'();:@&=+$,end")  # type: str

    accept = "application/json"
    # Construct URL
    _url = "/paths/string/begin!*'();:@&=+$,end/{stringPath}"
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str", skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_string_empty_request(**kwargs: Any) -> HttpRequest:
    string_path = kwargs.pop("string_path", "")  # type: str

    accept = "application/json"
    # Construct URL
    _url = "/paths/string/empty/{stringPath}"
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_string_null_request(string_path: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/string/null/{stringPath}"
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_enum_valid_request(enum_path: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/enum/green%20color/{enumPath}"
    path_format_arguments = {
        "enumPath": _SERIALIZER.url("enum_path", enum_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_enum_null_request(enum_path: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/string/null/{enumPath}"
    path_format_arguments = {
        "enumPath": _SERIALIZER.url("enum_path", enum_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_byte_multi_byte_request(byte_path: bytearray, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/byte/multibyte/{bytePath}"
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_byte_empty_request(**kwargs: Any) -> HttpRequest:
    byte_path = kwargs.pop("byte_path", bytearray("", encoding="utf-8"))  # type: bytearray

    accept = "application/json"
    # Construct URL
    _url = "/paths/byte/empty/{bytePath}"
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_byte_null_request(byte_path: bytearray, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/byte/null/{bytePath}"
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_date_valid_request(**kwargs: Any) -> HttpRequest:
    date_path = kwargs.pop("date_path", "2012-01-01")  # type: datetime.date

    accept = "application/json"
    # Construct URL
    _url = "/paths/date/2012-01-01/{datePath}"
    path_format_arguments = {
        "datePath": _SERIALIZER.url("date_path", date_path, "date"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_date_null_request(date_path: datetime.date, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/date/null/{datePath}"
    path_format_arguments = {
        "datePath": _SERIALIZER.url("date_path", date_path, "date"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_date_time_valid_request(**kwargs: Any) -> HttpRequest:
    date_time_path = kwargs.pop("date_time_path", "2012-01-01T01:01:01Z")  # type: datetime.datetime

    accept = "application/json"
    # Construct URL
    _url = "/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}"
    path_format_arguments = {
        "dateTimePath": _SERIALIZER.url("date_time_path", date_time_path, "iso-8601"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_date_time_null_request(date_time_path: datetime.datetime, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/datetime/null/{dateTimePath}"
    path_format_arguments = {
        "dateTimePath": _SERIALIZER.url("date_time_path", date_time_path, "iso-8601"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_base64_url_request(base64_url_path: bytes, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/string/bG9yZW0/{base64UrlPath}"
    path_format_arguments = {
        "base64UrlPath": _SERIALIZER.url("base64_url_path", base64_url_path, "base64"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_array_csv_in_path_request(array_path: List[str], **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = (
        "/paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}"
    )
    path_format_arguments = {
        "arrayPath": _SERIALIZER.url("array_path", array_path, "[str]", div=","),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_paths_unix_time_url_request(unix_time_url_path: datetime.datetime, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/paths/int/1460505600/{unixTimeUrlPath}"
    path_format_arguments = {
        "unixTimeUrlPath": _SERIALIZER.url("unix_time_url_path", unix_time_url_path, "unix-time"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_header_parameters, **kwargs)


def build_queries_get_boolean_true_request(**kwargs: Any) -> HttpRequest:
    bool_query = kwargs.pop("bool_query", True)  # type: bool

    accept = "application/json"
    # Construct URL
    _url = "/queries/bool/true"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_get_boolean_false_request(**kwargs: Any) -> HttpRequest:
    bool_query = kwargs.pop("bool_query", False)  # type: bool

    accept = "application/json"
    # Construct URL
    _url = "/queries/bool/false"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_get_boolean_null_request(*, bool_query: Optional[bool] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/bool/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if bool_query is not None:
        _query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_get_int_one_million_request(**kwargs: Any) -> HttpRequest:
    int_query = kwargs.pop("int_query", 1000000)  # type: int

    accept = "application/json"
    # Construct URL
    _url = "/queries/int/1000000"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_get_int_negative_one_million_request(**kwargs: Any) -> HttpRequest:
    int_query = kwargs.pop("int_query", -1000000)  # type: int

    accept = "application/json"
    # Construct URL
    _url = "/queries/int/-1000000"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_get_int_null_request(*, int_query: Optional[int] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/int/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if int_query is not None:
        _query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_get_ten_billion_request(**kwargs: Any) -> HttpRequest:
    long_query = kwargs.pop("long_query", 10000000000)  # type: int

    accept = "application/json"
    # Construct URL
    _url = "/queries/long/10000000000"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_get_negative_ten_billion_request(**kwargs: Any) -> HttpRequest:
    long_query = kwargs.pop("long_query", -10000000000)  # type: int

    accept = "application/json"
    # Construct URL
    _url = "/queries/long/-10000000000"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_get_long_null_request(*, long_query: Optional[int] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/long/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if long_query is not None:
        _query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_float_scientific_positive_request(**kwargs: Any) -> HttpRequest:
    float_query = kwargs.pop("float_query", 103400000000000000000)  # type: float

    accept = "application/json"
    # Construct URL
    _url = "/queries/float/1.034E+20"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_float_scientific_negative_request(**kwargs: Any) -> HttpRequest:
    float_query = kwargs.pop("float_query", -1.034e-20)  # type: float

    accept = "application/json"
    # Construct URL
    _url = "/queries/float/-1.034E-20"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_float_null_request(*, float_query: Optional[float] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/float/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if float_query is not None:
        _query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_double_decimal_positive_request(**kwargs: Any) -> HttpRequest:
    double_query = kwargs.pop("double_query", 9999999.999)  # type: float

    accept = "application/json"
    # Construct URL
    _url = "/queries/double/9999999.999"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_double_decimal_negative_request(**kwargs: Any) -> HttpRequest:
    double_query = kwargs.pop("double_query", -9999999.999)  # type: float

    accept = "application/json"
    # Construct URL
    _url = "/queries/double/-9999999.999"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_double_null_request(*, double_query: Optional[float] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/double/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if double_query is not None:
        _query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_string_unicode_request(**kwargs: Any) -> HttpRequest:
    string_query = kwargs.pop("string_query", "啊齄丂狛狜隣郎隣兀﨩")  # type: str

    accept = "application/json"
    # Construct URL
    _url = "/queries/string/unicode/"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_string_url_encoded_request(**kwargs: Any) -> HttpRequest:
    string_query = kwargs.pop("string_query", "begin!*'();:@ &=+$,/?#[]end")  # type: str

    accept = "application/json"
    # Construct URL
    _url = "/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_string_empty_request(**kwargs: Any) -> HttpRequest:
    string_query = kwargs.pop("string_query", "")  # type: str

    accept = "application/json"
    # Construct URL
    _url = "/queries/string/empty"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_string_null_request(*, string_query: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/string/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if string_query is not None:
        _query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_enum_valid_request(*, enum_query: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/enum/green%20color"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if enum_query is not None:
        _query_parameters["enumQuery"] = _SERIALIZER.query("enum_query", enum_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_enum_null_request(*, enum_query: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/enum/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if enum_query is not None:
        _query_parameters["enumQuery"] = _SERIALIZER.query("enum_query", enum_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_byte_multi_byte_request(*, byte_query: Optional[bytearray] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/byte/multibyte"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if byte_query is not None:
        _query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_byte_empty_request(**kwargs: Any) -> HttpRequest:
    byte_query = kwargs.pop("byte_query", bytearray("", encoding="utf-8"))  # type: bytearray

    accept = "application/json"
    # Construct URL
    _url = "/queries/byte/empty"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_byte_null_request(*, byte_query: Optional[bytearray] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/byte/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if byte_query is not None:
        _query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_date_valid_request(**kwargs: Any) -> HttpRequest:
    date_query = kwargs.pop("date_query", "2012-01-01")  # type: datetime.date

    accept = "application/json"
    # Construct URL
    _url = "/queries/date/2012-01-01"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["dateQuery"] = _SERIALIZER.query("date_query", date_query, "date")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_date_null_request(*, date_query: Optional[datetime.date] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/date/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if date_query is not None:
        _query_parameters["dateQuery"] = _SERIALIZER.query("date_query", date_query, "date")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_date_time_valid_request(**kwargs: Any) -> HttpRequest:
    date_time_query = kwargs.pop("date_time_query", "2012-01-01T01:01:01Z")  # type: datetime.datetime

    accept = "application/json"
    # Construct URL
    _url = "/queries/datetime/2012-01-01T01%3A01%3A01Z"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters["dateTimeQuery"] = _SERIALIZER.query("date_time_query", date_time_query, "iso-8601")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_date_time_null_request(
    *, date_time_query: Optional[datetime.datetime] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/datetime/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if date_time_query is not None:
        _query_parameters["dateTimeQuery"] = _SERIALIZER.query("date_time_query", date_time_query, "iso-8601")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_array_string_csv_valid_request(
    *, array_query: Optional[List[str]] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/array/csv/string/valid"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        _query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_array_string_csv_null_request(
    *, array_query: Optional[List[str]] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/array/csv/string/null"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        _query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_array_string_csv_empty_request(
    *, array_query: Optional[List[str]] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/array/csv/string/empty"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        _query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_array_string_no_collection_format_empty_request(
    *, array_query: Optional[List[str]] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/array/none/string/empty"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        _query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_array_string_ssv_valid_request(
    *, array_query: Optional[List[str]] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/array/ssv/string/valid"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        _query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=" ")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_array_string_tsv_valid_request(
    *, array_query: Optional[List[str]] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/array/tsv/string/valid"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        _query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div="	")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_queries_array_string_pipes_valid_request(
    *, array_query: Optional[List[str]] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/queries/array/pipes/string/valid"

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if array_query is not None:
        _query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div="|")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_path_items_get_all_with_values_request(
    path_item_string_path: str,
    global_string_path: str,
    local_string_path: str,
    *,
    path_item_string_query: Optional[str] = None,
    global_string_query: Optional[str] = None,
    local_string_query: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery"  # pylint: disable=line-too-long
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if path_item_string_query is not None:
        _query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        _query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        _query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_path_items_get_global_query_null_request(
    path_item_string_path: str,
    global_string_path: str,
    local_string_path: str,
    *,
    path_item_string_query: Optional[str] = None,
    global_string_query: Optional[str] = None,
    local_string_query: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery"  # pylint: disable=line-too-long
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if path_item_string_query is not None:
        _query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        _query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        _query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_path_items_get_global_and_local_query_null_request(
    path_item_string_path: str,
    global_string_path: str,
    local_string_path: str,
    *,
    path_item_string_query: Optional[str] = None,
    global_string_query: Optional[str] = None,
    local_string_query: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null"  # pylint: disable=line-too-long
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if path_item_string_query is not None:
        _query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        _query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        _query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


def build_path_items_get_local_path_item_query_null_request(
    path_item_string_path: str,
    global_string_path: str,
    local_string_path: str,
    *,
    path_item_string_query: Optional[str] = None,
    global_string_query: Optional[str] = None,
    local_string_query: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    _url = "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null"  # pylint: disable=line-too-long
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if path_item_string_query is not None:
        _query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        _query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        _query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_query_parameters, headers=_header_parameters, **kwargs)


class PathsOperations(object):  # pylint: disable=too-many-public-methods
    """PathsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_boolean_true(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get true Boolean value on path.

        :keyword bool_path: true boolean value. Default value is True. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype bool_path: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_path = kwargs.pop("bool_path", True)  # type: bool

        request = build_paths_get_boolean_true_request(
            bool_path=bool_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_boolean_false(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get false Boolean value on path.

        :keyword bool_path: false boolean value. Default value is False. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype bool_path: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_path = kwargs.pop("bool_path", False)  # type: bool

        request = build_paths_get_boolean_false_request(
            bool_path=bool_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_int_one_million(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '1000000' integer value.

        :keyword int_path: '1000000' integer value. Default value is 1000000. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype int_path: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_path = kwargs.pop("int_path", 1000000)  # type: int

        request = build_paths_get_int_one_million_request(
            int_path=int_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_int_negative_one_million(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '-1000000' integer value.

        :keyword int_path: '-1000000' integer value. Default value is -1000000. Note that overriding
         this default value may result in unsupported behavior.
        :paramtype int_path: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_path = kwargs.pop("int_path", -1000000)  # type: int

        request = build_paths_get_int_negative_one_million_request(
            int_path=int_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_ten_billion(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '10000000000' 64 bit integer value.

        :keyword long_path: '10000000000' 64 bit integer value. Default value is 10000000000. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype long_path: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_path = kwargs.pop("long_path", 10000000000)  # type: int

        request = build_paths_get_ten_billion_request(
            long_path=long_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_negative_ten_billion(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '-10000000000' 64 bit integer value.

        :keyword long_path: '-10000000000' 64 bit integer value. Default value is -10000000000. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype long_path: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_path = kwargs.pop("long_path", -10000000000)  # type: int

        request = build_paths_get_negative_ten_billion_request(
            long_path=long_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def float_scientific_positive(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '1.034E+20' numeric value.

        :keyword float_path: '1.034E+20'numeric value. Default value is 103400000000000000000. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype float_path: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_path = kwargs.pop("float_path", 103400000000000000000)  # type: float

        request = build_paths_float_scientific_positive_request(
            float_path=float_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def float_scientific_negative(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '-1.034E-20' numeric value.

        :keyword float_path: '-1.034E-20'numeric value. Default value is -1.034e-20. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype float_path: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_path = kwargs.pop("float_path", -1.034e-20)  # type: float

        request = build_paths_float_scientific_negative_request(
            float_path=float_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def double_decimal_positive(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '9999999.999' numeric value.

        :keyword double_path: '9999999.999'numeric value. Default value is 9999999.999. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype double_path: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_path = kwargs.pop("double_path", 9999999.999)  # type: float

        request = build_paths_double_decimal_positive_request(
            double_path=double_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def double_decimal_negative(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '-9999999.999' numeric value.

        :keyword double_path: '-9999999.999'numeric value. Default value is -9999999.999. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype double_path: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_path = kwargs.pop("double_path", -9999999.999)  # type: float

        request = build_paths_double_decimal_negative_request(
            double_path=double_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_unicode(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.

        :keyword string_path: '啊齄丂狛狜隣郎隣兀﨩'multi-byte string value. Default value is "啊齄丂狛狜隣郎隣兀﨩". Note
         that overriding this default value may result in unsupported behavior.
        :paramtype string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_path = kwargs.pop("string_path", "啊齄丂狛狜隣郎隣兀﨩")  # type: str

        request = build_paths_string_unicode_request(
            string_path=string_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_url_encoded(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get 'begin!*'();:@ &=+$,/?#[]end.

        :keyword string_path: 'begin!*'();:@ &=+$,/?#[]end' url encoded string value. Default value is
         "begin!*'();:@ &=+$,/?#[]end". Note that overriding this default value may result in
         unsupported behavior.
        :paramtype string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_path = kwargs.pop("string_path", "begin!*'();:@ &=+$,/?#[]end")  # type: str

        request = build_paths_string_url_encoded_request(
            string_path=string_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_url_non_encoded(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get 'begin!*'();:@&=+$,end.

        https://tools.ietf.org/html/rfc3986#appendix-A 'path' accept any 'pchar' not encoded.

        :keyword string_path: 'begin!*'();:@&=+$,end' url encoded string value. Default value is
         "begin!*'();:@&=+$,end". Note that overriding this default value may result in unsupported
         behavior.
        :paramtype string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_path = kwargs.pop("string_path", "begin!*'();:@&=+$,end")  # type: str

        request = build_paths_string_url_non_encoded_request(
            string_path=string_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_empty(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get ''.

        :keyword string_path: '' string value. Default value is "". Note that overriding this default
         value may result in unsupported behavior.
        :paramtype string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_path = kwargs.pop("string_path", "")  # type: str

        request = build_paths_string_empty_request(
            string_path=string_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_null(self, string_path: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get null (should throw).

        :param string_path: null string value.
        :type string_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_string_null_request(
            string_path=string_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def enum_valid(self, enum_path: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get using uri with 'green color' in path parameter.

        :param enum_path: send the value green. Possible values are: "red color", "green color", and
         "blue color".
        :type enum_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_enum_valid_request(
            enum_path=enum_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def enum_null(self, enum_path: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get null (should throw on the client before the request is sent on wire).

        :param enum_path: send null should throw. Possible values are: "red color", "green color", and
         "blue color".
        :type enum_path: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_enum_null_request(
            enum_path=enum_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def byte_multi_byte(  # pylint: disable=inconsistent-return-statements
        self, byte_path: bytearray, **kwargs: Any
    ) -> None:
        """Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.

        :param byte_path: '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
        :type byte_path: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_byte_multi_byte_request(
            byte_path=byte_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def byte_empty(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '' as byte array.

        :keyword byte_path: '' as byte array. Default value is bytearray("", encoding="utf-8"). Note
         that overriding this default value may result in unsupported behavior.
        :paramtype byte_path: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        byte_path = kwargs.pop("byte_path", bytearray("", encoding="utf-8"))  # type: bytearray

        request = build_paths_byte_empty_request(
            byte_path=byte_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def byte_null(self, byte_path: bytearray, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get null as byte array (should throw).

        :param byte_path: null as byte array (should throw).
        :type byte_path: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_byte_null_request(
            byte_path=byte_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def date_valid(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '2012-01-01' as date.

        :keyword date_path: '2012-01-01' as date. Default value is "2012-01-01". Note that overriding
         this default value may result in unsupported behavior.
        :paramtype date_path: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_path = kwargs.pop("date_path", "2012-01-01")  # type: datetime.date

        request = build_paths_date_valid_request(
            date_path=date_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def date_null(  # pylint: disable=inconsistent-return-statements
        self, date_path: datetime.date, **kwargs: Any
    ) -> None:
        """Get null as date - this should throw or be unusable on the client side, depending on date
        representation.

        :param date_path: null as date (should throw).
        :type date_path: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_date_null_request(
            date_path=date_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def date_time_valid(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '2012-01-01T01:01:01Z' as date-time.

        :keyword date_time_path: '2012-01-01T01:01:01Z' as date-time. Default value is
         "2012-01-01T01:01:01Z". Note that overriding this default value may result in unsupported
         behavior.
        :paramtype date_time_path: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_time_path = kwargs.pop("date_time_path", "2012-01-01T01:01:01Z")  # type: datetime.datetime

        request = build_paths_date_time_valid_request(
            date_time_path=date_time_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def date_time_null(  # pylint: disable=inconsistent-return-statements
        self, date_time_path: datetime.datetime, **kwargs: Any
    ) -> None:
        """Get null as date-time, should be disallowed or throw depending on representation of date-time.

        :param date_time_path: null as date-time.
        :type date_time_path: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_date_time_null_request(
            date_time_path=date_time_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [400]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def base64_url(  # pylint: disable=inconsistent-return-statements
        self, base64_url_path: bytes, **kwargs: Any
    ) -> None:
        """Get 'lorem' encoded value as 'bG9yZW0' (base64url).

        :param base64_url_path: base64url encoded value.
        :type base64_url_path: bytes
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_base64_url_request(
            base64_url_path=base64_url_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def array_csv_in_path(  # pylint: disable=inconsistent-return-statements
        self, array_path: List[str], **kwargs: Any
    ) -> None:
        """Get an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        csv-array format.

        :param array_path: an array of string ['ArrayPath1', 'begin!*'();:@ &=+$,/?#[]end' , null, '']
         using the csv-array format.
        :type array_path: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_array_csv_in_path_request(
            array_path=array_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def unix_time_url(  # pylint: disable=inconsistent-return-statements
        self, unix_time_url_path: datetime.datetime, **kwargs: Any
    ) -> None:
        """Get the date 2016-04-13 encoded value as '1460505600' (Unix time).

        :param unix_time_url_path: Unix time encoded value.
        :type unix_time_url_path: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_paths_unix_time_url_request(
            unix_time_url_path=unix_time_url_path,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})


class QueriesOperations(object):  # pylint: disable=too-many-public-methods
    """QueriesOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_boolean_true(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get true Boolean value on path.

        :keyword bool_query: true boolean value. Default value is True. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype bool_query: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_query = kwargs.pop("bool_query", True)  # type: bool

        request = build_queries_get_boolean_true_request(
            bool_query=bool_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_boolean_false(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get false Boolean value on path.

        :keyword bool_query: false boolean value. Default value is False. Note that overriding this
         default value may result in unsupported behavior.
        :paramtype bool_query: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        bool_query = kwargs.pop("bool_query", False)  # type: bool

        request = build_queries_get_boolean_false_request(
            bool_query=bool_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_boolean_null(  # pylint: disable=inconsistent-return-statements
        self, *, bool_query: Optional[bool] = None, **kwargs: Any
    ) -> None:
        """Get null Boolean value on query (query string should be absent).

        :keyword bool_query: null boolean value. Default value is None.
        :paramtype bool_query: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_get_boolean_null_request(
            bool_query=bool_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_int_one_million(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '1000000' integer value.

        :keyword int_query: '1000000' integer value. Default value is 1000000. Note that overriding
         this default value may result in unsupported behavior.
        :paramtype int_query: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_query = kwargs.pop("int_query", 1000000)  # type: int

        request = build_queries_get_int_one_million_request(
            int_query=int_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_int_negative_one_million(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '-1000000' integer value.

        :keyword int_query: '-1000000' integer value. Default value is -1000000. Note that overriding
         this default value may result in unsupported behavior.
        :paramtype int_query: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        int_query = kwargs.pop("int_query", -1000000)  # type: int

        request = build_queries_get_int_negative_one_million_request(
            int_query=int_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_int_null(  # pylint: disable=inconsistent-return-statements
        self, *, int_query: Optional[int] = None, **kwargs: Any
    ) -> None:
        """Get null integer value (no query parameter).

        :keyword int_query: null integer value. Default value is None.
        :paramtype int_query: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_get_int_null_request(
            int_query=int_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_ten_billion(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '10000000000' 64 bit integer value.

        :keyword long_query: '10000000000' 64 bit integer value. Default value is 10000000000. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype long_query: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_query = kwargs.pop("long_query", 10000000000)  # type: int

        request = build_queries_get_ten_billion_request(
            long_query=long_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_negative_ten_billion(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '-10000000000' 64 bit integer value.

        :keyword long_query: '-10000000000' 64 bit integer value. Default value is -10000000000. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype long_query: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        long_query = kwargs.pop("long_query", -10000000000)  # type: int

        request = build_queries_get_negative_ten_billion_request(
            long_query=long_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_long_null(  # pylint: disable=inconsistent-return-statements
        self, *, long_query: Optional[int] = None, **kwargs: Any
    ) -> None:
        """Get 'null 64 bit integer value (no query param in uri).

        :keyword long_query: null 64 bit integer value. Default value is None.
        :paramtype long_query: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_get_long_null_request(
            long_query=long_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def float_scientific_positive(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '1.034E+20' numeric value.

        :keyword float_query: '1.034E+20'numeric value. Default value is 103400000000000000000. Note
         that overriding this default value may result in unsupported behavior.
        :paramtype float_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_query = kwargs.pop("float_query", 103400000000000000000)  # type: float

        request = build_queries_float_scientific_positive_request(
            float_query=float_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def float_scientific_negative(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '-1.034E-20' numeric value.

        :keyword float_query: '-1.034E-20'numeric value. Default value is -1.034e-20. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype float_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        float_query = kwargs.pop("float_query", -1.034e-20)  # type: float

        request = build_queries_float_scientific_negative_request(
            float_query=float_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def float_null(  # pylint: disable=inconsistent-return-statements
        self, *, float_query: Optional[float] = None, **kwargs: Any
    ) -> None:
        """Get null numeric value (no query parameter).

        :keyword float_query: null numeric value. Default value is None.
        :paramtype float_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_float_null_request(
            float_query=float_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def double_decimal_positive(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '9999999.999' numeric value.

        :keyword double_query: '9999999.999'numeric value. Default value is 9999999.999. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype double_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_query = kwargs.pop("double_query", 9999999.999)  # type: float

        request = build_queries_double_decimal_positive_request(
            double_query=double_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def double_decimal_negative(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '-9999999.999' numeric value.

        :keyword double_query: '-9999999.999'numeric value. Default value is -9999999.999. Note that
         overriding this default value may result in unsupported behavior.
        :paramtype double_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        double_query = kwargs.pop("double_query", -9999999.999)  # type: float

        request = build_queries_double_decimal_negative_request(
            double_query=double_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def double_null(  # pylint: disable=inconsistent-return-statements
        self, *, double_query: Optional[float] = None, **kwargs: Any
    ) -> None:
        """Get null numeric value (no query parameter).

        :keyword double_query: null numeric value. Default value is None.
        :paramtype double_query: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_double_null_request(
            double_query=double_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_unicode(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.

        :keyword string_query: '啊齄丂狛狜隣郎隣兀﨩'multi-byte string value. Default value is "啊齄丂狛狜隣郎隣兀﨩". Note
         that overriding this default value may result in unsupported behavior.
        :paramtype string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_query = kwargs.pop("string_query", "啊齄丂狛狜隣郎隣兀﨩")  # type: str

        request = build_queries_string_unicode_request(
            string_query=string_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_url_encoded(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get 'begin!*'();:@ &=+$,/?#[]end.

        :keyword string_query: 'begin!*'();:@ &=+$,/?#[]end' url encoded string value. Default value is
         "begin!*'();:@ &=+$,/?#[]end". Note that overriding this default value may result in
         unsupported behavior.
        :paramtype string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_query = kwargs.pop("string_query", "begin!*'();:@ &=+$,/?#[]end")  # type: str

        request = build_queries_string_url_encoded_request(
            string_query=string_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_empty(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get ''.

        :keyword string_query: '' string value. Default value is "". Note that overriding this default
         value may result in unsupported behavior.
        :paramtype string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        string_query = kwargs.pop("string_query", "")  # type: str

        request = build_queries_string_empty_request(
            string_query=string_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def string_null(  # pylint: disable=inconsistent-return-statements
        self, *, string_query: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Get null (no query parameter in url).

        :keyword string_query: null string value. Default value is None.
        :paramtype string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_string_null_request(
            string_query=string_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def enum_valid(  # pylint: disable=inconsistent-return-statements
        self, *, enum_query: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Get using uri with query parameter 'green color'.

        :keyword enum_query: 'green color' enum value. Possible values are: "red color", "green color",
         and "blue color". Default value is None.
        :paramtype enum_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_enum_valid_request(
            enum_query=enum_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def enum_null(  # pylint: disable=inconsistent-return-statements
        self, *, enum_query: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Get null (no query parameter in url).

        :keyword enum_query: null string value. Possible values are: "red color", "green color", and
         "blue color". Default value is None.
        :paramtype enum_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_enum_null_request(
            enum_query=enum_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def byte_multi_byte(  # pylint: disable=inconsistent-return-statements
        self, *, byte_query: Optional[bytearray] = None, **kwargs: Any
    ) -> None:
        """Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.

        :keyword byte_query: '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array. Default value is
         None.
        :paramtype byte_query: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_byte_multi_byte_request(
            byte_query=byte_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def byte_empty(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '' as byte array.

        :keyword byte_query: '' as byte array. Default value is bytearray("", encoding="utf-8"). Note
         that overriding this default value may result in unsupported behavior.
        :paramtype byte_query: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        byte_query = kwargs.pop("byte_query", bytearray("", encoding="utf-8"))  # type: bytearray

        request = build_queries_byte_empty_request(
            byte_query=byte_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def byte_null(  # pylint: disable=inconsistent-return-statements
        self, *, byte_query: Optional[bytearray] = None, **kwargs: Any
    ) -> None:
        """Get null as byte array (no query parameters in uri).

        :keyword byte_query: null as byte array (no query parameters in uri). Default value is None.
        :paramtype byte_query: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_byte_null_request(
            byte_query=byte_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def date_valid(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '2012-01-01' as date.

        :keyword date_query: '2012-01-01' as date. Default value is "2012-01-01". Note that overriding
         this default value may result in unsupported behavior.
        :paramtype date_query: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_query = kwargs.pop("date_query", "2012-01-01")  # type: datetime.date

        request = build_queries_date_valid_request(
            date_query=date_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def date_null(  # pylint: disable=inconsistent-return-statements
        self, *, date_query: Optional[datetime.date] = None, **kwargs: Any
    ) -> None:
        """Get null as date - this should result in no query parameters in uri.

        :keyword date_query: null as date (no query parameters in uri). Default value is None.
        :paramtype date_query: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_date_null_request(
            date_query=date_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def date_time_valid(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get '2012-01-01T01:01:01Z' as date-time.

        :keyword date_time_query: '2012-01-01T01:01:01Z' as date-time. Default value is
         "2012-01-01T01:01:01Z". Note that overriding this default value may result in unsupported
         behavior.
        :paramtype date_time_query: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        date_time_query = kwargs.pop("date_time_query", "2012-01-01T01:01:01Z")  # type: datetime.datetime

        request = build_queries_date_time_valid_request(
            date_time_query=date_time_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def date_time_null(  # pylint: disable=inconsistent-return-statements
        self, *, date_time_query: Optional[datetime.datetime] = None, **kwargs: Any
    ) -> None:
        """Get null as date-time, should result in no query parameters in uri.

        :keyword date_time_query: null as date-time (no query parameters). Default value is None.
        :paramtype date_time_query: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_date_time_null_request(
            date_time_query=date_time_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def array_string_csv_valid(  # pylint: disable=inconsistent-return-statements
        self, *, array_query: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        csv-array format.

        :keyword array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
         ''] using the csv-array format. Default value is None.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_array_string_csv_valid_request(
            array_query=array_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def array_string_csv_null(  # pylint: disable=inconsistent-return-statements
        self, *, array_query: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """Get a null array of string using the csv-array format.

        :keyword array_query: a null array of string using the csv-array format. Default value is None.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_array_string_csv_null_request(
            array_query=array_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def array_string_csv_empty(  # pylint: disable=inconsistent-return-statements
        self, *, array_query: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """Get an empty array [] of string using the csv-array format.

        :keyword array_query: an empty array [] of string using the csv-array format. Default value is
         None.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_array_string_csv_empty_request(
            array_query=array_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def array_string_no_collection_format_empty(  # pylint: disable=inconsistent-return-statements
        self, *, array_query: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """Array query has no defined collection format, should default to csv. Pass in ['hello', 'nihao',
        'bonjour'] for the 'arrayQuery' parameter to the service.

        :keyword array_query: Array-typed query parameter. Pass in ['hello', 'nihao', 'bonjour'].
         Default value is None.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_array_string_no_collection_format_empty_request(
            array_query=array_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def array_string_ssv_valid(  # pylint: disable=inconsistent-return-statements
        self, *, array_query: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        ssv-array format.

        :keyword array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
         ''] using the ssv-array format. Default value is None.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_array_string_ssv_valid_request(
            array_query=array_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def array_string_tsv_valid(  # pylint: disable=inconsistent-return-statements
        self, *, array_query: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        tsv-array format.

        :keyword array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
         ''] using the tsv-array format. Default value is None.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_array_string_tsv_valid_request(
            array_query=array_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def array_string_pipes_valid(  # pylint: disable=inconsistent-return-statements
        self, *, array_query: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null, ''] using the
        pipes-array format.

        :keyword array_query: an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' , null,
         ''] using the pipes-array format. Default value is None.
        :paramtype array_query: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_queries_array_string_pipes_valid_request(
            array_query=array_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})


class PathItemsOperations(object):
    """PathItemsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_all_with_values(  # pylint: disable=inconsistent-return-statements
        self,
        path_item_string_path: str,
        local_string_path: str,
        *,
        path_item_string_query: Optional[str] = None,
        local_string_query: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery='globalStringQuery',
        pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'.

        :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
        :type path_item_string_path: str
        :param local_string_path: should contain value 'localStringPath'.
        :type local_string_path: str
        :keyword path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
         parameter. Default value is None.
        :paramtype path_item_string_query: str
        :keyword local_string_query: should contain value 'localStringQuery'. Default value is None.
        :paramtype local_string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_path_items_get_all_with_values_request(
            path_item_string_path=path_item_string_path,
            global_string_path=self._config.global_string_path,
            local_string_path=local_string_path,
            path_item_string_query=path_item_string_query,
            global_string_query=self._config.global_string_query,
            local_string_query=local_string_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_global_query_null(  # pylint: disable=inconsistent-return-statements
        self,
        path_item_string_path: str,
        local_string_path: str,
        *,
        path_item_string_query: Optional[str] = None,
        local_string_query: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery=null,
        pathItemStringQuery='pathItemStringQuery', localStringQuery='localStringQuery'.

        :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
        :type path_item_string_path: str
        :param local_string_path: should contain value 'localStringPath'.
        :type local_string_path: str
        :keyword path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
         parameter. Default value is None.
        :paramtype path_item_string_query: str
        :keyword local_string_query: should contain value 'localStringQuery'. Default value is None.
        :paramtype local_string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_path_items_get_global_query_null_request(
            path_item_string_path=path_item_string_path,
            global_string_path=self._config.global_string_path,
            local_string_path=local_string_path,
            path_item_string_query=path_item_string_query,
            global_string_query=self._config.global_string_query,
            local_string_query=local_string_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_global_and_local_query_null(  # pylint: disable=inconsistent-return-statements
        self,
        path_item_string_path: str,
        local_string_path: str,
        *,
        path_item_string_query: Optional[str] = None,
        local_string_query: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """send globalStringPath=globalStringPath, pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery=null,
        pathItemStringQuery='pathItemStringQuery', localStringQuery=null.

        :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
        :type path_item_string_path: str
        :param local_string_path: should contain value 'localStringPath'.
        :type local_string_path: str
        :keyword path_item_string_query: A string value 'pathItemStringQuery' that appears as a query
         parameter. Default value is None.
        :paramtype path_item_string_query: str
        :keyword local_string_query: should contain null value. Default value is None.
        :paramtype local_string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_path_items_get_global_and_local_query_null_request(
            path_item_string_path=path_item_string_path,
            global_string_path=self._config.global_string_path,
            local_string_path=local_string_path,
            path_item_string_query=path_item_string_query,
            global_string_query=self._config.global_string_query,
            local_string_query=local_string_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_local_path_item_query_null(  # pylint: disable=inconsistent-return-statements
        self,
        path_item_string_path: str,
        local_string_path: str,
        *,
        path_item_string_query: Optional[str] = None,
        local_string_query: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """send globalStringPath='globalStringPath', pathItemStringPath='pathItemStringPath',
        localStringPath='localStringPath', globalStringQuery='globalStringQuery',
        pathItemStringQuery=null, localStringQuery=null.

        :param path_item_string_path: A string value 'pathItemStringPath' that appears in the path.
        :type path_item_string_path: str
        :param local_string_path: should contain value 'localStringPath'.
        :type local_string_path: str
        :keyword path_item_string_query: should contain value null. Default value is None.
        :paramtype path_item_string_query: str
        :keyword local_string_query: should contain value null. Default value is None.
        :paramtype local_string_query: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_path_items_get_local_path_item_query_null_request(
            path_item_string_path=path_item_string_path,
            global_string_path=self._config.global_string_path,
            local_string_path=local_string_path,
            path_item_string_query=path_item_string_query,
            global_string_query=self._config.global_string_query,
            local_string_query=local_string_query,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
