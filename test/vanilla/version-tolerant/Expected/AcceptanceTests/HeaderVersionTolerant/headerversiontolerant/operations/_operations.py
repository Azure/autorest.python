# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Optional, TypeVar

from msrest import Serializer

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_header_param_existing_key_request(*, user_agent_parameter: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/existingkey"

    # Construct headers
    _headers["User-Agent"] = _SERIALIZER.header("user_agent_parameter", user_agent_parameter, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_existing_key_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/existingkey"

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_protected_key_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type")  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/protectedkey"

    # Construct headers
    _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_protected_key_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/protectedkey"

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_integer_request(*, scenario: str, value: int, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/integer"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "int")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_integer_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/integer"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_long_request(*, scenario: str, value: int, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/long"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "int")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_long_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/long"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_float_request(*, scenario: str, value: float, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/float"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "float")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_float_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/float"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_double_request(*, scenario: str, value: float, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/double"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "float")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_double_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/double"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_bool_request(*, scenario: str, value: bool, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/bool"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "bool")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_bool_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/bool"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_string_request(*, scenario: str, value: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/string"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        _headers["value"] = _SERIALIZER.header("value", value, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_string_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/string"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_date_request(*, scenario: str, value: datetime.date, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/date"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "date")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_date_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/date"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_datetime_request(*, scenario: str, value: datetime.datetime, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/datetime"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "iso-8601")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_datetime_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/datetime"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_datetime_rfc1123_request(
    *, scenario: str, value: Optional[datetime.datetime] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/datetimerfc1123"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        _headers["value"] = _SERIALIZER.header("value", value, "rfc-1123")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_datetime_rfc1123_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/datetimerfc1123"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_duration_request(*, scenario: str, value: datetime.timedelta, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/duration"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "duration")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_duration_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/duration"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_byte_request(*, scenario: str, value: bytes, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/byte"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["value"] = _SERIALIZER.header("value", value, "bytearray")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_byte_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/byte"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_param_enum_request(*, scenario: str, value: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/param/prim/enum"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        _headers["value"] = _SERIALIZER.header("value", value, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_response_enum_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/response/prim/enum"

    # Construct headers
    _headers["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_header_custom_request_id_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0"

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


class HeaderOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~headerversiontolerant.AutoRestSwaggerBATHeaderService`'s
        :attr:`header` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def param_existing_key(  # pylint: disable=inconsistent-return-statements
        self, *, user_agent_parameter: str, **kwargs: Any
    ) -> None:
        """Send a post request with header value "User-Agent": "overwrite".

        :keyword user_agent_parameter: Send a post request with header value "User-Agent": "overwrite".
         Required.
        :paramtype user_agent_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_existing_key_request(
            user_agent_parameter=user_agent_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_existing_key(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get a response with header value "User-Agent": "overwrite".

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_existing_key_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["User-Agent"] = self._deserialize("str", response.headers.get("User-Agent"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_protected_key(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Send a post request with header value "Content-Type": "text/html".

        :keyword content_type: Send a post request with header value "Content-Type": "text/html".
         Required.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type")  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_protected_key_request(
            content_type=content_type,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_protected_key(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get a response with header value "Content-Type": "text/html".

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_protected_key_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_integer(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: int, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "positive", "value": 1 or "scenario":
        "negative", "value": -2.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values 1 or -2. Required.
        :paramtype value: int
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_integer_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_integer(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, **kwargs: Any
    ) -> None:
        """Get a response with header value "value": 1 or -2.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_integer_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("int", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_long(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: int, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "positive", "value": 105 or "scenario":
        "negative", "value": -2.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values 105 or -2. Required.
        :paramtype value: int
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_long_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_long(self, *, scenario: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get a response with header value "value": 105 or -2.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_long_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("int", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_float(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: float, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario":
        "negative", "value": -3.0.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values 0.07 or -3.0. Required.
        :paramtype value: float
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_float_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_float(self, *, scenario: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get a response with header value "value": 0.07 or -3.0.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_float_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("float", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_double(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: float, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario":
        "negative", "value": -3.0.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values 7e120 or -3.0. Required.
        :paramtype value: float
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_double_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_double(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, **kwargs: Any
    ) -> None:
        """Get a response with header value "value": 7e120 or -3.0.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_double_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("float", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_bool(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: bool, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "true", "value": true or "scenario":
        "false", "value": false.

        :keyword scenario: Send a post request with header values "scenario": "true" or "false".
         Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values true or false. Required.
        :paramtype value: bool
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_bool_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_bool(self, *, scenario: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get a response with header value "value": true or false.

        :keyword scenario: Send a post request with header values "scenario": "true" or "false".
         Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_bool_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("bool", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_string(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps
        over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": "".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty". Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values "The quick brown fox jumps over the lazy
         dog" or null or "". Default value is None.
        :paramtype value: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_string_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_string(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, **kwargs: Any
    ) -> None:
        """Get a response with header values "The quick brown fox jumps over the lazy dog" or null or "".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty". Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_string_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("str", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_date(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: datetime.date, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "2010-01-01" or
        "scenario": "min", "value": "0001-01-01".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
         Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values "2010-01-01" or "0001-01-01". Required.
        :paramtype value: ~datetime.date
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_date_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_date(self, *, scenario: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get a response with header values "2010-01-01" or "0001-01-01".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
         Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_date_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("date", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_datetime(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: datetime.datetime, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or
        "scenario": "min", "value": "0001-01-01T00:00:00Z".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
         Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values "2010-01-01T12:34:56Z" or
         "0001-01-01T00:00:00Z". Required.
        :paramtype value: ~datetime.datetime
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_datetime_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_datetime(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, **kwargs: Any
    ) -> None:
        """Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
         Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_datetime_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("iso-8601", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_datetime_rfc1123(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: Optional[datetime.datetime] = None, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56
        GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
         Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon,
         01 Jan 0001 00:00:00 GMT". Default value is None.
        :paramtype value: ~datetime.datetime
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_datetime_rfc1123_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_datetime_rfc1123(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, **kwargs: Any
    ) -> None:
        """Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00
        GMT".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
         Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_datetime_rfc1123_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("rfc-1123", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_duration(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: datetime.timedelta, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S".

        :keyword scenario: Send a post request with header values "scenario": "valid". Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values "P123DT22H14M12.011S". Required.
        :paramtype value: ~datetime.timedelta
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_duration_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_duration(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, **kwargs: Any
    ) -> None:
        """Get a response with header values "P123DT22H14M12.011S".

        :keyword scenario: Send a post request with header values "scenario": "valid". Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_duration_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("duration", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_byte(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: bytes, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩".

        :keyword scenario: Send a post request with header values "scenario": "valid". Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩". Required.
        :paramtype value: bytes
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_byte_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_byte(self, *, scenario: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get a response with header values "啊齄丂狛狜隣郎隣兀﨩".

        :keyword scenario: Send a post request with header values "scenario": "valid". Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_byte_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("bytearray", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_enum(  # pylint: disable=inconsistent-return-statements
        self, *, scenario: str, value: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario":
        "null", "value": null.

        :keyword scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty". Required.
        :paramtype scenario: str
        :keyword value: Send a post request with header values 'GREY'. Known values are: "White",
         "black", and "GREY". Default value is None.
        :paramtype value: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_param_enum_request(
            scenario=scenario,
            value=value,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_enum(self, *, scenario: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Get a response with header values "GREY" or null.

        :keyword scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty". Required.
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_response_enum_request(
            scenario=scenario,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("str", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def custom_request_id(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the
        request.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_header_custom_request_id_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
