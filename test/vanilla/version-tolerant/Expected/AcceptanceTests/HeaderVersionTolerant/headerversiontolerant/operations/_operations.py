# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_header_param_existing_key_request(*, user_agent_parameter: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/existingkey"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["User-Agent"] = _SERIALIZER.header("user_agent_parameter", user_agent_parameter, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_existing_key_request(**kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/existingkey"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_protected_key_request(**kwargs: Any) -> HttpRequest:
    content_type = kwargs.pop("content_type")  # type: str

    accept = "application/json"
    # Construct URL
    url = "/header/param/protectedkey"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_protected_key_request(**kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/protectedkey"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_integer_request(*, scenario: str, value: int, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/integer"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "int")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_integer_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/integer"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_long_request(*, scenario: str, value: int, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/long"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "long")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_long_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/long"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_float_request(*, scenario: str, value: float, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/float"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "float")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_float_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/float"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_double_request(*, scenario: str, value: float, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/double"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "float")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_double_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/double"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_bool_request(*, scenario: str, value: bool, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/bool"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "bool")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_bool_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/bool"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_string_request(*, scenario: str, value: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/string"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        header_parameters["value"] = _SERIALIZER.header("value", value, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_string_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/string"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_date_request(*, scenario: str, value: datetime.date, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/date"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "date")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_date_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/date"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_datetime_request(*, scenario: str, value: datetime.datetime, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/datetime"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "iso-8601")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_datetime_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/datetime"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_datetime_rfc1123_request(
    *, scenario: str, value: Optional[datetime.datetime] = None, **kwargs: Any
) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/datetimerfc1123"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        header_parameters["value"] = _SERIALIZER.header("value", value, "rfc-1123")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_datetime_rfc1123_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/datetimerfc1123"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_duration_request(*, scenario: str, value: datetime.timedelta, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/duration"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "duration")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_duration_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/duration"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_byte_request(*, scenario: str, value: bytearray, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/byte"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "bytearray")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_byte_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/byte"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_param_enum_request(*, scenario: str, value: Optional[str] = None, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/param/prim/enum"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        header_parameters["value"] = _SERIALIZER.header("value", value, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_response_enum_request(*, scenario: str, **kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/response/prim/enum"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


def build_header_custom_request_id_request(**kwargs: Any) -> HttpRequest:
    accept = "application/json"
    # Construct URL
    url = "/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0"

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=url, headers=header_parameters, **kwargs)


class HeaderOperations(object):  # pylint: disable=too-many-public-methods
    """HeaderOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def param_existing_key(self, *, user_agent_parameter: str, **kwargs: Any) -> None:
        """Send a post request with header value "User-Agent": "overwrite".

        :keyword user_agent_parameter: Send a post request with header value "User-Agent": "overwrite".
        :paramtype user_agent_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_existing_key_request(
            user_agent_parameter=user_agent_parameter,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_existing_key(self, **kwargs: Any) -> None:
        """Get a response with header value "User-Agent": "overwrite".

        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_existing_key_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["User-Agent"] = self._deserialize("str", response.headers.get("User-Agent"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_protected_key(self, **kwargs: Any) -> None:
        """Send a post request with header value "Content-Type": "text/html".

        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type")  # type: str

        request = build_header_param_protected_key_request(
            content_type=content_type,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_protected_key(self, **kwargs: Any) -> None:
        """Get a response with header value "Content-Type": "text/html".

        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_protected_key_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_integer(self, *, scenario: str, value: int, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "positive", "value": 1 or "scenario":
        "negative", "value": -2.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
        :paramtype scenario: str
        :keyword value: Send a post request with header values 1 or -2.
        :paramtype value: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_integer_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_integer(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header value "value": 1 or -2.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_integer_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("int", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_long(self, *, scenario: str, value: int, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "positive", "value": 105 or "scenario":
        "negative", "value": -2.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
        :paramtype scenario: str
        :keyword value: Send a post request with header values 105 or -2.
        :paramtype value: long
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_long_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_long(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header value "value": 105 or -2.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_long_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("long", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_float(self, *, scenario: str, value: float, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario":
        "negative", "value": -3.0.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
        :paramtype scenario: str
        :keyword value: Send a post request with header values 0.07 or -3.0.
        :paramtype value: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_float_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_float(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header value "value": 0.07 or -3.0.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_float_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("float", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_double(self, *, scenario: str, value: float, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario":
        "negative", "value": -3.0.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
        :paramtype scenario: str
        :keyword value: Send a post request with header values 7e120 or -3.0.
        :paramtype value: float
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_double_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_double(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header value "value": 7e120 or -3.0.

        :keyword scenario: Send a post request with header values "scenario": "positive" or "negative".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_double_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("float", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_bool(self, *, scenario: str, value: bool, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "true", "value": true or "scenario":
        "false", "value": false.

        :keyword scenario: Send a post request with header values "scenario": "true" or "false".
        :paramtype scenario: str
        :keyword value: Send a post request with header values true or false.
        :paramtype value: bool
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_bool_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_bool(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header value "value": true or false.

        :keyword scenario: Send a post request with header values "scenario": "true" or "false".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_bool_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("bool", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_string(self, *, scenario: str, value: Optional[str] = None, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps
        over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": "".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty".
        :paramtype scenario: str
        :keyword value: Send a post request with header values "The quick brown fox jumps over the lazy
         dog" or null or "".
        :paramtype value: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_string_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_string(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header values "The quick brown fox jumps over the lazy dog" or null or "".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_string_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("str", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_date(self, *, scenario: str, value: datetime.date, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "valid", "value": "2010-01-01" or
        "scenario": "min", "value": "0001-01-01".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
        :paramtype scenario: str
        :keyword value: Send a post request with header values "2010-01-01" or "0001-01-01".
        :paramtype value: ~datetime.date
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_date_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_date(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header values "2010-01-01" or "0001-01-01".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_date_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("date", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_datetime(self, *, scenario: str, value: datetime.datetime, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or
        "scenario": "min", "value": "0001-01-01T00:00:00Z".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
        :paramtype scenario: str
        :keyword value: Send a post request with header values "2010-01-01T12:34:56Z" or
         "0001-01-01T00:00:00Z".
        :paramtype value: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_datetime_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_datetime(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_datetime_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("iso-8601", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_datetime_rfc1123(
        self, *, scenario: str, value: Optional[datetime.datetime] = None, **kwargs: Any
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56
        GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
        :paramtype scenario: str
        :keyword value: Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon,
         01 Jan 0001 00:00:00 GMT".
        :paramtype value: ~datetime.datetime
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_datetime_rfc1123_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_datetime_rfc1123(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00
        GMT".

        :keyword scenario: Send a post request with header values "scenario": "valid" or "min".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_datetime_rfc1123_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("rfc-1123", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_duration(self, *, scenario: str, value: datetime.timedelta, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S".

        :keyword scenario: Send a post request with header values "scenario": "valid".
        :paramtype scenario: str
        :keyword value: Send a post request with header values "P123DT22H14M12.011S".
        :paramtype value: ~datetime.timedelta
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_duration_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_duration(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header values "P123DT22H14M12.011S".

        :keyword scenario: Send a post request with header values "scenario": "valid".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_duration_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("duration", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_byte(self, *, scenario: str, value: bytearray, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩".

        :keyword scenario: Send a post request with header values "scenario": "valid".
        :paramtype scenario: str
        :keyword value: Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩".
        :paramtype value: bytearray
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_byte_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_byte(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header values "啊齄丂狛狜隣郎隣兀﨩".

        :keyword scenario: Send a post request with header values "scenario": "valid".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_byte_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("bytearray", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def param_enum(self, *, scenario: str, value: Optional[str] = None, **kwargs: Any) -> None:
        """Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario":
        "null", "value": null.

        :keyword scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty".
        :paramtype scenario: str
        :keyword value: Send a post request with header values 'GREY'. Possible values are: "White",
         "black", and "GREY".
        :paramtype value: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_param_enum_request(
            scenario=scenario,
            value=value,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def response_enum(self, *, scenario: str, **kwargs: Any) -> None:
        """Get a response with header values "GREY" or null.

        :keyword scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty".
        :paramtype scenario: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_response_enum_request(
            scenario=scenario,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["value"] = self._deserialize("str", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def custom_request_id(self, **kwargs: Any) -> None:
        """Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the
        request.

        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_header_custom_request_id_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
