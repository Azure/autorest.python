# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ...operations._operations import (
    build_array_get_array_empty_request,
    build_array_get_array_item_empty_request,
    build_array_get_array_item_null_request,
    build_array_get_array_null_request,
    build_array_get_array_valid_request,
    build_array_get_base64_url_request,
    build_array_get_boolean_invalid_null_request,
    build_array_get_boolean_invalid_string_request,
    build_array_get_boolean_tfft_request,
    build_array_get_byte_invalid_null_request,
    build_array_get_byte_valid_request,
    build_array_get_complex_empty_request,
    build_array_get_complex_item_empty_request,
    build_array_get_complex_item_null_request,
    build_array_get_complex_null_request,
    build_array_get_complex_valid_request,
    build_array_get_date_invalid_chars_request,
    build_array_get_date_invalid_null_request,
    build_array_get_date_time_invalid_chars_request,
    build_array_get_date_time_invalid_null_request,
    build_array_get_date_time_rfc1123_valid_request,
    build_array_get_date_time_valid_request,
    build_array_get_date_valid_request,
    build_array_get_dictionary_empty_request,
    build_array_get_dictionary_item_empty_request,
    build_array_get_dictionary_item_null_request,
    build_array_get_dictionary_null_request,
    build_array_get_dictionary_valid_request,
    build_array_get_double_invalid_null_request,
    build_array_get_double_invalid_string_request,
    build_array_get_double_valid_request,
    build_array_get_duration_valid_request,
    build_array_get_empty_request,
    build_array_get_enum_valid_request,
    build_array_get_float_invalid_null_request,
    build_array_get_float_invalid_string_request,
    build_array_get_float_valid_request,
    build_array_get_int_invalid_null_request,
    build_array_get_int_invalid_string_request,
    build_array_get_integer_valid_request,
    build_array_get_invalid_request,
    build_array_get_long_invalid_null_request,
    build_array_get_long_invalid_string_request,
    build_array_get_long_valid_request,
    build_array_get_null_request,
    build_array_get_string_enum_valid_request,
    build_array_get_string_valid_request,
    build_array_get_string_with_invalid_request,
    build_array_get_string_with_null_request,
    build_array_get_uuid_invalid_chars_request,
    build_array_get_uuid_valid_request,
    build_array_put_array_valid_request,
    build_array_put_boolean_tfft_request,
    build_array_put_byte_valid_request,
    build_array_put_complex_valid_request,
    build_array_put_date_time_rfc1123_valid_request,
    build_array_put_date_time_valid_request,
    build_array_put_date_valid_request,
    build_array_put_dictionary_valid_request,
    build_array_put_double_valid_request,
    build_array_put_duration_valid_request,
    build_array_put_empty_request,
    build_array_put_enum_valid_request,
    build_array_put_float_valid_request,
    build_array_put_integer_valid_request,
    build_array_put_long_valid_request,
    build_array_put_string_enum_valid_request,
    build_array_put_string_valid_request,
    build_array_put_uuid_valid_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ArrayOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~bodyarrayversiontolerant.aio.AutoRestSwaggerBATArrayService`'s
        :attr:`array` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_null(self, **kwargs: Any) -> List[int]:
        """Get null array value.

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @distributed_trace_async
    async def get_invalid(self, **kwargs: Any) -> List[int]:
        """Get invalid array [1, 2, 3.

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_invalid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @distributed_trace_async
    async def get_empty(self, **kwargs: Any) -> List[int]:
        """Get empty array value [].

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_empty_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @overload
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[str], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value empty [].

        :param array_body: Required.
        :type array_body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "str"  # Optional.
                ]
        """

    @overload
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value empty [].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[str], IO], **kwargs: Any
    ) -> None:
        """Set array value empty [].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_empty_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_boolean_tfft(self, **kwargs: Any) -> List[bool]:
        """Get boolean array value [true, false, false, true].

        :return: list of bool
        :rtype: list[bool]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    bool  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[bool]]

        request = build_array_get_boolean_tfft_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[bool], deserialized), {})

        return cast(List[bool], deserialized)

    @overload
    async def put_boolean_tfft(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[bool], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value empty [true, false, false, true].

        :param array_body: Required.
        :type array_body: list[bool]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    bool  # Optional.
                ]
        """

    @overload
    async def put_boolean_tfft(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value empty [true, false, false, true].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_boolean_tfft(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[bool], IO], **kwargs: Any
    ) -> None:
        """Set array value empty [true, false, false, true].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[bool] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_boolean_tfft_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_boolean_invalid_null(self, **kwargs: Any) -> List[bool]:
        """Get boolean array value [true, null, false].

        :return: list of bool
        :rtype: list[bool]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    bool  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[bool]]

        request = build_array_get_boolean_invalid_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[bool], deserialized), {})

        return cast(List[bool], deserialized)

    @distributed_trace_async
    async def get_boolean_invalid_string(self, **kwargs: Any) -> List[bool]:
        """Get boolean array value [true, 'boolean', false].

        :return: list of bool
        :rtype: list[bool]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    bool  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[bool]]

        request = build_array_get_boolean_invalid_string_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[bool], deserialized), {})

        return cast(List[bool], deserialized)

    @distributed_trace_async
    async def get_integer_valid(self, **kwargs: Any) -> List[int]:
        """Get integer array value [1, -1, 3, 300].

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_integer_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @overload
    async def put_integer_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[int], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value empty [1, -1, 3, 300].

        :param array_body: Required.
        :type array_body: list[int]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    0  # Optional.
                ]
        """

    @overload
    async def put_integer_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value empty [1, -1, 3, 300].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_integer_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[int], IO], **kwargs: Any
    ) -> None:
        """Set array value empty [1, -1, 3, 300].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[int] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_integer_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_int_invalid_null(self, **kwargs: Any) -> List[int]:
        """Get integer array value [1, null, 0].

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_int_invalid_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @distributed_trace_async
    async def get_int_invalid_string(self, **kwargs: Any) -> List[int]:
        """Get integer array value [1, 'integer', 0].

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_int_invalid_string_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @distributed_trace_async
    async def get_long_valid(self, **kwargs: Any) -> List[int]:
        """Get integer array value [1, -1, 3, 300].

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_long_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @overload
    async def put_long_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[int], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value empty [1, -1, 3, 300].

        :param array_body: Required.
        :type array_body: list[int]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    0  # Optional.
                ]
        """

    @overload
    async def put_long_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value empty [1, -1, 3, 300].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_long_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[int], IO], **kwargs: Any
    ) -> None:
        """Set array value empty [1, -1, 3, 300].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[int] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_long_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_long_invalid_null(self, **kwargs: Any) -> List[int]:
        """Get long array value [1, null, 0].

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_long_invalid_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @distributed_trace_async
    async def get_long_invalid_string(self, **kwargs: Any) -> List[int]:
        """Get long array value [1, 'integer', 0].

        :return: list of int
        :rtype: list[int]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]

        request = build_array_get_long_invalid_string_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[int], deserialized), {})

        return cast(List[int], deserialized)

    @distributed_trace_async
    async def get_float_valid(self, **kwargs: Any) -> List[float]:
        """Get float array value [0, -0.01, 1.2e20].

        :return: list of float
        :rtype: list[float]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0.0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]

        request = build_array_get_float_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[float], deserialized), {})

        return cast(List[float], deserialized)

    @overload
    async def put_float_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[float], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value [0, -0.01, 1.2e20].

        :param array_body: Required.
        :type array_body: list[float]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    0.0  # Optional.
                ]
        """

    @overload
    async def put_float_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value [0, -0.01, 1.2e20].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_float_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[float], IO], **kwargs: Any
    ) -> None:
        """Set array value [0, -0.01, 1.2e20].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[float] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_float_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_float_invalid_null(self, **kwargs: Any) -> List[float]:
        """Get float array value [0.0, null, -1.2e20].

        :return: list of float
        :rtype: list[float]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0.0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]

        request = build_array_get_float_invalid_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[float], deserialized), {})

        return cast(List[float], deserialized)

    @distributed_trace_async
    async def get_float_invalid_string(self, **kwargs: Any) -> List[float]:
        """Get boolean array value [1.0, 'number', 0.0].

        :return: list of float
        :rtype: list[float]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0.0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]

        request = build_array_get_float_invalid_string_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[float], deserialized), {})

        return cast(List[float], deserialized)

    @distributed_trace_async
    async def get_double_valid(self, **kwargs: Any) -> List[float]:
        """Get float array value [0, -0.01, 1.2e20].

        :return: list of float
        :rtype: list[float]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0.0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]

        request = build_array_get_double_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[float], deserialized), {})

        return cast(List[float], deserialized)

    @overload
    async def put_double_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[float], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value [0, -0.01, 1.2e20].

        :param array_body: Required.
        :type array_body: list[float]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    0.0  # Optional.
                ]
        """

    @overload
    async def put_double_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value [0, -0.01, 1.2e20].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_double_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[float], IO], **kwargs: Any
    ) -> None:
        """Set array value [0, -0.01, 1.2e20].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[float] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_double_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_double_invalid_null(self, **kwargs: Any) -> List[float]:
        """Get float array value [0.0, null, -1.2e20].

        :return: list of float
        :rtype: list[float]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0.0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]

        request = build_array_get_double_invalid_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[float], deserialized), {})

        return cast(List[float], deserialized)

    @distributed_trace_async
    async def get_double_invalid_string(self, **kwargs: Any) -> List[float]:
        """Get boolean array value [1.0, 'number', 0.0].

        :return: list of float
        :rtype: list[float]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    0.0  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]

        request = build_array_get_double_invalid_string_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[float], deserialized), {})

        return cast(List[float], deserialized)

    @distributed_trace_async
    async def get_string_valid(self, **kwargs: Any) -> List[str]:
        """Get string array value ['foo1', 'foo2', 'foo3'].

        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]

        request = build_array_get_string_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})

        return cast(List[str], deserialized)

    @overload
    async def put_string_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[str], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Required.
        :type array_body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "str"  # Optional.
                ]
        """

    @overload
    async def put_string_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_string_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[str], IO], **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_string_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_enum_valid(self, **kwargs: Any) -> List[str]:
        """Get enum array value ['foo1', 'foo2', 'foo3'].

        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]

        request = build_array_get_enum_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})

        return cast(List[str], deserialized)

    @overload
    async def put_enum_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[str], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Required.
        :type array_body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "str"  # Optional.
                ]
        """

    @overload
    async def put_enum_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_enum_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[str], IO], **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_enum_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_string_enum_valid(self, **kwargs: Any) -> List[str]:
        """Get enum array value ['foo1', 'foo2', 'foo3'].

        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]

        request = build_array_get_string_enum_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})

        return cast(List[str], deserialized)

    @overload
    async def put_string_enum_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[str], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Required.
        :type array_body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "str"  # Optional.
                ]
        """

    @overload
    async def put_string_enum_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_string_enum_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[str], IO], **kwargs: Any
    ) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_string_enum_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_string_with_null(self, **kwargs: Any) -> List[str]:
        """Get string array value ['foo', null, 'foo2'].

        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]

        request = build_array_get_string_with_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})

        return cast(List[str], deserialized)

    @distributed_trace_async
    async def get_string_with_invalid(self, **kwargs: Any) -> List[str]:
        """Get string array value ['foo', 123, 'foo2'].

        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]

        request = build_array_get_string_with_invalid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})

        return cast(List[str], deserialized)

    @distributed_trace_async
    async def get_uuid_valid(self, **kwargs: Any) -> List[str]:
        """Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
        'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].

        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]

        request = build_array_get_uuid_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})

        return cast(List[str], deserialized)

    @overload
    async def put_uuid_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[str], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
        'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].

        :param array_body: Required.
        :type array_body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "str"  # Optional.
                ]
        """

    @overload
    async def put_uuid_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
        'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_uuid_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[str], IO], **kwargs: Any
    ) -> None:
        """Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
        'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_uuid_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_uuid_invalid_chars(self, **kwargs: Any) -> List[str]:
        """Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo'].

        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "str"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]

        request = build_array_get_uuid_invalid_chars_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})

        return cast(List[str], deserialized)

    @distributed_trace_async
    async def get_date_valid(self, **kwargs: Any) -> List[datetime.date]:
        """Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12'].

        :return: list of date
        :rtype: list[~datetime.date]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "2020-02-20"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.date]]

        request = build_array_get_date_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[datetime.date], deserialized), {})

        return cast(List[datetime.date], deserialized)

    @overload
    async def put_date_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[datetime.date], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].

        :param array_body: Required.
        :type array_body: list[~datetime.date]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "2020-02-20"  # Optional.
                ]
        """

    @overload
    async def put_date_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_date_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[datetime.date], IO], **kwargs: Any
    ) -> None:
        """Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[~datetime.date] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_date_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_date_invalid_null(self, **kwargs: Any) -> List[datetime.date]:
        """Get date array value ['2012-01-01', null, '1776-07-04'].

        :return: list of date
        :rtype: list[~datetime.date]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "2020-02-20"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.date]]

        request = build_array_get_date_invalid_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[datetime.date], deserialized), {})

        return cast(List[datetime.date], deserialized)

    @distributed_trace_async
    async def get_date_invalid_chars(self, **kwargs: Any) -> List[datetime.date]:
        """Get date array value ['2011-03-22', 'date'].

        :return: list of date
        :rtype: list[~datetime.date]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "2020-02-20"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.date]]

        request = build_array_get_date_invalid_chars_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[datetime.date], deserialized), {})

        return cast(List[datetime.date], deserialized)

    @distributed_trace_async
    async def get_date_time_valid(self, **kwargs: Any) -> List[datetime.datetime]:
        """Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
        '1492-10-12T10:15:01-08:00'].

        :return: list of datetime
        :rtype: list[~datetime.datetime]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "2020-02-20 00:00:00"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.datetime]]

        request = build_array_get_date_time_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[datetime.datetime], deserialized), {})

        return cast(List[datetime.datetime], deserialized)

    @overload
    async def put_date_time_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[datetime.datetime], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
        '1492-10-12T10:15:01-08:00'].

        :param array_body: Required.
        :type array_body: list[~datetime.datetime]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "2020-02-20 00:00:00"  # Optional.
                ]
        """

    @overload
    async def put_date_time_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
        '1492-10-12T10:15:01-08:00'].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_date_time_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[datetime.datetime], IO], **kwargs: Any
    ) -> None:
        """Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
        '1492-10-12T10:15:01-08:00'].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[~datetime.datetime] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_date_time_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_date_time_invalid_null(self, **kwargs: Any) -> List[datetime.datetime]:
        """Get date array value ['2000-12-01t00:00:01z', null].

        :return: list of datetime
        :rtype: list[~datetime.datetime]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "2020-02-20 00:00:00"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.datetime]]

        request = build_array_get_date_time_invalid_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[datetime.datetime], deserialized), {})

        return cast(List[datetime.datetime], deserialized)

    @distributed_trace_async
    async def get_date_time_invalid_chars(self, **kwargs: Any) -> List[datetime.datetime]:
        """Get date array value ['2000-12-01t00:00:01z', 'date-time'].

        :return: list of datetime
        :rtype: list[~datetime.datetime]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "2020-02-20 00:00:00"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.datetime]]

        request = build_array_get_date_time_invalid_chars_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[datetime.datetime], deserialized), {})

        return cast(List[datetime.datetime], deserialized)

    @distributed_trace_async
    async def get_date_time_rfc1123_valid(self, **kwargs: Any) -> List[datetime.datetime]:
        """Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT',
        'Wed, 12 Oct 1492 10:15:01 GMT'].

        :return: list of datetime
        :rtype: list[~datetime.datetime]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "2020-02-20 00:00:00"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.datetime]]

        request = build_array_get_date_time_rfc1123_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[datetime.datetime], deserialized), {})

        return cast(List[datetime.datetime], deserialized)

    @overload
    async def put_date_time_rfc1123_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[datetime.datetime], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12
        Oct 1492 10:15:01 GMT'].

        :param array_body: Required.
        :type array_body: list[~datetime.datetime]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "2020-02-20 00:00:00"  # Optional.
                ]
        """

    @overload
    async def put_date_time_rfc1123_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12
        Oct 1492 10:15:01 GMT'].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_date_time_rfc1123_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[datetime.datetime], IO], **kwargs: Any
    ) -> None:
        """Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12
        Oct 1492 10:15:01 GMT'].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[~datetime.datetime] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_date_time_rfc1123_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_duration_valid(self, **kwargs: Any) -> List[datetime.timedelta]:
        """Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S'].

        :return: list of timedelta
        :rtype: list[~datetime.timedelta]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    "1 day, 0:00:00"  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.timedelta]]

        request = build_array_get_duration_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[datetime.timedelta], deserialized), {})

        return cast(List[datetime.timedelta], deserialized)

    @overload
    async def put_duration_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[datetime.timedelta], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].

        :param array_body: Required.
        :type array_body: list[~datetime.timedelta]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    "1 day, 0:00:00"  # Optional.
                ]
        """

    @overload
    async def put_duration_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_duration_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[datetime.timedelta], IO], **kwargs: Any
    ) -> None:
        """Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[~datetime.timedelta] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_duration_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_byte_valid(self, **kwargs: Any) -> List[bytes]:
        """Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded
        in base64.

        :return: list of bytes
        :rtype: list[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    bytes("bytes", encoding="utf-8")  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[bytes]]

        request = build_array_get_byte_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[bytes], deserialized), {})

        return cast(List[bytes], deserialized)

    @overload
    async def put_byte_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each
        elementencoded in base 64.

        :param array_body: Required.
        :type array_body: list[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    bytes("bytes", encoding="utf-8")  # Optional.
                ]
        """

    @overload
    async def put_byte_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each
        elementencoded in base 64.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_byte_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[bytes], IO], **kwargs: Any
    ) -> None:
        """Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each
        elementencoded in base 64.

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[bytes] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_byte_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_byte_invalid_null(self, **kwargs: Any) -> List[bytes]:
        """Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded.

        :return: list of bytes
        :rtype: list[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    bytes("bytes", encoding="utf-8")  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[bytes]]

        request = build_array_get_byte_invalid_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[bytes], deserialized), {})

        return cast(List[bytes], deserialized)

    @distributed_trace_async
    async def get_base64_url(self, **kwargs: Any) -> List[bytes]:
        """Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with
        the items base64url encoded.

        :return: list of bytes
        :rtype: list[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    bytes("bytes", encoding="utf-8")  # Optional.
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[bytes]]

        request = build_array_get_base64_url_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[bytes], deserialized), {})

        return cast(List[bytes], deserialized)

    @distributed_trace_async
    async def get_complex_null(self, **kwargs: Any) -> List[JSON]:
        """Get array of complex type null value.

        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[JSON]]

        request = build_array_get_complex_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @distributed_trace_async
    async def get_complex_empty(self, **kwargs: Any) -> List[JSON]:
        """Get empty array of complex type [].

        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[JSON]]

        request = build_array_get_complex_empty_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @distributed_trace_async
    async def get_complex_item_null(self, **kwargs: Any) -> List[JSON]:
        """Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5,
        'string': '6'}].

        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[JSON]]

        request = build_array_get_complex_item_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @distributed_trace_async
    async def get_complex_item_empty(self, **kwargs: Any) -> List[JSON]:
        """Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5,
        'string': '6'}].

        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[JSON]]

        request = build_array_get_complex_item_empty_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @distributed_trace_async
    async def get_complex_valid(self, **kwargs: Any) -> List[JSON]:
        """Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'},
        {'integer': 5, 'string': '6'}].

        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[JSON]]

        request = build_array_get_complex_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})

        return cast(List[JSON], deserialized)

    @overload
    async def put_complex_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[JSON], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3,
        'string': '4'}, {'integer': 5, 'string': '6'}].

        :param array_body: Required.
        :type array_body: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                ]
        """

    @overload
    async def put_complex_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3,
        'string': '4'}, {'integer': 5, 'string': '6'}].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_complex_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[JSON], IO], **kwargs: Any
    ) -> None:
        """Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3,
        'string': '4'}, {'integer': 5, 'string': '6'}].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[JSON] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_complex_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_array_null(self, **kwargs: Any) -> List[List[str]]:
        """Get a null array.

        :return: list of list of str
        :rtype: list[list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    [
                        "str"  # Optional.
                    ]
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]

        request = build_array_get_array_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[List[str]], deserialized), {})

        return cast(List[List[str]], deserialized)

    @distributed_trace_async
    async def get_array_empty(self, **kwargs: Any) -> List[List[str]]:
        """Get an empty array [].

        :return: list of list of str
        :rtype: list[list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    [
                        "str"  # Optional.
                    ]
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]

        request = build_array_get_array_empty_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[List[str]], deserialized), {})

        return cast(List[List[str]], deserialized)

    @distributed_trace_async
    async def get_array_item_null(self, **kwargs: Any) -> List[List[str]]:
        """Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']].

        :return: list of list of str
        :rtype: list[list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    [
                        "str"  # Optional.
                    ]
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]

        request = build_array_get_array_item_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[List[str]], deserialized), {})

        return cast(List[List[str]], deserialized)

    @distributed_trace_async
    async def get_array_item_empty(self, **kwargs: Any) -> List[List[str]]:
        """Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']].

        :return: list of list of str
        :rtype: list[list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    [
                        "str"  # Optional.
                    ]
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]

        request = build_array_get_array_item_empty_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[List[str]], deserialized), {})

        return cast(List[List[str]], deserialized)

    @distributed_trace_async
    async def get_array_valid(self, **kwargs: Any) -> List[List[str]]:
        """Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].

        :return: list of list of str
        :rtype: list[list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    [
                        "str"  # Optional.
                    ]
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]

        request = build_array_get_array_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[List[str]], deserialized), {})

        return cast(List[List[str]], deserialized)

    @overload
    async def put_array_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[List[str]], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].

        :param array_body: Required.
        :type array_body: list[list[str]]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    [
                        "str"  # Optional.
                    ]
                ]
        """

    @overload
    async def put_array_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_array_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[List[str]], IO], **kwargs: Any
    ) -> None:
        """Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[list[str]] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_array_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_dictionary_null(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries with value null.

        :return: list of dict mapping str to str
        :rtype: list[dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "str": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]

        request = build_array_get_dictionary_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[Dict[str, str]], deserialized), {})

        return cast(List[Dict[str, str]], deserialized)

    @distributed_trace_async
    async def get_dictionary_empty(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries of type <string, string> with value [].

        :return: list of dict mapping str to str
        :rtype: list[dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "str": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]

        request = build_array_get_dictionary_empty_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[Dict[str, str]], deserialized), {})

        return cast(List[Dict[str, str]], deserialized)

    @distributed_trace_async
    async def get_dictionary_item_null(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :return: list of dict mapping str to str
        :rtype: list[dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "str": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]

        request = build_array_get_dictionary_item_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[Dict[str, str]], deserialized), {})

        return cast(List[Dict[str, str]], deserialized)

    @distributed_trace_async
    async def get_dictionary_item_empty(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :return: list of dict mapping str to str
        :rtype: list[dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "str": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]

        request = build_array_get_dictionary_item_empty_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[Dict[str, str]], deserialized), {})

        return cast(List[Dict[str, str]], deserialized)

    @distributed_trace_async
    async def get_dictionary_valid(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :return: list of dict mapping str to str
        :rtype: list[dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == [
                    {
                        "str": "str"  # Optional.
                    }
                ]
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]

        request = build_array_get_dictionary_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[Dict[str, str]], deserialized), {})

        return cast(List[Dict[str, str]], deserialized)

    @overload
    async def put_dictionary_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: List[Dict[str, str]], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :param array_body: Required.
        :type array_body: list[dict[str, str]]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = [
                    {
                        "str": "str"  # Optional.
                    }
                ]
        """

    @overload
    async def put_dictionary_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_dictionary_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[List[Dict[str, str]], IO], **kwargs: Any
    ) -> None:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :param array_body: Is either a list type or a IO type. Required.
        :type array_body: list[dict[str, str]] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = array_body

        request = build_array_put_dictionary_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
