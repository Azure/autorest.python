# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, IO, List, Optional, TypeVar

    T = TypeVar("T")
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
# fmt: off

def build_put_optional_binary_body_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/explicit/optional/binary-body')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_required_binary_body_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/explicit/required/binary-body')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_integer_parameter_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/integer/parameter')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_integer_parameter_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/integer/parameter')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_integer_property_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/integer/property')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_integer_property_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/integer/property')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_integer_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    header_parameter = kwargs.pop('header_parameter')  # type: int

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/integer/header')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['headerParameter'] = _SERIALIZER.header("header_parameter", header_parameter, 'int')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_integer_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    header_parameter = kwargs.pop('header_parameter', None)  # type: Optional[int]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/integer/header')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if header_parameter is not None:
        header_parameters['headerParameter'] = _SERIALIZER.header("header_parameter", header_parameter, 'int')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_string_parameter_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/string/parameter')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_string_parameter_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/string/parameter')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_string_property_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/string/property')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_string_property_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/string/property')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_string_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    header_parameter = kwargs.pop('header_parameter')  # type: str

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/string/header')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['headerParameter'] = _SERIALIZER.header("header_parameter", header_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_string_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    body_parameter = kwargs.pop('body_parameter', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/string/header')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if body_parameter is not None:
        header_parameters['bodyParameter'] = _SERIALIZER.header("body_parameter", body_parameter, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_class_parameter_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/class/parameter')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_class_parameter_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/class/parameter')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_class_property_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/class/property')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_class_property_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/class/property')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_array_parameter_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/array/parameter')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_array_parameter_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/array/parameter')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_array_property_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/array/property')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_array_property_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/array/property')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_required_array_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    header_parameter = kwargs.pop('header_parameter')  # type: List[str]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/requied/array/header')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['headerParameter'] = _SERIALIZER.header("header_parameter", header_parameter, '[str]', div=',')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_post_optional_array_header_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    header_parameter = kwargs.pop('header_parameter', None)  # type: Optional[List[str]]

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/reqopt/optional/array/header')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if header_parameter is not None:
        header_parameters['headerParameter'] = _SERIALIZER.header("header_parameter", header_parameter, '[str]', div=',')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class ExplicitOperations(object):
    """ExplicitOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def put_optional_binary_body(
        self,
        body_parameter=None,  # type: Optional[IO]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional body parameter.

        :param body_parameter:
        :type body_parameter: IO
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/octet-stream")  # type: Optional[str]

        content = body_parameter

        request = build_put_optional_binary_body_request(
            content_type=content_type,
            content=content,
            template_url=self.put_optional_binary_body.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_optional_binary_body.metadata = {"url": "/reqopt/explicit/optional/binary-body"}  # type: ignore

    @distributed_trace
    def put_required_binary_body(
        self,
        body_parameter,  # type: IO
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required body parameter.

        :param body_parameter:
        :type body_parameter: IO
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/octet-stream")  # type: Optional[str]

        content = body_parameter

        request = build_put_required_binary_body_request(
            content_type=content_type,
            content=content,
            template_url=self.put_required_binary_body.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_required_binary_body.metadata = {"url": "/reqopt/explicit/required/binary-body"}  # type: ignore

    @distributed_trace
    def post_required_integer_parameter(
        self,
        body_parameter,  # type: int
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required integer. Please put null and the client library should throw before
        the request is sent.

        :param body_parameter:
        :type body_parameter: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_post_required_integer_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_integer_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_integer_parameter.metadata = {"url": "/reqopt/requied/integer/parameter"}  # type: ignore

    @distributed_trace
    def post_optional_integer_parameter(
        self,
        body_parameter=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional integer. Please put null.

        :param body_parameter:
        :type body_parameter: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_post_optional_integer_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_integer_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_integer_parameter.metadata = {"url": "/reqopt/optional/integer/parameter"}  # type: ignore

    @distributed_trace
    def post_required_integer_property(
        self,
        body_parameter,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": "int"
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_post_required_integer_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_integer_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_integer_property.metadata = {"url": "/reqopt/requied/integer/property"}  # type: ignore

    @distributed_trace
    def post_optional_integer_property(
        self,
        body_parameter=None,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": "int (optional)"
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_post_optional_integer_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_integer_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_integer_property.metadata = {"url": "/reqopt/optional/integer/property"}  # type: ignore

    @distributed_trace
    def post_required_integer_header(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required integer. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter:
        :paramtype header_parameter: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        header_parameter = kwargs.pop("header_parameter")  # type: int

        request = build_post_required_integer_header_request(
            header_parameter=header_parameter,
            template_url=self.post_required_integer_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_integer_header.metadata = {"url": "/reqopt/requied/integer/header"}  # type: ignore

    @distributed_trace
    def post_optional_integer_header(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional integer. Please put a header 'headerParameter' => null.

        :keyword header_parameter:
        :paramtype header_parameter: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        header_parameter = kwargs.pop("header_parameter", None)  # type: Optional[int]

        request = build_post_optional_integer_header_request(
            header_parameter=header_parameter,
            template_url=self.post_optional_integer_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_integer_header.metadata = {"url": "/reqopt/optional/integer/header"}  # type: ignore

    @distributed_trace
    def post_required_string_parameter(
        self,
        body_parameter,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required string. Please put null and the client library should throw before the
        request is sent.

        :param body_parameter:
        :type body_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_post_required_string_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_string_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_string_parameter.metadata = {"url": "/reqopt/requied/string/parameter"}  # type: ignore

    @distributed_trace
    def post_optional_string_parameter(
        self,
        body_parameter=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional string. Please put null.

        :param body_parameter:
        :type body_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_post_optional_string_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_string_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_string_parameter.metadata = {"url": "/reqopt/optional/string/parameter"}  # type: ignore

    @distributed_trace
    def post_required_string_property(
        self,
        body_parameter,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": "str"
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_post_required_string_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_string_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_string_property.metadata = {"url": "/reqopt/requied/string/property"}  # type: ignore

    @distributed_trace
    def post_optional_string_property(
        self,
        body_parameter=None,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": "str (optional)"
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_post_optional_string_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_string_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_string_property.metadata = {"url": "/reqopt/optional/string/property"}  # type: ignore

    @distributed_trace
    def post_required_string_header(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required string. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter:
        :paramtype header_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        header_parameter = kwargs.pop("header_parameter")  # type: str

        request = build_post_required_string_header_request(
            header_parameter=header_parameter,
            template_url=self.post_required_string_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_string_header.metadata = {"url": "/reqopt/requied/string/header"}  # type: ignore

    @distributed_trace
    def post_optional_string_header(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional string. Please put a header 'headerParameter' => null.

        :keyword body_parameter:
        :paramtype body_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        body_parameter = kwargs.pop("body_parameter", None)  # type: Optional[str]

        request = build_post_optional_string_header_request(
            body_parameter=body_parameter,
            template_url=self.post_optional_string_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_string_header.metadata = {"url": "/reqopt/optional/string/header"}  # type: ignore

    @distributed_trace
    def post_required_class_parameter(
        self,
        body_parameter,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required complex object. Please put null and the client library should throw
        before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "id": "int",
                    "name": "str (optional)"
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_post_required_class_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_class_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_class_parameter.metadata = {"url": "/reqopt/requied/class/parameter"}  # type: ignore

    @distributed_trace
    def post_optional_class_parameter(
        self,
        body_parameter=None,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional complex object. Please put null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "id": "int",
                    "name": "str (optional)"
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_post_optional_class_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_class_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_class_parameter.metadata = {"url": "/reqopt/optional/class/parameter"}  # type: ignore

    @distributed_trace
    def post_required_class_property(
        self,
        body_parameter,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null
        and the client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": {
                        "id": "int",
                        "name": "str (optional)"
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_post_required_class_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_class_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_class_property.metadata = {"url": "/reqopt/requied/class/property"}  # type: ignore

    @distributed_trace
    def post_optional_class_property(
        self,
        body_parameter=None,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": {
                        "id": "int",
                        "name": "str (optional)"
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_post_optional_class_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_class_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_class_property.metadata = {"url": "/reqopt/optional/class/property"}  # type: ignore

    @distributed_trace
    def post_required_array_parameter(
        self,
        body_parameter,  # type: List[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required array. Please put null and the client library should throw before the
        request is sent.

        :param body_parameter:
        :type body_parameter: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = [
                    "str (optional)"
                ]
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_post_required_array_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_array_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_array_parameter.metadata = {"url": "/reqopt/requied/array/parameter"}  # type: ignore

    @distributed_trace
    def post_optional_array_parameter(
        self,
        body_parameter=None,  # type: Optional[List[str]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional array. Please put null.

        :param body_parameter:
        :type body_parameter: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = [
                    "str (optional)"
                ]
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_post_optional_array_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_array_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_array_parameter.metadata = {"url": "/reqopt/optional/array/parameter"}  # type: ignore

    @distributed_trace
    def post_required_array_property(
        self,
        body_parameter,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": [
                        "str"
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_post_required_array_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_array_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_array_property.metadata = {"url": "/reqopt/requied/array/property"}  # type: ignore

    @distributed_trace
    def post_optional_array_property(
        self,
        body_parameter=None,  # type: Any
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": [
                        "str (optional)"
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_post_optional_array_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_array_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_array_property.metadata = {"url": "/reqopt/optional/array/property"}  # type: ignore

    @distributed_trace
    def post_required_array_header(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly required array. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter:
        :paramtype header_parameter: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        header_parameter = kwargs.pop("header_parameter")  # type: List[str]

        request = build_post_required_array_header_request(
            header_parameter=header_parameter,
            template_url=self.post_required_array_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_array_header.metadata = {"url": "/reqopt/requied/array/header"}  # type: ignore

    @distributed_trace
    def post_optional_array_header(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Test explicitly optional integer. Please put a header 'headerParameter' => null.

        :keyword header_parameter:
        :paramtype header_parameter: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        header_parameter = kwargs.pop("header_parameter", None)  # type: Optional[List[str]]

        request = build_post_optional_array_header_request(
            header_parameter=header_parameter,
            template_url=self.post_optional_array_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_array_header.metadata = {"url": "/reqopt/optional/array/header"}  # type: ignore
