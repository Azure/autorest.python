# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ...operations._operations import (
    build_explicit_post_optional_array_header_request,
    build_explicit_post_optional_array_parameter_request,
    build_explicit_post_optional_array_property_request,
    build_explicit_post_optional_class_parameter_request,
    build_explicit_post_optional_class_property_request,
    build_explicit_post_optional_integer_header_request,
    build_explicit_post_optional_integer_parameter_request,
    build_explicit_post_optional_integer_property_request,
    build_explicit_post_optional_string_header_request,
    build_explicit_post_optional_string_parameter_request,
    build_explicit_post_optional_string_property_request,
    build_explicit_post_required_array_header_request,
    build_explicit_post_required_array_parameter_request,
    build_explicit_post_required_array_property_request,
    build_explicit_post_required_class_parameter_request,
    build_explicit_post_required_class_property_request,
    build_explicit_post_required_integer_header_request,
    build_explicit_post_required_integer_parameter_request,
    build_explicit_post_required_integer_property_request,
    build_explicit_post_required_string_header_request,
    build_explicit_post_required_string_parameter_request,
    build_explicit_post_required_string_property_request,
    build_explicit_put_optional_binary_body_request,
    build_explicit_put_required_binary_body_request,
    build_implicit_get_optional_global_query_request,
    build_implicit_get_required_global_path_request,
    build_implicit_get_required_global_query_request,
    build_implicit_get_required_path_request,
    build_implicit_put_optional_binary_body_request,
    build_implicit_put_optional_body_request,
    build_implicit_put_optional_header_request,
    build_implicit_put_optional_query_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class ImplicitOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~requiredoptionalversiontolerant.aio.AutoRestRequiredOptionalTestService`'s
        :attr:`implicit` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_required_path(  # pylint: disable=inconsistent-return-statements
        self, path_parameter: str, **kwargs: Any
    ) -> None:
        """Test implicitly required path parameter.

        :param path_parameter: Required.
        :type path_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_implicit_get_required_path_request(
            path_parameter=path_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def put_optional_query(  # pylint: disable=inconsistent-return-statements
        self, *, query_parameter: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Test implicitly optional query parameter.

        :keyword query_parameter: Default value is None.
        :paramtype query_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_implicit_put_optional_query_request(
            query_parameter=query_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def put_optional_header(  # pylint: disable=inconsistent-return-statements
        self, *, query_parameter: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Test implicitly optional header parameter.

        :keyword query_parameter: Default value is None.
        :paramtype query_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_implicit_put_optional_header_request(
            query_parameter=query_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def put_optional_body(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Test implicitly optional body parameter.

        :param body_parameter: Default value is None.
        :type body_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        if body_parameter is not None:
            _content = body_parameter
        else:
            _content = None

        request = build_implicit_put_optional_body_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def put_optional_binary_body(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[IO] = None, **kwargs: Any
    ) -> None:
        """Test implicitly optional body parameter.

        :param body_parameter: Default value is None.
        :type body_parameter: IO
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/octet-stream"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _content = body_parameter

        request = build_implicit_put_optional_binary_body_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_required_global_path(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Test implicitly required path parameter.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_implicit_get_required_global_path_request(
            required_global_path=self._config.required_global_path,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_required_global_query(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Test implicitly required query parameter.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_implicit_get_required_global_query_request(
            required_global_query=self._config.required_global_query,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_optional_global_query(self, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Test implicitly optional query parameter.

        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_implicit_get_optional_global_query_request(
            optional_global_query=self._config.optional_global_query,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})


class ExplicitOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~requiredoptionalversiontolerant.aio.AutoRestRequiredOptionalTestService`'s
        :attr:`explicit` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def put_optional_binary_body(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[IO] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional body parameter.

        :param body_parameter: Default value is None.
        :type body_parameter: IO
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/octet-stream"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _content = body_parameter

        request = build_explicit_put_optional_binary_body_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def put_required_binary_body(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: IO, **kwargs: Any
    ) -> None:
        """Test explicitly required body parameter.

        :param body_parameter: Required.
        :type body_parameter: IO
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/octet-stream"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _content = body_parameter

        request = build_explicit_put_required_binary_body_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_required_integer_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: int, **kwargs: Any
    ) -> None:
        """Test explicitly required integer. Please put null and the client library should throw before
        the request is sent.

        :param body_parameter: Required.
        :type body_parameter: int
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _json = body_parameter

        request = build_explicit_post_required_integer_parameter_request(
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_optional_integer_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[int] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put null.

        :param body_parameter: Default value is None.
        :type body_parameter: int
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        if body_parameter is not None:
            _json = body_parameter
        else:
            _json = None

        request = build_explicit_post_optional_integer_parameter_request(
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_required_integer_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": 0  # Required.
                }
        """

    @overload
    async def post_required_integer_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_required_integer_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Is either a model type or a IO type. Required.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            _json = body_parameter

        request = build_explicit_post_required_integer_property_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_optional_integer_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.

        :param body_parameter: Default value is None.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": 0  # Optional.
                }
        """

    @overload
    async def post_optional_integer_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.

        :param body_parameter: Default value is None.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_optional_integer_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.

        :param body_parameter: Is either a model type or a IO type. Default value is None.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            if body_parameter is not None:
                _json = body_parameter
            else:
                _json = None

        request = build_explicit_post_optional_integer_property_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_required_integer_header(  # pylint: disable=inconsistent-return-statements
        self, *, header_parameter: int, **kwargs: Any
    ) -> None:
        """Test explicitly required integer. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter: Required.
        :paramtype header_parameter: int
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_explicit_post_required_integer_header_request(
            header_parameter=header_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_optional_integer_header(  # pylint: disable=inconsistent-return-statements
        self, *, header_parameter: Optional[int] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put a header 'headerParameter' => null.

        :keyword header_parameter: Default value is None.
        :paramtype header_parameter: int
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_explicit_post_optional_integer_header_request(
            header_parameter=header_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_required_string_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: str, **kwargs: Any
    ) -> None:
        """Test explicitly required string. Please put null and the client library should throw before the
        request is sent.

        :param body_parameter: Required.
        :type body_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        _content = body_parameter

        request = build_explicit_post_required_string_parameter_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_optional_string_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional string. Please put null.

        :param body_parameter: Default value is None.
        :type body_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        if body_parameter is not None:
            _content = body_parameter
        else:
            _content = None

        request = build_explicit_post_optional_string_parameter_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_required_string_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": "str"  # Required.
                }
        """

    @overload
    async def post_required_string_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_required_string_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Is either a model type or a IO type. Required.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            _json = body_parameter

        request = build_explicit_post_required_string_property_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_optional_string_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.

        :param body_parameter: Default value is None.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": "str"  # Optional.
                }
        """

    @overload
    async def post_optional_string_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.

        :param body_parameter: Default value is None.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_optional_string_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.

        :param body_parameter: Is either a model type or a IO type. Default value is None.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            if body_parameter is not None:
                _json = body_parameter
            else:
                _json = None

        request = build_explicit_post_optional_string_property_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_required_string_header(  # pylint: disable=inconsistent-return-statements
        self, *, header_parameter: str, **kwargs: Any
    ) -> None:
        """Test explicitly required string. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter: Required.
        :paramtype header_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_explicit_post_required_string_header_request(
            header_parameter=header_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_optional_string_header(  # pylint: disable=inconsistent-return-statements
        self, *, body_parameter: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional string. Please put a header 'headerParameter' => null.

        :keyword body_parameter: Default value is None.
        :paramtype body_parameter: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_explicit_post_optional_string_header_request(
            body_parameter=body_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_required_class_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required complex object. Please put null and the client library should throw
        before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "id": 0,  # Required.
                    "name": "str"  # Optional.
                }
        """

    @overload
    async def post_required_class_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required complex object. Please put null and the client library should throw
        before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_required_class_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Test explicitly required complex object. Please put null and the client library should throw
        before the request is sent.

        :param body_parameter: Is either a model type or a IO type. Required.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            _json = body_parameter

        request = build_explicit_post_required_class_parameter_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_optional_class_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional complex object. Please put null.

        :param body_parameter: Default value is None.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "id": 0,  # Required.
                    "name": "str"  # Optional.
                }
        """

    @overload
    async def post_optional_class_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional complex object. Please put null.

        :param body_parameter: Default value is None.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_optional_class_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional complex object. Please put null.

        :param body_parameter: Is either a model type or a IO type. Default value is None.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            if body_parameter is not None:
                _json = body_parameter
            else:
                _json = None

        request = build_explicit_post_optional_class_parameter_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_required_class_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null
        and the client library should throw before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": {
                        "id": 0,  # Required.
                        "name": "str"  # Optional. Required.
                    }
                }
        """

    @overload
    async def post_required_class_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null
        and the client library should throw before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_required_class_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null
        and the client library should throw before the request is sent.

        :param body_parameter: Is either a model type or a IO type. Required.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            _json = body_parameter

        request = build_explicit_post_required_class_property_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_optional_class_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.

        :param body_parameter: Default value is None.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": {
                        "id": 0,  # Required.
                        "name": "str"  # Optional.
                    }
                }
        """

    @overload
    async def post_optional_class_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.

        :param body_parameter: Default value is None.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_optional_class_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.

        :param body_parameter: Is either a model type or a IO type. Default value is None.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            if body_parameter is not None:
                _json = body_parameter
            else:
                _json = None

        request = build_explicit_post_optional_class_property_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_required_array_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: List[str], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required array. Please put null and the client library should throw before the
        request is sent.

        :param body_parameter: Required.
        :type body_parameter: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = [
                    "str"  # Optional.
                ]
        """

    @overload
    async def post_required_array_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required array. Please put null and the client library should throw before the
        request is sent.

        :param body_parameter: Required.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_required_array_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Union[List[str], IO], **kwargs: Any
    ) -> None:
        """Test explicitly required array. Please put null and the client library should throw before the
        request is sent.

        :param body_parameter: Is either a list type or a IO type. Required.
        :type body_parameter: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            _json = body_parameter

        request = build_explicit_post_required_array_parameter_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_optional_array_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[List[str]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional array. Please put null.

        :param body_parameter: Default value is None.
        :type body_parameter: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = [
                    "str"  # Optional.
                ]
        """

    @overload
    async def post_optional_array_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional array. Please put null.

        :param body_parameter: Default value is None.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_optional_array_parameter(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[Union[List[str], IO]] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional array. Please put null.

        :param body_parameter: Is either a list type or a IO type. Default value is None.
        :type body_parameter: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            if body_parameter is not None:
                _json = body_parameter
            else:
                _json = None

        request = build_explicit_post_optional_array_parameter_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_required_array_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": [
                        "str"  # Required.
                    ]
                }
        """

    @overload
    async def post_required_array_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Required.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_required_array_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Union[JSON, IO], **kwargs: Any
    ) -> None:
        """Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter: Is either a model type or a IO type. Required.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            _json = body_parameter

        request = build_explicit_post_required_array_property_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def post_optional_array_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.

        :param body_parameter: Default value is None.
        :type body_parameter: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": [
                        "str"  # Optional.
                    ]
                }
        """

    @overload
    async def post_optional_array_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.

        :param body_parameter: Default value is None.
        :type body_parameter: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def post_optional_array_property(  # pylint: disable=inconsistent-return-statements
        self, body_parameter: Optional[Union[JSON, IO]] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.

        :param body_parameter: Is either a model type or a IO type. Default value is None.
        :type body_parameter: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body_parameter, (IO, bytes)):
            _content = body_parameter
        else:
            if body_parameter is not None:
                _json = body_parameter
            else:
                _json = None

        request = build_explicit_post_optional_array_property_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_required_array_header(  # pylint: disable=inconsistent-return-statements
        self, *, header_parameter: List[str], **kwargs: Any
    ) -> None:
        """Test explicitly required array. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter: Required.
        :paramtype header_parameter: list[str]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_explicit_post_required_array_header_request(
            header_parameter=header_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def post_optional_array_header(  # pylint: disable=inconsistent-return-statements
        self, *, header_parameter: Optional[List[str]] = None, **kwargs: Any
    ) -> None:
        """Test explicitly optional integer. Please put a header 'headerParameter' => null.

        :keyword header_parameter: Default value is None.
        :paramtype header_parameter: list[str]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_explicit_post_optional_array_header_request(
            header_parameter=header_parameter,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
