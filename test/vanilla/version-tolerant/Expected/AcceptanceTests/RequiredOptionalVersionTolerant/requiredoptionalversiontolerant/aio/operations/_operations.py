# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, Callable, Dict, Generic, IO, List, Optional, TypeVar
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ...operations._operations import (
    build_explicit_post_optional_array_header_request,
    build_explicit_post_optional_array_parameter_request,
    build_explicit_post_optional_array_property_request,
    build_explicit_post_optional_class_parameter_request,
    build_explicit_post_optional_class_property_request,
    build_explicit_post_optional_integer_header_request,
    build_explicit_post_optional_integer_parameter_request,
    build_explicit_post_optional_integer_property_request,
    build_explicit_post_optional_string_header_request,
    build_explicit_post_optional_string_parameter_request,
    build_explicit_post_optional_string_property_request,
    build_explicit_post_required_array_header_request,
    build_explicit_post_required_array_parameter_request,
    build_explicit_post_required_array_property_request,
    build_explicit_post_required_class_parameter_request,
    build_explicit_post_required_class_property_request,
    build_explicit_post_required_integer_header_request,
    build_explicit_post_required_integer_parameter_request,
    build_explicit_post_required_integer_property_request,
    build_explicit_post_required_string_header_request,
    build_explicit_post_required_string_parameter_request,
    build_explicit_post_required_string_property_request,
    build_explicit_put_optional_binary_body_request,
    build_explicit_put_required_binary_body_request,
    build_implicit_get_optional_global_query_request,
    build_implicit_get_required_global_path_request,
    build_implicit_get_required_global_query_request,
    build_implicit_get_required_path_request,
    build_implicit_put_optional_binary_body_request,
    build_implicit_put_optional_body_request,
    build_implicit_put_optional_header_request,
    build_implicit_put_optional_query_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ImplicitOperations:
    """ImplicitOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def get_required_path(self, path_parameter: str, **kwargs: Any) -> None:
        """Test implicitly required path parameter.

        :param path_parameter:
        :type path_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_implicit_get_required_path_request(
            path_parameter=path_parameter,
            template_url=self.get_required_path.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_required_path.metadata = {"url": "/reqopt/implicit/required/path/{pathParameter}"}  # type: ignore

    @distributed_trace_async
    async def put_optional_query(self, *, query_parameter: Optional[str] = None, **kwargs: Any) -> None:
        """Test implicitly optional query parameter.

        :keyword query_parameter:
        :paramtype query_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_implicit_put_optional_query_request(
            query_parameter=query_parameter,
            template_url=self.put_optional_query.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_optional_query.metadata = {"url": "/reqopt/implicit/optional/query"}  # type: ignore

    @distributed_trace_async
    async def put_optional_header(self, *, query_parameter: Optional[str] = None, **kwargs: Any) -> None:
        """Test implicitly optional header parameter.

        :keyword query_parameter:
        :paramtype query_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_implicit_put_optional_header_request(
            query_parameter=query_parameter,
            template_url=self.put_optional_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_optional_header.metadata = {"url": "/reqopt/implicit/optional/header"}  # type: ignore

    @distributed_trace_async
    async def put_optional_body(self, body_parameter: Optional[str] = None, **kwargs: Any) -> None:
        """Test implicitly optional body parameter.

        :param body_parameter:
        :type body_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_implicit_put_optional_body_request(
            content_type=content_type,
            json=json,
            template_url=self.put_optional_body.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_optional_body.metadata = {"url": "/reqopt/implicit/optional/body"}  # type: ignore

    @distributed_trace_async
    async def put_optional_binary_body(self, body_parameter: Optional[IO] = None, **kwargs: Any) -> None:
        """Test implicitly optional body parameter.

        :param body_parameter:
        :type body_parameter: IO
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/octet-stream")  # type: Optional[str]

        content = body_parameter

        request = build_implicit_put_optional_binary_body_request(
            content_type=content_type,
            content=content,
            template_url=self.put_optional_binary_body.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_optional_binary_body.metadata = {"url": "/reqopt/implicit/optional/binary-body"}  # type: ignore

    @distributed_trace_async
    async def get_required_global_path(self, **kwargs: Any) -> None:
        """Test implicitly required path parameter.

        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_implicit_get_required_global_path_request(
            required_global_path=self._config.required_global_path,
            template_url=self.get_required_global_path.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_required_global_path.metadata = {"url": "/reqopt/global/required/path/{required-global-path}"}  # type: ignore

    @distributed_trace_async
    async def get_required_global_query(self, **kwargs: Any) -> None:
        """Test implicitly required query parameter.

        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_implicit_get_required_global_query_request(
            required_global_query=self._config.required_global_query,
            template_url=self.get_required_global_query.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_required_global_query.metadata = {"url": "/reqopt/global/required/query"}  # type: ignore

    @distributed_trace_async
    async def get_optional_global_query(self, **kwargs: Any) -> None:
        """Test implicitly optional query parameter.

        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_implicit_get_optional_global_query_request(
            optional_global_query=self._config.optional_global_query,
            template_url=self.get_optional_global_query.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    get_optional_global_query.metadata = {"url": "/reqopt/global/optional/query"}  # type: ignore


class ExplicitOperations:
    """ExplicitOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def put_optional_binary_body(self, body_parameter: Optional[IO] = None, **kwargs: Any) -> None:
        """Test explicitly optional body parameter.

        :param body_parameter:
        :type body_parameter: IO
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/octet-stream")  # type: Optional[str]

        content = body_parameter

        request = build_explicit_put_optional_binary_body_request(
            content_type=content_type,
            content=content,
            template_url=self.put_optional_binary_body.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_optional_binary_body.metadata = {"url": "/reqopt/explicit/optional/binary-body"}  # type: ignore

    @distributed_trace_async
    async def put_required_binary_body(self, body_parameter: IO, **kwargs: Any) -> None:
        """Test explicitly required body parameter.

        :param body_parameter:
        :type body_parameter: IO
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/octet-stream")  # type: Optional[str]

        content = body_parameter

        request = build_explicit_put_required_binary_body_request(
            content_type=content_type,
            content=content,
            template_url=self.put_required_binary_body.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_required_binary_body.metadata = {"url": "/reqopt/explicit/required/binary-body"}  # type: ignore

    @distributed_trace_async
    async def post_required_integer_parameter(self, body_parameter: int, **kwargs: Any) -> None:
        """Test explicitly required integer. Please put null and the client library should throw before
        the request is sent.

        :param body_parameter:
        :type body_parameter: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_explicit_post_required_integer_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_integer_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_integer_parameter.metadata = {"url": "/reqopt/requied/integer/parameter"}  # type: ignore

    @distributed_trace_async
    async def post_optional_integer_parameter(self, body_parameter: Optional[int] = None, **kwargs: Any) -> None:
        """Test explicitly optional integer. Please put null.

        :param body_parameter:
        :type body_parameter: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_explicit_post_optional_integer_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_integer_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_integer_parameter.metadata = {"url": "/reqopt/optional/integer/parameter"}  # type: ignore

    @distributed_trace_async
    async def post_required_integer_property(self, body_parameter: Any, **kwargs: Any) -> None:
        """Test explicitly required integer. Please put a valid int-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": 0  # Required.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_explicit_post_required_integer_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_integer_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_integer_property.metadata = {"url": "/reqopt/requied/integer/property"}  # type: ignore

    @distributed_trace_async
    async def post_optional_integer_property(self, body_parameter: Any = None, **kwargs: Any) -> None:
        """Test explicitly optional integer. Please put a valid int-wrapper with 'value' = null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": 0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_explicit_post_optional_integer_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_integer_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_integer_property.metadata = {"url": "/reqopt/optional/integer/property"}  # type: ignore

    @distributed_trace_async
    async def post_required_integer_header(self, *, header_parameter: int, **kwargs: Any) -> None:
        """Test explicitly required integer. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter:
        :paramtype header_parameter: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_explicit_post_required_integer_header_request(
            header_parameter=header_parameter,
            template_url=self.post_required_integer_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_integer_header.metadata = {"url": "/reqopt/requied/integer/header"}  # type: ignore

    @distributed_trace_async
    async def post_optional_integer_header(self, *, header_parameter: Optional[int] = None, **kwargs: Any) -> None:
        """Test explicitly optional integer. Please put a header 'headerParameter' => null.

        :keyword header_parameter:
        :paramtype header_parameter: int
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_explicit_post_optional_integer_header_request(
            header_parameter=header_parameter,
            template_url=self.post_optional_integer_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_integer_header.metadata = {"url": "/reqopt/optional/integer/header"}  # type: ignore

    @distributed_trace_async
    async def post_required_string_parameter(self, body_parameter: str, **kwargs: Any) -> None:
        """Test explicitly required string. Please put null and the client library should throw before the
        request is sent.

        :param body_parameter:
        :type body_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_explicit_post_required_string_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_string_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_string_parameter.metadata = {"url": "/reqopt/requied/string/parameter"}  # type: ignore

    @distributed_trace_async
    async def post_optional_string_parameter(self, body_parameter: Optional[str] = None, **kwargs: Any) -> None:
        """Test explicitly optional string. Please put null.

        :param body_parameter:
        :type body_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_explicit_post_optional_string_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_string_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_string_parameter.metadata = {"url": "/reqopt/optional/string/parameter"}  # type: ignore

    @distributed_trace_async
    async def post_required_string_property(self, body_parameter: Any, **kwargs: Any) -> None:
        """Test explicitly required string. Please put a valid string-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": "str"  # Required.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_explicit_post_required_string_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_string_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_string_property.metadata = {"url": "/reqopt/requied/string/property"}  # type: ignore

    @distributed_trace_async
    async def post_optional_string_property(self, body_parameter: Any = None, **kwargs: Any) -> None:
        """Test explicitly optional integer. Please put a valid string-wrapper with 'value' = null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_explicit_post_optional_string_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_string_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_string_property.metadata = {"url": "/reqopt/optional/string/property"}  # type: ignore

    @distributed_trace_async
    async def post_required_string_header(self, *, header_parameter: str, **kwargs: Any) -> None:
        """Test explicitly required string. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter:
        :paramtype header_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_explicit_post_required_string_header_request(
            header_parameter=header_parameter,
            template_url=self.post_required_string_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_string_header.metadata = {"url": "/reqopt/requied/string/header"}  # type: ignore

    @distributed_trace_async
    async def post_optional_string_header(self, *, body_parameter: Optional[str] = None, **kwargs: Any) -> None:
        """Test explicitly optional string. Please put a header 'headerParameter' => null.

        :keyword body_parameter:
        :paramtype body_parameter: str
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_explicit_post_optional_string_header_request(
            body_parameter=body_parameter,
            template_url=self.post_optional_string_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_string_header.metadata = {"url": "/reqopt/optional/string/header"}  # type: ignore

    @distributed_trace_async
    async def post_required_class_parameter(self, body_parameter: Any, **kwargs: Any) -> None:
        """Test explicitly required complex object. Please put null and the client library should throw
        before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "id": 0,  # Required.
                    "name": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_explicit_post_required_class_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_class_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_class_parameter.metadata = {"url": "/reqopt/requied/class/parameter"}  # type: ignore

    @distributed_trace_async
    async def post_optional_class_parameter(self, body_parameter: Any = None, **kwargs: Any) -> None:
        """Test explicitly optional complex object. Please put null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "id": 0,  # Required.
                    "name": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_explicit_post_optional_class_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_class_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_class_parameter.metadata = {"url": "/reqopt/optional/class/parameter"}  # type: ignore

    @distributed_trace_async
    async def post_required_class_property(self, body_parameter: Any, **kwargs: Any) -> None:
        """Test explicitly required complex object. Please put a valid class-wrapper with 'value' = null
        and the client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": {
                        "id": 0,  # Required.
                        "name": "str"  # Optional. Required.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_explicit_post_required_class_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_class_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_class_property.metadata = {"url": "/reqopt/requied/class/property"}  # type: ignore

    @distributed_trace_async
    async def post_optional_class_property(self, body_parameter: Any = None, **kwargs: Any) -> None:
        """Test explicitly optional complex object. Please put a valid class-wrapper with 'value' = null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": {
                        "id": 0,  # Required.
                        "name": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_explicit_post_optional_class_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_class_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_class_property.metadata = {"url": "/reqopt/optional/class/property"}  # type: ignore

    @distributed_trace_async
    async def post_required_array_parameter(self, body_parameter: List[str], **kwargs: Any) -> None:
        """Test explicitly required array. Please put null and the client library should throw before the
        request is sent.

        :param body_parameter:
        :type body_parameter: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = [
                    "str"  # Optional.
                ]
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_explicit_post_required_array_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_array_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_array_parameter.metadata = {"url": "/reqopt/requied/array/parameter"}  # type: ignore

    @distributed_trace_async
    async def post_optional_array_parameter(self, body_parameter: Optional[List[str]] = None, **kwargs: Any) -> None:
        """Test explicitly optional array. Please put null.

        :param body_parameter:
        :type body_parameter: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = [
                    "str"  # Optional.
                ]
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_explicit_post_optional_array_parameter_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_array_parameter.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_array_parameter.metadata = {"url": "/reqopt/optional/array/parameter"}  # type: ignore

    @distributed_trace_async
    async def post_required_array_property(self, body_parameter: Any, **kwargs: Any) -> None:
        """Test explicitly required array. Please put a valid array-wrapper with 'value' = null and the
        client library should throw before the request is sent.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": [
                        "str"  # Required.
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = body_parameter

        request = build_explicit_post_required_array_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_required_array_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_array_property.metadata = {"url": "/reqopt/requied/array/property"}  # type: ignore

    @distributed_trace_async
    async def post_optional_array_property(self, body_parameter: Any = None, **kwargs: Any) -> None:
        """Test explicitly optional array. Please put a valid array-wrapper with 'value' = null.

        :param body_parameter:
        :type body_parameter: Any
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_parameter = {
                    "value": [
                        "str"  # Optional.
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        if body_parameter is not None:
            json = body_parameter
        else:
            json = None

        request = build_explicit_post_optional_array_property_request(
            content_type=content_type,
            json=json,
            template_url=self.post_optional_array_property.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_array_property.metadata = {"url": "/reqopt/optional/array/property"}  # type: ignore

    @distributed_trace_async
    async def post_required_array_header(self, *, header_parameter: List[str], **kwargs: Any) -> None:
        """Test explicitly required array. Please put a header 'headerParameter' => null and the client
        library should throw before the request is sent.

        :keyword header_parameter:
        :paramtype header_parameter: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_explicit_post_required_array_header_request(
            header_parameter=header_parameter,
            template_url=self.post_required_array_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_required_array_header.metadata = {"url": "/reqopt/requied/array/header"}  # type: ignore

    @distributed_trace_async
    async def post_optional_array_header(self, *, header_parameter: Optional[List[str]] = None, **kwargs: Any) -> None:
        """Test explicitly optional integer. Please put a header 'headerParameter' => null.

        :keyword header_parameter:
        :paramtype header_parameter: list[str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_explicit_post_optional_array_header_request(
            header_parameter=header_parameter,
            template_url=self.post_optional_array_header.metadata["url"],
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client.send_request(
            request, stream=False, _return_pipeline_response=True, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    post_optional_array_header.metadata = {"url": "/reqopt/optional/array/header"}  # type: ignore
