# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
import functools
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ...operations._operations import (
    build_dictionary_get_array_empty_request,
    build_dictionary_get_array_item_empty_request,
    build_dictionary_get_array_item_null_request,
    build_dictionary_get_array_null_request,
    build_dictionary_get_array_valid_request,
    build_dictionary_get_base64_url_request,
    build_dictionary_get_boolean_invalid_null_request,
    build_dictionary_get_boolean_invalid_string_request,
    build_dictionary_get_boolean_tfft_request,
    build_dictionary_get_byte_invalid_null_request,
    build_dictionary_get_byte_valid_request,
    build_dictionary_get_complex_empty_request,
    build_dictionary_get_complex_item_empty_request,
    build_dictionary_get_complex_item_null_request,
    build_dictionary_get_complex_null_request,
    build_dictionary_get_complex_valid_request,
    build_dictionary_get_date_invalid_chars_request,
    build_dictionary_get_date_invalid_null_request,
    build_dictionary_get_date_time_invalid_chars_request,
    build_dictionary_get_date_time_invalid_null_request,
    build_dictionary_get_date_time_rfc1123_valid_request,
    build_dictionary_get_date_time_valid_request,
    build_dictionary_get_date_valid_request,
    build_dictionary_get_dictionary_empty_request,
    build_dictionary_get_dictionary_item_empty_request,
    build_dictionary_get_dictionary_item_null_request,
    build_dictionary_get_dictionary_null_request,
    build_dictionary_get_dictionary_valid_request,
    build_dictionary_get_double_invalid_null_request,
    build_dictionary_get_double_invalid_string_request,
    build_dictionary_get_double_valid_request,
    build_dictionary_get_duration_valid_request,
    build_dictionary_get_empty_request,
    build_dictionary_get_empty_string_key_request,
    build_dictionary_get_float_invalid_null_request,
    build_dictionary_get_float_invalid_string_request,
    build_dictionary_get_float_valid_request,
    build_dictionary_get_int_invalid_null_request,
    build_dictionary_get_int_invalid_string_request,
    build_dictionary_get_integer_valid_request,
    build_dictionary_get_invalid_request,
    build_dictionary_get_long_invalid_null_request,
    build_dictionary_get_long_invalid_string_request,
    build_dictionary_get_long_valid_request,
    build_dictionary_get_null_key_request,
    build_dictionary_get_null_request,
    build_dictionary_get_null_value_request,
    build_dictionary_get_string_valid_request,
    build_dictionary_get_string_with_invalid_request,
    build_dictionary_get_string_with_null_request,
    build_dictionary_put_array_valid_request,
    build_dictionary_put_boolean_tfft_request,
    build_dictionary_put_byte_valid_request,
    build_dictionary_put_complex_valid_request,
    build_dictionary_put_date_time_rfc1123_valid_request,
    build_dictionary_put_date_time_valid_request,
    build_dictionary_put_date_valid_request,
    build_dictionary_put_dictionary_valid_request,
    build_dictionary_put_double_valid_request,
    build_dictionary_put_duration_valid_request,
    build_dictionary_put_empty_request,
    build_dictionary_put_float_valid_request,
    build_dictionary_put_integer_valid_request,
    build_dictionary_put_long_valid_request,
    build_dictionary_put_string_valid_request,
)

T = TypeVar("T")
JSONType = Any
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class DictionaryOperations:
    """DictionaryOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def get_null(self, **kwargs: Any) -> Dict[str, int]:
        """Get null dictionary value.

        :return: dict mapping str to int
        :rtype: dict[str, int]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_null.metadata = {"url": "/dictionary/null"}  # type: ignore

    @distributed_trace_async
    async def get_empty(self, **kwargs: Any) -> Dict[str, int]:
        """Get empty dictionary value {}.

        :return: dict mapping str to int
        :rtype: dict[str, int]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_empty_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty.metadata = {"url": "/dictionary/empty"}  # type: ignore

    @distributed_trace_async
    async def put_empty(self, array_body: Dict[str, str], **kwargs: Any) -> None:
        """Set dictionary value empty {}.

        :param array_body:
        :type array_body: dict[str, str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_empty_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty.metadata = {"url": "/dictionary/empty"}  # type: ignore

    @distributed_trace_async
    async def get_null_value(self, **kwargs: Any) -> Dict[str, str]:
        """Get Dictionary with null value.

        :return: dict mapping str to str
        :rtype: dict[str, str]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_null_value_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_null_value.metadata = {"url": "/dictionary/nullvalue"}  # type: ignore

    @distributed_trace_async
    async def get_null_key(self, **kwargs: Any) -> Dict[str, str]:
        """Get Dictionary with null key.

        :return: dict mapping str to str
        :rtype: dict[str, str]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_null_key_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_null_key.metadata = {"url": "/dictionary/nullkey"}  # type: ignore

    @distributed_trace_async
    async def get_empty_string_key(self, **kwargs: Any) -> Dict[str, str]:
        """Get Dictionary with key as empty string.

        :return: dict mapping str to str
        :rtype: dict[str, str]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_empty_string_key_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_string_key.metadata = {"url": "/dictionary/keyemptystring"}  # type: ignore

    @distributed_trace_async
    async def get_invalid(self, **kwargs: Any) -> Dict[str, str]:
        """Get invalid Dictionary value.

        :return: dict mapping str to str
        :rtype: dict[str, str]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_invalid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_invalid.metadata = {"url": "/dictionary/invalid"}  # type: ignore

    @distributed_trace_async
    async def get_boolean_tfft(self, **kwargs: Any) -> Dict[str, bool]:
        """Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }.

        :return: dict mapping str to bool
        :rtype: dict[str, bool]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": bool  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bool]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_boolean_tfft_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_tfft.metadata = {"url": "/dictionary/prim/boolean/tfft"}  # type: ignore

    @distributed_trace_async
    async def put_boolean_tfft(self, array_body: Dict[str, bool], **kwargs: Any) -> None:
        """Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }.

        :param array_body:
        :type array_body: dict[str, bool]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": bool  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_boolean_tfft_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_boolean_tfft.metadata = {"url": "/dictionary/prim/boolean/tfft"}  # type: ignore

    @distributed_trace_async
    async def get_boolean_invalid_null(self, **kwargs: Any) -> Dict[str, bool]:
        """Get boolean dictionary value {"0": true, "1": null, "2": false }.

        :return: dict mapping str to bool
        :rtype: dict[str, bool]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": bool  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bool]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_boolean_invalid_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_invalid_null.metadata = {"url": "/dictionary/prim/boolean/true.null.false"}  # type: ignore

    @distributed_trace_async
    async def get_boolean_invalid_string(self, **kwargs: Any) -> Dict[str, bool]:
        """Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'.

        :return: dict mapping str to bool
        :rtype: dict[str, bool]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": bool  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bool]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_boolean_invalid_string_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_invalid_string.metadata = {"url": "/dictionary/prim/boolean/true.boolean.false"}  # type: ignore

    @distributed_trace_async
    async def get_integer_valid(self, **kwargs: Any) -> Dict[str, int]:
        """Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.

        :return: dict mapping str to int
        :rtype: dict[str, int]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_integer_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_integer_valid.metadata = {"url": "/dictionary/prim/integer/1.-1.3.300"}  # type: ignore

    @distributed_trace_async
    async def put_integer_valid(self, array_body: Dict[str, int], **kwargs: Any) -> None:
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body:
        :type array_body: dict[str, int]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": 0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_integer_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_integer_valid.metadata = {"url": "/dictionary/prim/integer/1.-1.3.300"}  # type: ignore

    @distributed_trace_async
    async def get_int_invalid_null(self, **kwargs: Any) -> Dict[str, int]:
        """Get integer dictionary value {"0": 1, "1": null, "2": 0}.

        :return: dict mapping str to int
        :rtype: dict[str, int]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_int_invalid_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_int_invalid_null.metadata = {"url": "/dictionary/prim/integer/1.null.zero"}  # type: ignore

    @distributed_trace_async
    async def get_int_invalid_string(self, **kwargs: Any) -> Dict[str, int]:
        """Get integer dictionary value {"0": 1, "1": "integer", "2": 0}.

        :return: dict mapping str to int
        :rtype: dict[str, int]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_int_invalid_string_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_int_invalid_string.metadata = {"url": "/dictionary/prim/integer/1.integer.0"}  # type: ignore

    @distributed_trace_async
    async def get_long_valid(self, **kwargs: Any) -> Dict[str, int]:
        """Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.

        :return: dict mapping str to long
        :rtype: dict[str, long]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_long_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_valid.metadata = {"url": "/dictionary/prim/long/1.-1.3.300"}  # type: ignore

    @distributed_trace_async
    async def put_long_valid(self, array_body: Dict[str, int], **kwargs: Any) -> None:
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body:
        :type array_body: dict[str, long]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_long_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_long_valid.metadata = {"url": "/dictionary/prim/long/1.-1.3.300"}  # type: ignore

    @distributed_trace_async
    async def get_long_invalid_null(self, **kwargs: Any) -> Dict[str, int]:
        """Get long dictionary value {"0": 1, "1": null, "2": 0}.

        :return: dict mapping str to long
        :rtype: dict[str, long]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_long_invalid_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_invalid_null.metadata = {"url": "/dictionary/prim/long/1.null.zero"}  # type: ignore

    @distributed_trace_async
    async def get_long_invalid_string(self, **kwargs: Any) -> Dict[str, int]:
        """Get long dictionary value {"0": 1, "1": "integer", "2": 0}.

        :return: dict mapping str to long
        :rtype: dict[str, long]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_long_invalid_string_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_invalid_string.metadata = {"url": "/dictionary/prim/long/1.integer.0"}  # type: ignore

    @distributed_trace_async
    async def get_float_valid(self, **kwargs: Any) -> Dict[str, float]:
        """Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :return: dict mapping str to float
        :rtype: dict[str, float]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_float_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_valid.metadata = {"url": "/dictionary/prim/float/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def put_float_valid(self, array_body: Dict[str, float], **kwargs: Any) -> None:
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body:
        :type array_body: dict[str, float]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_float_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_float_valid.metadata = {"url": "/dictionary/prim/float/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def get_float_invalid_null(self, **kwargs: Any) -> Dict[str, float]:
        """Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.

        :return: dict mapping str to float
        :rtype: dict[str, float]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_float_invalid_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_invalid_null.metadata = {"url": "/dictionary/prim/float/0.0-null-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def get_float_invalid_string(self, **kwargs: Any) -> Dict[str, float]:
        """Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.

        :return: dict mapping str to float
        :rtype: dict[str, float]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_float_invalid_string_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_invalid_string.metadata = {"url": "/dictionary/prim/float/1.number.0"}  # type: ignore

    @distributed_trace_async
    async def get_double_valid(self, **kwargs: Any) -> Dict[str, float]:
        """Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :return: dict mapping str to float
        :rtype: dict[str, float]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_double_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_valid.metadata = {"url": "/dictionary/prim/double/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def put_double_valid(self, array_body: Dict[str, float], **kwargs: Any) -> None:
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body:
        :type array_body: dict[str, float]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_double_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_double_valid.metadata = {"url": "/dictionary/prim/double/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def get_double_invalid_null(self, **kwargs: Any) -> Dict[str, float]:
        """Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.

        :return: dict mapping str to float
        :rtype: dict[str, float]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_double_invalid_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_invalid_null.metadata = {"url": "/dictionary/prim/double/0.0-null-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def get_double_invalid_string(self, **kwargs: Any) -> Dict[str, float]:
        """Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.

        :return: dict mapping str to float
        :rtype: dict[str, float]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": 0.0  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_double_invalid_string_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_invalid_string.metadata = {"url": "/dictionary/prim/double/1.number.0"}  # type: ignore

    @distributed_trace_async
    async def get_string_valid(self, **kwargs: Any) -> Dict[str, str]:
        """Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.

        :return: dict mapping str to str
        :rtype: dict[str, str]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_string_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_valid.metadata = {"url": "/dictionary/prim/string/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace_async
    async def put_string_valid(self, array_body: Dict[str, str], **kwargs: Any) -> None:
        """Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.

        :param array_body:
        :type array_body: dict[str, str]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_string_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_string_valid.metadata = {"url": "/dictionary/prim/string/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace_async
    async def get_string_with_null(self, **kwargs: Any) -> Dict[str, str]:
        """Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}.

        :return: dict mapping str to str
        :rtype: dict[str, str]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_string_with_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_with_null.metadata = {"url": "/dictionary/prim/string/foo.null.foo2"}  # type: ignore

    @distributed_trace_async
    async def get_string_with_invalid(self, **kwargs: Any) -> Dict[str, str]:
        """Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}.

        :return: dict mapping str to str
        :rtype: dict[str, str]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "str"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_string_with_invalid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_with_invalid.metadata = {"url": "/dictionary/prim/string/foo.123.foo2"}  # type: ignore

    @distributed_trace_async
    async def get_date_valid(self, **kwargs: Any) -> Dict[str, datetime.date]:
        """Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.

        :return: dict mapping str to date
        :rtype: dict[str, ~datetime.date]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "2020-02-20"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.date]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_date_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_valid.metadata = {"url": "/dictionary/prim/date/valid"}  # type: ignore

    @distributed_trace_async
    async def put_date_valid(self, array_body: Dict[str, datetime.date], **kwargs: Any) -> None:
        """Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.

        :param array_body:
        :type array_body: dict[str, ~datetime.date]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": "2020-02-20"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_date_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_valid.metadata = {"url": "/dictionary/prim/date/valid"}  # type: ignore

    @distributed_trace_async
    async def get_date_invalid_null(self, **kwargs: Any) -> Dict[str, datetime.date]:
        """Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}.

        :return: dict mapping str to date
        :rtype: dict[str, ~datetime.date]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "2020-02-20"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.date]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_date_invalid_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_invalid_null.metadata = {"url": "/dictionary/prim/date/invalidnull"}  # type: ignore

    @distributed_trace_async
    async def get_date_invalid_chars(self, **kwargs: Any) -> Dict[str, datetime.date]:
        """Get date dictionary value {"0": "2011-03-22", "1": "date"}.

        :return: dict mapping str to date
        :rtype: dict[str, ~datetime.date]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "2020-02-20"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.date]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_date_invalid_chars_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_invalid_chars.metadata = {"url": "/dictionary/prim/date/invalidchars"}  # type: ignore

    @distributed_trace_async
    async def get_date_time_valid(self, **kwargs: Any) -> Dict[str, datetime.datetime]:
        """Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00",
        "2": "1492-10-12T10:15:01-08:00"}.

        :return: dict mapping str to datetime
        :rtype: dict[str, ~datetime.datetime]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "2020-02-20 00:00:00"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.datetime]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_date_time_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_valid.metadata = {"url": "/dictionary/prim/date-time/valid"}  # type: ignore

    @distributed_trace_async
    async def put_date_time_valid(self, array_body: Dict[str, datetime.datetime], **kwargs: Any) -> None:
        """Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
        "1492-10-12T10:15:01-08:00"}.

        :param array_body:
        :type array_body: dict[str, ~datetime.datetime]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": "2020-02-20 00:00:00"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_date_time_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_time_valid.metadata = {"url": "/dictionary/prim/date-time/valid"}  # type: ignore

    @distributed_trace_async
    async def get_date_time_invalid_null(self, **kwargs: Any) -> Dict[str, datetime.datetime]:
        """Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}.

        :return: dict mapping str to datetime
        :rtype: dict[str, ~datetime.datetime]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "2020-02-20 00:00:00"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.datetime]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_date_time_invalid_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_invalid_null.metadata = {"url": "/dictionary/prim/date-time/invalidnull"}  # type: ignore

    @distributed_trace_async
    async def get_date_time_invalid_chars(self, **kwargs: Any) -> Dict[str, datetime.datetime]:
        """Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}.

        :return: dict mapping str to datetime
        :rtype: dict[str, ~datetime.datetime]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "2020-02-20 00:00:00"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.datetime]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_date_time_invalid_chars_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_invalid_chars.metadata = {"url": "/dictionary/prim/date-time/invalidchars"}  # type: ignore

    @distributed_trace_async
    async def get_date_time_rfc1123_valid(self, **kwargs: Any) -> Dict[str, datetime.datetime]:
        """Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan
        1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.

        :return: dict mapping str to datetime
        :rtype: dict[str, ~datetime.datetime]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "2020-02-20 00:00:00"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.datetime]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_date_time_rfc1123_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_rfc1123_valid.metadata = {"url": "/dictionary/prim/date-time-rfc1123/valid"}  # type: ignore

    @distributed_trace_async
    async def put_date_time_rfc1123_valid(self, array_body: Dict[str, datetime.datetime], **kwargs: Any) -> None:
        """Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980
        00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.

        :param array_body:
        :type array_body: dict[str, ~datetime.datetime]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": "2020-02-20 00:00:00"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_date_time_rfc1123_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_time_rfc1123_valid.metadata = {"url": "/dictionary/prim/date-time-rfc1123/valid"}  # type: ignore

    @distributed_trace_async
    async def get_duration_valid(self, **kwargs: Any) -> Dict[str, datetime.timedelta]:
        """Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.

        :return: dict mapping str to timedelta
        :rtype: dict[str, ~datetime.timedelta]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": "1 day, 0:00:00"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.timedelta]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_duration_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_duration_valid.metadata = {"url": "/dictionary/prim/duration/valid"}  # type: ignore

    @distributed_trace_async
    async def put_duration_valid(self, array_body: Dict[str, datetime.timedelta], **kwargs: Any) -> None:
        """Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.

        :param array_body:
        :type array_body: dict[str, ~datetime.timedelta]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": "1 day, 0:00:00"  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_duration_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_duration_valid.metadata = {"url": "/dictionary/prim/duration/valid"}  # type: ignore

    @distributed_trace_async
    async def get_byte_valid(self, **kwargs: Any) -> Dict[str, bytearray]:
        """Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)}
        with each item encoded in base64.

        :return: dict mapping str to bytearray
        :rtype: dict[str, bytearray]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": bytearray("bytearray", encoding="utf-8")  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bytearray]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_byte_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_byte_valid.metadata = {"url": "/dictionary/prim/byte/valid"}  # type: ignore

    @distributed_trace_async
    async def put_byte_valid(self, array_body: Dict[str, bytearray], **kwargs: Any) -> None:
        """Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)}
        with each elementencoded in base 64.

        :param array_body:
        :type array_body: dict[str, bytearray]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": bytearray("bytearray", encoding="utf-8")  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_byte_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_byte_valid.metadata = {"url": "/dictionary/prim/byte/valid"}  # type: ignore

    @distributed_trace_async
    async def get_byte_invalid_null(self, **kwargs: Any) -> Dict[str, bytearray]:
        """Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64
        encoded.

        :return: dict mapping str to bytearray
        :rtype: dict[str, bytearray]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": bytearray("bytearray", encoding="utf-8")  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bytearray]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_byte_invalid_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_byte_invalid_null.metadata = {"url": "/dictionary/prim/byte/invalidnull"}  # type: ignore

    @distributed_trace_async
    async def get_base64_url(self, **kwargs: Any) -> Dict[str, bytes]:
        """Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test
        string", "2": "Lorem ipsum"}.

        :return: dict mapping str to bytes
        :rtype: dict[str, bytes]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": bytes("bytes", encoding="utf-8")  # Optional.
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bytes]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_base64_url_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_base64_url.metadata = {"url": "/dictionary/prim/base64url/valid"}  # type: ignore

    @distributed_trace_async
    async def get_complex_null(self, **kwargs: Any) -> Optional[Dict[str, JSONType]]:
        """Get dictionary of complex type null value.

        :return: dict mapping str to JSON object or None
        :rtype: dict[str, JSONType] or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[Dict[str, JSONType]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_complex_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_null.metadata = {"url": "/dictionary/complex/null"}  # type: ignore

    @distributed_trace_async
    async def get_complex_empty(self, **kwargs: Any) -> Dict[str, JSONType]:
        """Get empty dictionary of complex type {}.

        :return: dict mapping str to JSON object
        :rtype: dict[str, JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, JSONType]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_complex_empty_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_empty.metadata = {"url": "/dictionary/complex/empty"}  # type: ignore

    @distributed_trace_async
    async def get_complex_item_null(self, **kwargs: Any) -> Dict[str, JSONType]:
        """Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null,
        "2": {"integer": 5, "string": "6"}}.

        :return: dict mapping str to JSON object
        :rtype: dict[str, JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, JSONType]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_complex_item_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_item_null.metadata = {"url": "/dictionary/complex/itemnull"}  # type: ignore

    @distributed_trace_async
    async def get_complex_item_empty(self, **kwargs: Any) -> Dict[str, JSONType]:
        """Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {},
        "2": {"integer": 5, "string": "6"}}.

        :return: dict mapping str to JSON object
        :rtype: dict[str, JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, JSONType]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_complex_item_empty_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_item_empty.metadata = {"url": "/dictionary/complex/itemempty"}  # type: ignore

    @distributed_trace_async
    async def get_complex_valid(self, **kwargs: Any) -> Dict[str, JSONType]:
        """Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3,
        "string": "4"}, "2": {"integer": 5, "string": "6"}}.

        :return: dict mapping str to JSON object
        :rtype: dict[str, JSONType]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, JSONType]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_complex_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_valid.metadata = {"url": "/dictionary/complex/valid"}  # type: ignore

    @distributed_trace_async
    async def put_complex_valid(self, array_body: Dict[str, JSONType], **kwargs: Any) -> None:
        """Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1":
        {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.

        :param array_body:
        :type array_body: dict[str, JSONType]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": {
                        "integer": 0,  # Optional.
                        "string": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_complex_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_complex_valid.metadata = {"url": "/dictionary/complex/valid"}  # type: ignore

    @distributed_trace_async
    async def get_array_null(self, **kwargs: Any) -> Optional[Dict[str, List[str]]]:
        """Get a null array.

        :return: dict mapping str to list of str or None
        :rtype: dict[str, list[str]] or None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": [
                        "str"  # Optional.
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[Dict[str, List[str]]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_array_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_null.metadata = {"url": "/dictionary/array/null"}  # type: ignore

    @distributed_trace_async
    async def get_array_empty(self, **kwargs: Any) -> Dict[str, List[str]]:
        """Get an empty dictionary {}.

        :return: dict mapping str to list of str
        :rtype: dict[str, list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": [
                        "str"  # Optional.
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_array_empty_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_empty.metadata = {"url": "/dictionary/array/empty"}  # type: ignore

    @distributed_trace_async
    async def get_array_item_null(self, **kwargs: Any) -> Dict[str, List[str]]:
        """Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}.

        :return: dict mapping str to list of str
        :rtype: dict[str, list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": [
                        "str"  # Optional.
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_array_item_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_item_null.metadata = {"url": "/dictionary/array/itemnull"}  # type: ignore

    @distributed_trace_async
    async def get_array_item_empty(self, **kwargs: Any) -> Dict[str, List[str]]:
        """Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}.

        :return: dict mapping str to list of str
        :rtype: dict[str, list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": [
                        "str"  # Optional.
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_array_item_empty_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_item_empty.metadata = {"url": "/dictionary/array/itemempty"}  # type: ignore

    @distributed_trace_async
    async def get_array_valid(self, **kwargs: Any) -> Dict[str, List[str]]:
        """Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8",
        "9"]}.

        :return: dict mapping str to list of str
        :rtype: dict[str, list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": [
                        "str"  # Optional.
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_array_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_valid.metadata = {"url": "/dictionary/array/valid"}  # type: ignore

    @distributed_trace_async
    async def put_array_valid(self, array_body: Dict[str, List[str]], **kwargs: Any) -> None:
        """Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8",
        "9"]}.

        :param array_body:
        :type array_body: dict[str, list[str]]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": [
                        "str"  # Optional.
                    ]
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_array_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_array_valid.metadata = {"url": "/dictionary/array/valid"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_null(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries with value null.

        :return: dict mapping str to dict mapping str to str
        :rtype: dict[str, dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "str": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_dictionary_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_null.metadata = {"url": "/dictionary/dictionary/null"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_empty(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries of type <string, string> with value {}.

        :return: dict mapping str to dict mapping str to str
        :rtype: dict[str, dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "str": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_dictionary_empty_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_empty.metadata = {"url": "/dictionary/dictionary/empty"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_item_null(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}.

        :return: dict mapping str to dict mapping str to str
        :rtype: dict[str, dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "str": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_dictionary_item_null_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_item_null.metadata = {"url": "/dictionary/dictionary/itemnull"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_item_empty(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.

        :return: dict mapping str to dict mapping str to str
        :rtype: dict[str, dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "str": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_dictionary_item_empty_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_item_empty.metadata = {"url": "/dictionary/dictionary/itemempty"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_valid(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8":
        "eight", "9": "nine"}}.

        :return: dict mapping str to dict mapping str to str
        :rtype: dict[str, dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response.json() == {
                    "str": {
                        "str": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_dictionary_get_dictionary_valid_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_valid.metadata = {"url": "/dictionary/dictionary/valid"}  # type: ignore

    @distributed_trace_async
    async def put_dictionary_valid(self, array_body: Dict[str, Dict[str, str]], **kwargs: Any) -> None:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8":
        "eight", "9": "nine"}}.

        :param array_body:
        :type array_body: dict[str, dict[str, str]]
        :return: None
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                array_body = {
                    "str": {
                        "str": "str"  # Optional.
                    }
                }
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _json = array_body

        request = build_dictionary_put_dictionary_valid_request(
            content_type=content_type,
            json=_json,
        )
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_dictionary_valid.metadata = {"url": "/dictionary/dictionary/valid"}  # type: ignore
