# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
import functools
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace

from .. import models as _models
from ._array_operations import (
    build_get_array_empty_request,
    build_get_array_item_empty_request,
    build_get_array_item_null_request,
    build_get_array_null_request,
    build_get_array_valid_request,
    build_get_base64_url_request,
    build_get_boolean_invalid_null_request,
    build_get_boolean_invalid_string_request,
    build_get_boolean_tfft_request,
    build_get_byte_invalid_null_request,
    build_get_byte_valid_request,
    build_get_complex_empty_request,
    build_get_complex_item_empty_request,
    build_get_complex_item_null_request,
    build_get_complex_null_request,
    build_get_complex_valid_request,
    build_get_date_invalid_chars_request,
    build_get_date_invalid_null_request,
    build_get_date_time_invalid_chars_request,
    build_get_date_time_invalid_null_request,
    build_get_date_time_rfc1123_valid_request,
    build_get_date_time_valid_request,
    build_get_date_valid_request,
    build_get_dictionary_empty_request,
    build_get_dictionary_item_empty_request,
    build_get_dictionary_item_null_request,
    build_get_dictionary_null_request,
    build_get_dictionary_valid_request,
    build_get_double_invalid_null_request,
    build_get_double_invalid_string_request,
    build_get_double_valid_request,
    build_get_duration_valid_request,
    build_get_empty_request,
    build_get_enum_valid_request,
    build_get_float_invalid_null_request,
    build_get_float_invalid_string_request,
    build_get_float_valid_request,
    build_get_int_invalid_null_request,
    build_get_int_invalid_string_request,
    build_get_integer_valid_request,
    build_get_invalid_request,
    build_get_long_invalid_null_request,
    build_get_long_invalid_string_request,
    build_get_long_valid_request,
    build_get_null_request,
    build_get_string_enum_valid_request,
    build_get_string_valid_request,
    build_get_string_with_invalid_request,
    build_get_string_with_null_request,
    build_get_uuid_invalid_chars_request,
    build_get_uuid_valid_request,
    build_put_array_valid_request,
    build_put_boolean_tfft_request,
    build_put_byte_valid_request,
    build_put_complex_valid_request,
    build_put_date_time_rfc1123_valid_request,
    build_put_date_time_valid_request,
    build_put_date_valid_request,
    build_put_dictionary_valid_request,
    build_put_double_valid_request,
    build_put_duration_valid_request,
    build_put_empty_request,
    build_put_enum_valid_request,
    build_put_float_valid_request,
    build_put_integer_valid_request,
    build_put_long_valid_request,
    build_put_string_enum_valid_request,
    build_put_string_valid_request,
    build_put_uuid_valid_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]


class ArrayOperations(object):
    """ArrayOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~vanilla.body.array.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_null(self, **kwargs: Any) -> List[int]:
        """Get null array value.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of int, or the result of cls(response)
        :rtype: list[int]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_null_request(
            template_url=self.get_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[int]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_null.metadata = {"url": "/array/null"}  # type: ignore

    @distributed_trace
    def get_invalid(self, **kwargs: Any) -> List[int]:
        """Get invalid array [1, 2, 3.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of int, or the result of cls(response)
        :rtype: list[int]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_invalid_request(
            template_url=self.get_invalid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[int]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_invalid.metadata = {"url": "/array/invalid"}  # type: ignore

    @distributed_trace
    def get_empty(self, **kwargs: Any) -> List[int]:
        """Get empty array value [].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of int, or the result of cls(response)
        :rtype: list[int]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_empty_request(
            template_url=self.get_empty.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[int]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty.metadata = {"url": "/array/empty"}  # type: ignore

    @distributed_trace
    def put_empty(self, array_body: List[str], **kwargs: Any) -> None:
        """Set array value empty [].

        :param array_body:
        :type array_body: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[str]")

        request = build_put_empty_request(
            content_type=content_type,
            json=json,
            template_url=self.put_empty.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty.metadata = {"url": "/array/empty"}  # type: ignore

    @distributed_trace
    def get_boolean_tfft(self, **kwargs: Any) -> List[bool]:
        """Get boolean array value [true, false, false, true].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of bool, or the result of cls(response)
        :rtype: list[bool]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[bool]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_boolean_tfft_request(
            template_url=self.get_boolean_tfft.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[bool]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_tfft.metadata = {"url": "/array/prim/boolean/tfft"}  # type: ignore

    @distributed_trace
    def put_boolean_tfft(self, array_body: List[bool], **kwargs: Any) -> None:
        """Set array value empty [true, false, false, true].

        :param array_body:
        :type array_body: list[bool]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[bool]")

        request = build_put_boolean_tfft_request(
            content_type=content_type,
            json=json,
            template_url=self.put_boolean_tfft.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_boolean_tfft.metadata = {"url": "/array/prim/boolean/tfft"}  # type: ignore

    @distributed_trace
    def get_boolean_invalid_null(self, **kwargs: Any) -> List[bool]:
        """Get boolean array value [true, null, false].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of bool, or the result of cls(response)
        :rtype: list[bool]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[bool]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_boolean_invalid_null_request(
            template_url=self.get_boolean_invalid_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[bool]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_invalid_null.metadata = {"url": "/array/prim/boolean/true.null.false"}  # type: ignore

    @distributed_trace
    def get_boolean_invalid_string(self, **kwargs: Any) -> List[bool]:
        """Get boolean array value [true, 'boolean', false].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of bool, or the result of cls(response)
        :rtype: list[bool]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[bool]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_boolean_invalid_string_request(
            template_url=self.get_boolean_invalid_string.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[bool]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_invalid_string.metadata = {"url": "/array/prim/boolean/true.boolean.false"}  # type: ignore

    @distributed_trace
    def get_integer_valid(self, **kwargs: Any) -> List[int]:
        """Get integer array value [1, -1, 3, 300].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of int, or the result of cls(response)
        :rtype: list[int]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_integer_valid_request(
            template_url=self.get_integer_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[int]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_integer_valid.metadata = {"url": "/array/prim/integer/1.-1.3.300"}  # type: ignore

    @distributed_trace
    def put_integer_valid(self, array_body: List[int], **kwargs: Any) -> None:
        """Set array value empty [1, -1, 3, 300].

        :param array_body:
        :type array_body: list[int]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[int]")

        request = build_put_integer_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_integer_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_integer_valid.metadata = {"url": "/array/prim/integer/1.-1.3.300"}  # type: ignore

    @distributed_trace
    def get_int_invalid_null(self, **kwargs: Any) -> List[int]:
        """Get integer array value [1, null, 0].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of int, or the result of cls(response)
        :rtype: list[int]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_int_invalid_null_request(
            template_url=self.get_int_invalid_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[int]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_int_invalid_null.metadata = {"url": "/array/prim/integer/1.null.zero"}  # type: ignore

    @distributed_trace
    def get_int_invalid_string(self, **kwargs: Any) -> List[int]:
        """Get integer array value [1, 'integer', 0].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of int, or the result of cls(response)
        :rtype: list[int]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_int_invalid_string_request(
            template_url=self.get_int_invalid_string.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[int]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_int_invalid_string.metadata = {"url": "/array/prim/integer/1.integer.0"}  # type: ignore

    @distributed_trace
    def get_long_valid(self, **kwargs: Any) -> List[int]:
        """Get integer array value [1, -1, 3, 300].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of long, or the result of cls(response)
        :rtype: list[long]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_long_valid_request(
            template_url=self.get_long_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[long]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_valid.metadata = {"url": "/array/prim/long/1.-1.3.300"}  # type: ignore

    @distributed_trace
    def put_long_valid(self, array_body: List[int], **kwargs: Any) -> None:
        """Set array value empty [1, -1, 3, 300].

        :param array_body:
        :type array_body: list[long]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[long]")

        request = build_put_long_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_long_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_long_valid.metadata = {"url": "/array/prim/long/1.-1.3.300"}  # type: ignore

    @distributed_trace
    def get_long_invalid_null(self, **kwargs: Any) -> List[int]:
        """Get long array value [1, null, 0].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of long, or the result of cls(response)
        :rtype: list[long]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_long_invalid_null_request(
            template_url=self.get_long_invalid_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[long]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_invalid_null.metadata = {"url": "/array/prim/long/1.null.zero"}  # type: ignore

    @distributed_trace
    def get_long_invalid_string(self, **kwargs: Any) -> List[int]:
        """Get long array value [1, 'integer', 0].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of long, or the result of cls(response)
        :rtype: list[long]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[int]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_long_invalid_string_request(
            template_url=self.get_long_invalid_string.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[long]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_invalid_string.metadata = {"url": "/array/prim/long/1.integer.0"}  # type: ignore

    @distributed_trace
    def get_float_valid(self, **kwargs: Any) -> List[float]:
        """Get float array value [0, -0.01, 1.2e20].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of float, or the result of cls(response)
        :rtype: list[float]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_float_valid_request(
            template_url=self.get_float_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[float]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_valid.metadata = {"url": "/array/prim/float/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace
    def put_float_valid(self, array_body: List[float], **kwargs: Any) -> None:
        """Set array value [0, -0.01, 1.2e20].

        :param array_body:
        :type array_body: list[float]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[float]")

        request = build_put_float_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_float_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_float_valid.metadata = {"url": "/array/prim/float/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace
    def get_float_invalid_null(self, **kwargs: Any) -> List[float]:
        """Get float array value [0.0, null, -1.2e20].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of float, or the result of cls(response)
        :rtype: list[float]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_float_invalid_null_request(
            template_url=self.get_float_invalid_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[float]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_invalid_null.metadata = {"url": "/array/prim/float/0.0-null-1.2e20"}  # type: ignore

    @distributed_trace
    def get_float_invalid_string(self, **kwargs: Any) -> List[float]:
        """Get boolean array value [1.0, 'number', 0.0].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of float, or the result of cls(response)
        :rtype: list[float]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_float_invalid_string_request(
            template_url=self.get_float_invalid_string.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[float]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_invalid_string.metadata = {"url": "/array/prim/float/1.number.0"}  # type: ignore

    @distributed_trace
    def get_double_valid(self, **kwargs: Any) -> List[float]:
        """Get float array value [0, -0.01, 1.2e20].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of float, or the result of cls(response)
        :rtype: list[float]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_double_valid_request(
            template_url=self.get_double_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[float]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_valid.metadata = {"url": "/array/prim/double/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace
    def put_double_valid(self, array_body: List[float], **kwargs: Any) -> None:
        """Set array value [0, -0.01, 1.2e20].

        :param array_body:
        :type array_body: list[float]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[float]")

        request = build_put_double_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_double_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_double_valid.metadata = {"url": "/array/prim/double/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace
    def get_double_invalid_null(self, **kwargs: Any) -> List[float]:
        """Get float array value [0.0, null, -1.2e20].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of float, or the result of cls(response)
        :rtype: list[float]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_double_invalid_null_request(
            template_url=self.get_double_invalid_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[float]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_invalid_null.metadata = {"url": "/array/prim/double/0.0-null-1.2e20"}  # type: ignore

    @distributed_trace
    def get_double_invalid_string(self, **kwargs: Any) -> List[float]:
        """Get boolean array value [1.0, 'number', 0.0].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of float, or the result of cls(response)
        :rtype: list[float]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[float]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_double_invalid_string_request(
            template_url=self.get_double_invalid_string.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[float]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_invalid_string.metadata = {"url": "/array/prim/double/1.number.0"}  # type: ignore

    @distributed_trace
    def get_string_valid(self, **kwargs: Any) -> List[str]:
        """Get string array value ['foo1', 'foo2', 'foo3'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_string_valid_request(
            template_url=self.get_string_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[str]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_valid.metadata = {"url": "/array/prim/string/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace
    def put_string_valid(self, array_body: List[str], **kwargs: Any) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body:
        :type array_body: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[str]")

        request = build_put_string_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_string_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_string_valid.metadata = {"url": "/array/prim/string/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace
    def get_enum_valid(self, **kwargs: Any) -> List[Union[str, "_models.FooEnum"]]:
        """Get enum array value ['foo1', 'foo2', 'foo3'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of FooEnum, or the result of cls(response)
        :rtype: list[str or ~vanilla.body.array.models.FooEnum]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[Union[str, "_models.FooEnum"]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_enum_valid_request(
            template_url=self.get_enum_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[str]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_enum_valid.metadata = {"url": "/array/prim/enum/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace
    def put_enum_valid(self, array_body: List[Union[str, "_models.FooEnum"]], **kwargs: Any) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body:
        :type array_body: list[str or ~vanilla.body.array.models.FooEnum]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[str]")

        request = build_put_enum_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_enum_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_enum_valid.metadata = {"url": "/array/prim/enum/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace
    def get_string_enum_valid(self, **kwargs: Any) -> List[Union[str, "_models.Enum0"]]:
        """Get enum array value ['foo1', 'foo2', 'foo3'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Enum0, or the result of cls(response)
        :rtype: list[str or ~vanilla.body.array.models.Enum0]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[Union[str, "_models.Enum0"]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_string_enum_valid_request(
            template_url=self.get_string_enum_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[str]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_enum_valid.metadata = {"url": "/array/prim/string-enum/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace
    def put_string_enum_valid(self, array_body: List[Union[str, "_models.Enum1"]], **kwargs: Any) -> None:
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body:
        :type array_body: list[str or ~vanilla.body.array.models.Enum1]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[str]")

        request = build_put_string_enum_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_string_enum_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_string_enum_valid.metadata = {"url": "/array/prim/string-enum/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace
    def get_string_with_null(self, **kwargs: Any) -> List[str]:
        """Get string array value ['foo', null, 'foo2'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_string_with_null_request(
            template_url=self.get_string_with_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[str]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_with_null.metadata = {"url": "/array/prim/string/foo.null.foo2"}  # type: ignore

    @distributed_trace
    def get_string_with_invalid(self, **kwargs: Any) -> List[str]:
        """Get string array value ['foo', 123, 'foo2'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_string_with_invalid_request(
            template_url=self.get_string_with_invalid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[str]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_with_invalid.metadata = {"url": "/array/prim/string/foo.123.foo2"}  # type: ignore

    @distributed_trace
    def get_uuid_valid(self, **kwargs: Any) -> List[str]:
        """Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
        'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_uuid_valid_request(
            template_url=self.get_uuid_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[str]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_uuid_valid.metadata = {"url": "/array/prim/uuid/valid"}  # type: ignore

    @distributed_trace
    def put_uuid_valid(self, array_body: List[str], **kwargs: Any) -> None:
        """Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
        'd1399005-30f7-40d6-8da6-dd7c89ad34db', 'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].

        :param array_body:
        :type array_body: list[str]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[str]")

        request = build_put_uuid_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_uuid_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_uuid_valid.metadata = {"url": "/array/prim/uuid/valid"}  # type: ignore

    @distributed_trace
    def get_uuid_invalid_chars(self, **kwargs: Any) -> List[str]:
        """Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of str, or the result of cls(response)
        :rtype: list[str]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[str]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_uuid_invalid_chars_request(
            template_url=self.get_uuid_invalid_chars.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[str]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_uuid_invalid_chars.metadata = {"url": "/array/prim/uuid/invalidchars"}  # type: ignore

    @distributed_trace
    def get_date_valid(self, **kwargs: Any) -> List[datetime.date]:
        """Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of date, or the result of cls(response)
        :rtype: list[~datetime.date]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.date]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_date_valid_request(
            template_url=self.get_date_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[date]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_valid.metadata = {"url": "/array/prim/date/valid"}  # type: ignore

    @distributed_trace
    def put_date_valid(self, array_body: List[datetime.date], **kwargs: Any) -> None:
        """Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].

        :param array_body:
        :type array_body: list[~datetime.date]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[date]")

        request = build_put_date_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_date_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_valid.metadata = {"url": "/array/prim/date/valid"}  # type: ignore

    @distributed_trace
    def get_date_invalid_null(self, **kwargs: Any) -> List[datetime.date]:
        """Get date array value ['2012-01-01', null, '1776-07-04'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of date, or the result of cls(response)
        :rtype: list[~datetime.date]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.date]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_date_invalid_null_request(
            template_url=self.get_date_invalid_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[date]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_invalid_null.metadata = {"url": "/array/prim/date/invalidnull"}  # type: ignore

    @distributed_trace
    def get_date_invalid_chars(self, **kwargs: Any) -> List[datetime.date]:
        """Get date array value ['2011-03-22', 'date'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of date, or the result of cls(response)
        :rtype: list[~datetime.date]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.date]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_date_invalid_chars_request(
            template_url=self.get_date_invalid_chars.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[date]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_invalid_chars.metadata = {"url": "/array/prim/date/invalidchars"}  # type: ignore

    @distributed_trace
    def get_date_time_valid(self, **kwargs: Any) -> List[datetime.datetime]:
        """Get date-time array value ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
        '1492-10-12T10:15:01-08:00'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of datetime, or the result of cls(response)
        :rtype: list[~datetime.datetime]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.datetime]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_date_time_valid_request(
            template_url=self.get_date_time_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[iso-8601]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_valid.metadata = {"url": "/array/prim/date-time/valid"}  # type: ignore

    @distributed_trace
    def put_date_time_valid(self, array_body: List[datetime.datetime], **kwargs: Any) -> None:
        """Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
        '1492-10-12T10:15:01-08:00'].

        :param array_body:
        :type array_body: list[~datetime.datetime]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[iso-8601]")

        request = build_put_date_time_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_date_time_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_time_valid.metadata = {"url": "/array/prim/date-time/valid"}  # type: ignore

    @distributed_trace
    def get_date_time_invalid_null(self, **kwargs: Any) -> List[datetime.datetime]:
        """Get date array value ['2000-12-01t00:00:01z', null].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of datetime, or the result of cls(response)
        :rtype: list[~datetime.datetime]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.datetime]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_date_time_invalid_null_request(
            template_url=self.get_date_time_invalid_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[iso-8601]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_invalid_null.metadata = {"url": "/array/prim/date-time/invalidnull"}  # type: ignore

    @distributed_trace
    def get_date_time_invalid_chars(self, **kwargs: Any) -> List[datetime.datetime]:
        """Get date array value ['2000-12-01t00:00:01z', 'date-time'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of datetime, or the result of cls(response)
        :rtype: list[~datetime.datetime]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.datetime]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_date_time_invalid_chars_request(
            template_url=self.get_date_time_invalid_chars.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[iso-8601]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_invalid_chars.metadata = {"url": "/array/prim/date-time/invalidchars"}  # type: ignore

    @distributed_trace
    def get_date_time_rfc1123_valid(self, **kwargs: Any) -> List[datetime.datetime]:
        """Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT',
        'Wed, 12 Oct 1492 10:15:01 GMT'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of datetime, or the result of cls(response)
        :rtype: list[~datetime.datetime]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.datetime]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_date_time_rfc1123_valid_request(
            template_url=self.get_date_time_rfc1123_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[rfc-1123]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_rfc1123_valid.metadata = {"url": "/array/prim/date-time-rfc1123/valid"}  # type: ignore

    @distributed_trace
    def put_date_time_rfc1123_valid(self, array_body: List[datetime.datetime], **kwargs: Any) -> None:
        """Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980 00:11:35 GMT', 'Wed, 12
        Oct 1492 10:15:01 GMT'].

        :param array_body:
        :type array_body: list[~datetime.datetime]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[rfc-1123]")

        request = build_put_date_time_rfc1123_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_date_time_rfc1123_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_time_rfc1123_valid.metadata = {"url": "/array/prim/date-time-rfc1123/valid"}  # type: ignore

    @distributed_trace
    def get_duration_valid(self, **kwargs: Any) -> List[datetime.timedelta]:
        """Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S'].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of timedelta, or the result of cls(response)
        :rtype: list[~datetime.timedelta]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[datetime.timedelta]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_duration_valid_request(
            template_url=self.get_duration_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[duration]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_duration_valid.metadata = {"url": "/array/prim/duration/valid"}  # type: ignore

    @distributed_trace
    def put_duration_valid(self, array_body: List[datetime.timedelta], **kwargs: Any) -> None:
        """Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].

        :param array_body:
        :type array_body: list[~datetime.timedelta]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[duration]")

        request = build_put_duration_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_duration_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_duration_valid.metadata = {"url": "/array/prim/duration/valid"}  # type: ignore

    @distributed_trace
    def get_byte_valid(self, **kwargs: Any) -> List[bytearray]:
        """Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each item encoded
        in base64.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of bytearray, or the result of cls(response)
        :rtype: list[bytearray]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[bytearray]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_byte_valid_request(
            template_url=self.get_byte_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[bytearray]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_byte_valid.metadata = {"url": "/array/prim/byte/valid"}  # type: ignore

    @distributed_trace
    def put_byte_valid(self, array_body: List[bytearray], **kwargs: Any) -> None:
        """Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)] with each
        elementencoded in base 64.

        :param array_body:
        :type array_body: list[bytearray]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[bytearray]")

        request = build_put_byte_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_byte_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_byte_valid.metadata = {"url": "/array/prim/byte/valid"}  # type: ignore

    @distributed_trace
    def get_byte_invalid_null(self, **kwargs: Any) -> List[bytearray]:
        """Get byte array value [hex(AB, AC, AD), null] with the first item base64 encoded.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of bytearray, or the result of cls(response)
        :rtype: list[bytearray]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[bytearray]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_byte_invalid_null_request(
            template_url=self.get_byte_invalid_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[bytearray]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_byte_invalid_null.metadata = {"url": "/array/prim/byte/invalidnull"}  # type: ignore

    @distributed_trace
    def get_base64_url(self, **kwargs: Any) -> List[bytes]:
        """Get array value ['a string that gets encoded with base64url', 'test string' 'Lorem ipsum'] with
        the items base64url encoded.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of bytes, or the result of cls(response)
        :rtype: list[bytes]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[bytes]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_base64_url_request(
            template_url=self.get_base64_url.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[base64]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_base64_url.metadata = {"url": "/array/prim/base64url/valid"}  # type: ignore

    @distributed_trace
    def get_complex_null(self, **kwargs: Any) -> List["_models.Product"]:
        """Get array of complex type null value.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Product, or the result of cls(response)
        :rtype: list[~vanilla.body.array.models.Product]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Product"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_complex_null_request(
            template_url=self.get_complex_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[Product]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_null.metadata = {"url": "/array/complex/null"}  # type: ignore

    @distributed_trace
    def get_complex_empty(self, **kwargs: Any) -> List["_models.Product"]:
        """Get empty array of complex type [].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Product, or the result of cls(response)
        :rtype: list[~vanilla.body.array.models.Product]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Product"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_complex_empty_request(
            template_url=self.get_complex_empty.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[Product]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_empty.metadata = {"url": "/array/complex/empty"}  # type: ignore

    @distributed_trace
    def get_complex_item_null(self, **kwargs: Any) -> List["_models.Product"]:
        """Get array of complex type with null item [{'integer': 1 'string': '2'}, null, {'integer': 5,
        'string': '6'}].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Product, or the result of cls(response)
        :rtype: list[~vanilla.body.array.models.Product]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Product"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_complex_item_null_request(
            template_url=self.get_complex_item_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[Product]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_item_null.metadata = {"url": "/array/complex/itemnull"}  # type: ignore

    @distributed_trace
    def get_complex_item_empty(self, **kwargs: Any) -> List["_models.Product"]:
        """Get array of complex type with empty item [{'integer': 1 'string': '2'}, {}, {'integer': 5,
        'string': '6'}].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Product, or the result of cls(response)
        :rtype: list[~vanilla.body.array.models.Product]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Product"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_complex_item_empty_request(
            template_url=self.get_complex_item_empty.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[Product]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_item_empty.metadata = {"url": "/array/complex/itemempty"}  # type: ignore

    @distributed_trace
    def get_complex_valid(self, **kwargs: Any) -> List["_models.Product"]:
        """Get array of complex type with [{'integer': 1 'string': '2'}, {'integer': 3, 'string': '4'},
        {'integer': 5, 'string': '6'}].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Product, or the result of cls(response)
        :rtype: list[~vanilla.body.array.models.Product]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Product"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_complex_valid_request(
            template_url=self.get_complex_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[Product]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_valid.metadata = {"url": "/array/complex/valid"}  # type: ignore

    @distributed_trace
    def put_complex_valid(self, array_body: List["_models.Product"], **kwargs: Any) -> None:
        """Put an array of complex type with values [{'integer': 1 'string': '2'}, {'integer': 3,
        'string': '4'}, {'integer': 5, 'string': '6'}].

        :param array_body:
        :type array_body: list[~vanilla.body.array.models.Product]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[Product]")

        request = build_put_complex_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_complex_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_complex_valid.metadata = {"url": "/array/complex/valid"}  # type: ignore

    @distributed_trace
    def get_array_null(self, **kwargs: Any) -> List[List[str]]:
        """Get a null array.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of list of str, or the result of cls(response)
        :rtype: list[list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_array_null_request(
            template_url=self.get_array_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[[str]]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_null.metadata = {"url": "/array/array/null"}  # type: ignore

    @distributed_trace
    def get_array_empty(self, **kwargs: Any) -> List[List[str]]:
        """Get an empty array [].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of list of str, or the result of cls(response)
        :rtype: list[list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_array_empty_request(
            template_url=self.get_array_empty.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[[str]]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_empty.metadata = {"url": "/array/array/empty"}  # type: ignore

    @distributed_trace
    def get_array_item_null(self, **kwargs: Any) -> List[List[str]]:
        """Get an array of array of strings [['1', '2', '3'], null, ['7', '8', '9']].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of list of str, or the result of cls(response)
        :rtype: list[list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_array_item_null_request(
            template_url=self.get_array_item_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[[str]]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_item_null.metadata = {"url": "/array/array/itemnull"}  # type: ignore

    @distributed_trace
    def get_array_item_empty(self, **kwargs: Any) -> List[List[str]]:
        """Get an array of array of strings [['1', '2', '3'], [], ['7', '8', '9']].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of list of str, or the result of cls(response)
        :rtype: list[list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_array_item_empty_request(
            template_url=self.get_array_item_empty.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[[str]]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_item_empty.metadata = {"url": "/array/array/itemempty"}  # type: ignore

    @distributed_trace
    def get_array_valid(self, **kwargs: Any) -> List[List[str]]:
        """Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of list of str, or the result of cls(response)
        :rtype: list[list[str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[List[str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_array_valid_request(
            template_url=self.get_array_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[[str]]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_valid.metadata = {"url": "/array/array/valid"}  # type: ignore

    @distributed_trace
    def put_array_valid(self, array_body: List[List[str]], **kwargs: Any) -> None:
        """Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']].

        :param array_body:
        :type array_body: list[list[str]]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[[str]]")

        request = build_put_array_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_array_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_array_valid.metadata = {"url": "/array/array/valid"}  # type: ignore

    @distributed_trace
    def get_dictionary_null(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries with value null.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of dict mapping str to str, or the result of cls(response)
        :rtype: list[dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_dictionary_null_request(
            template_url=self.get_dictionary_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[{str}]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_null.metadata = {"url": "/array/dictionary/null"}  # type: ignore

    @distributed_trace
    def get_dictionary_empty(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries of type <string, string> with value [].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of dict mapping str to str, or the result of cls(response)
        :rtype: list[dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_dictionary_empty_request(
            template_url=self.get_dictionary_empty.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[{str}]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_empty.metadata = {"url": "/array/dictionary/empty"}  # type: ignore

    @distributed_trace
    def get_dictionary_item_null(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, null, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of dict mapping str to str, or the result of cls(response)
        :rtype: list[dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_dictionary_item_null_request(
            template_url=self.get_dictionary_item_null.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[{str}]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_item_null.metadata = {"url": "/array/dictionary/itemnull"}  # type: ignore

    @distributed_trace
    def get_dictionary_item_empty(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, {}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of dict mapping str to str, or the result of cls(response)
        :rtype: list[dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_dictionary_item_empty_request(
            template_url=self.get_dictionary_item_empty.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[{str}]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_item_empty.metadata = {"url": "/array/dictionary/itemempty"}  # type: ignore

    @distributed_trace
    def get_dictionary_valid(self, **kwargs: Any) -> List[Dict[str, str]]:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of dict mapping str to str, or the result of cls(response)
        :rtype: list[dict[str, str]]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List[Dict[str, str]]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_dictionary_valid_request(
            template_url=self.get_dictionary_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[{str}]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_valid.metadata = {"url": "/array/dictionary/valid"}  # type: ignore

    @distributed_trace
    def put_dictionary_valid(self, array_body: List[Dict[str, str]], **kwargs: Any) -> None:
        """Get an array of Dictionaries of type <string, string> with value [{'1': 'one', '2': 'two', '3':
        'three'}, {'4': 'four', '5': 'five', '6': 'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :param array_body:
        :type array_body: list[dict[str, str]]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))
        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        json = self._serialize.body(array_body, "[{str}]")

        request = build_put_dictionary_valid_request(
            content_type=content_type,
            json=json,
            template_url=self.put_dictionary_valid.metadata["url"],
        )._to_pipeline_transport_request()
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_dictionary_valid.metadata = {"url": "/array/dictionary/valid"}  # type: ignore
