# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Optional, TYPE_CHECKING

from msrest import Serializer

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._vendor import _convert_request

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Optional, TypeVar, Union

    T = TypeVar("T")
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_param_existing_key_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    user_agent_parameter = kwargs.pop('user_agent_parameter')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/existingkey")

    # Construct headers
    _headers['User-Agent'] = _SERIALIZER.header("user_agent_parameter", user_agent_parameter, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_existing_key_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/existingkey")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_protected_key_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/protectedkey")

    # Construct headers
    _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_protected_key_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/protectedkey")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_integer_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: int
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/integer")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'int')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_integer_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/integer")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_long_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: int
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/long")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'int')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_long_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/long")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_float_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: float
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/float")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'float')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_float_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/float")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_double_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: float
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/double")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'float')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_double_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/double")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_bool_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: bool
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/bool")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'bool')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_bool_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/bool")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_string_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value', _headers.pop('value', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/string")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    if value is not None:
        _headers['value'] = _SERIALIZER.header("value", value, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_string_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/string")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_date_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: datetime.date
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/date")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'date')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_date_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/date")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_datetime_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: datetime.datetime
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/datetime")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'iso-8601')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_datetime_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/datetime")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_datetime_rfc1123_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value', _headers.pop('value', None))  # type: Optional[datetime.datetime]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/datetimerfc1123")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    if value is not None:
        _headers['value'] = _SERIALIZER.header("value", value, 'rfc-1123')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_datetime_rfc1123_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/datetimerfc1123")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_duration_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: datetime.timedelta
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/duration")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'duration')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_duration_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/duration")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_byte_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value')  # type: bytes
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/byte")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['value'] = _SERIALIZER.header("value", value, 'bytearray')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_byte_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/byte")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_param_enum_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    value = kwargs.pop('value', _headers.pop('value', None))  # type: Optional[Union[str, "_models.GreyscaleColors"]]
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/param/prim/enum")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    if value is not None:
        _headers['value'] = _SERIALIZER.header("value", value, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_response_enum_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    scenario = kwargs.pop('scenario')  # type: str
    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/response/prim/enum")

    # Construct headers
    _headers['scenario'] = _SERIALIZER.header("scenario", scenario, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_custom_request_id_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0")

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_headers,
        **kwargs
    )

# fmt: on
class HeaderOperations(object):  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~header.AutoRestSwaggerBATHeaderService`'s
        :attr:`header` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def param_existing_key(  # pylint: disable=inconsistent-return-statements
        self,
        user_agent_parameter,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header value "User-Agent": "overwrite".

        :param user_agent_parameter: Send a post request with header value "User-Agent": "overwrite".
         Required.
        :type user_agent_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_existing_key_request(
            user_agent_parameter=user_agent_parameter,
            template_url=self.param_existing_key.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_existing_key.metadata = {"url": "/header/param/existingkey"}  # type: ignore

    @distributed_trace
    def response_existing_key(  # pylint: disable=inconsistent-return-statements
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header value "User-Agent": "overwrite".

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_existing_key_request(
            template_url=self.response_existing_key.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["User-Agent"] = self._deserialize("str", response.headers.get("User-Agent"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_existing_key.metadata = {"url": "/header/response/existingkey"}  # type: ignore

    @distributed_trace
    def param_protected_key(  # pylint: disable=inconsistent-return-statements
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header value "Content-Type": "text/html".

        :keyword content_type: Send a post request with header value "Content-Type": "text/html".
         Required.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type")  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_protected_key_request(
            content_type=content_type,
            template_url=self.param_protected_key.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_protected_key.metadata = {"url": "/header/param/protectedkey"}  # type: ignore

    @distributed_trace
    def response_protected_key(  # pylint: disable=inconsistent-return-statements
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header value "Content-Type": "text/html".

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_protected_key_request(
            template_url=self.response_protected_key.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_protected_key.metadata = {"url": "/header/response/protectedkey"}  # type: ignore

    @distributed_trace
    def param_integer(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: int
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "positive", "value": 1 or "scenario":
        "negative", "value": -2.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :type scenario: str
        :param value: Send a post request with header values 1 or -2. Required.
        :type value: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_integer_request(
            scenario=scenario,
            value=value,
            template_url=self.param_integer.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_integer.metadata = {"url": "/header/param/prim/integer"}  # type: ignore

    @distributed_trace
    def response_integer(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header value "value": 1 or -2.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_integer_request(
            scenario=scenario,
            template_url=self.response_integer.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("int", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_integer.metadata = {"url": "/header/response/prim/integer"}  # type: ignore

    @distributed_trace
    def param_long(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: int
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "positive", "value": 105 or "scenario":
        "negative", "value": -2.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :type scenario: str
        :param value: Send a post request with header values 105 or -2. Required.
        :type value: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_long_request(
            scenario=scenario,
            value=value,
            template_url=self.param_long.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_long.metadata = {"url": "/header/param/prim/long"}  # type: ignore

    @distributed_trace
    def response_long(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header value "value": 105 or -2.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_long_request(
            scenario=scenario,
            template_url=self.response_long.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("int", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_long.metadata = {"url": "/header/response/prim/long"}  # type: ignore

    @distributed_trace
    def param_float(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: float
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario":
        "negative", "value": -3.0.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :type scenario: str
        :param value: Send a post request with header values 0.07 or -3.0. Required.
        :type value: float
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_float_request(
            scenario=scenario,
            value=value,
            template_url=self.param_float.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_float.metadata = {"url": "/header/param/prim/float"}  # type: ignore

    @distributed_trace
    def response_float(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header value "value": 0.07 or -3.0.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_float_request(
            scenario=scenario,
            template_url=self.response_float.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("float", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_float.metadata = {"url": "/header/response/prim/float"}  # type: ignore

    @distributed_trace
    def param_double(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: float
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario":
        "negative", "value": -3.0.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :type scenario: str
        :param value: Send a post request with header values 7e120 or -3.0. Required.
        :type value: float
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_double_request(
            scenario=scenario,
            value=value,
            template_url=self.param_double.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_double.metadata = {"url": "/header/param/prim/double"}  # type: ignore

    @distributed_trace
    def response_double(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header value "value": 7e120 or -3.0.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
         Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_double_request(
            scenario=scenario,
            template_url=self.response_double.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("float", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_double.metadata = {"url": "/header/response/prim/double"}  # type: ignore

    @distributed_trace
    def param_bool(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: bool
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "true", "value": true or "scenario":
        "false", "value": false.

        :param scenario: Send a post request with header values "scenario": "true" or "false".
         Required.
        :type scenario: str
        :param value: Send a post request with header values true or false. Required.
        :type value: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_bool_request(
            scenario=scenario,
            value=value,
            template_url=self.param_bool.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_bool.metadata = {"url": "/header/param/prim/bool"}  # type: ignore

    @distributed_trace
    def response_bool(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header value "value": true or false.

        :param scenario: Send a post request with header values "scenario": "true" or "false".
         Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_bool_request(
            scenario=scenario,
            template_url=self.response_bool.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("bool", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_bool.metadata = {"url": "/header/response/prim/bool"}  # type: ignore

    @distributed_trace
    def param_string(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps
        over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": "".

        :param scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty". Required.
        :type scenario: str
        :param value: Send a post request with header values "The quick brown fox jumps over the lazy
         dog" or null or "". Default value is None.
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_string_request(
            scenario=scenario,
            value=value,
            template_url=self.param_string.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_string.metadata = {"url": "/header/param/prim/string"}  # type: ignore

    @distributed_trace
    def response_string(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header values "The quick brown fox jumps over the lazy dog" or null or "".

        :param scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty". Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_string_request(
            scenario=scenario,
            template_url=self.response_string.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("str", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_string.metadata = {"url": "/header/response/prim/string"}  # type: ignore

    @distributed_trace
    def param_date(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: datetime.date
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "valid", "value": "2010-01-01" or
        "scenario": "min", "value": "0001-01-01".

        :param scenario: Send a post request with header values "scenario": "valid" or "min". Required.
        :type scenario: str
        :param value: Send a post request with header values "2010-01-01" or "0001-01-01". Required.
        :type value: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_date_request(
            scenario=scenario,
            value=value,
            template_url=self.param_date.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_date.metadata = {"url": "/header/param/prim/date"}  # type: ignore

    @distributed_trace
    def response_date(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header values "2010-01-01" or "0001-01-01".

        :param scenario: Send a post request with header values "scenario": "valid" or "min". Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_date_request(
            scenario=scenario,
            template_url=self.response_date.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("date", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_date.metadata = {"url": "/header/response/prim/date"}  # type: ignore

    @distributed_trace
    def param_datetime(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: datetime.datetime
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or
        "scenario": "min", "value": "0001-01-01T00:00:00Z".

        :param scenario: Send a post request with header values "scenario": "valid" or "min". Required.
        :type scenario: str
        :param value: Send a post request with header values "2010-01-01T12:34:56Z" or
         "0001-01-01T00:00:00Z". Required.
        :type value: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_datetime_request(
            scenario=scenario,
            value=value,
            template_url=self.param_datetime.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_datetime.metadata = {"url": "/header/param/prim/datetime"}  # type: ignore

    @distributed_trace
    def response_datetime(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z".

        :param scenario: Send a post request with header values "scenario": "valid" or "min". Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_datetime_request(
            scenario=scenario,
            template_url=self.response_datetime.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("iso-8601", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_datetime.metadata = {"url": "/header/response/prim/datetime"}  # type: ignore

    @distributed_trace
    def param_datetime_rfc1123(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value=None,  # type: Optional[datetime.datetime]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56
        GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT".

        :param scenario: Send a post request with header values "scenario": "valid" or "min". Required.
        :type scenario: str
        :param value: Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon,
         01 Jan 0001 00:00:00 GMT". Default value is None.
        :type value: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_datetime_rfc1123_request(
            scenario=scenario,
            value=value,
            template_url=self.param_datetime_rfc1123.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_datetime_rfc1123.metadata = {"url": "/header/param/prim/datetimerfc1123"}  # type: ignore

    @distributed_trace
    def response_datetime_rfc1123(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00
        GMT".

        :param scenario: Send a post request with header values "scenario": "valid" or "min". Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_datetime_rfc1123_request(
            scenario=scenario,
            template_url=self.response_datetime_rfc1123.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("rfc-1123", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_datetime_rfc1123.metadata = {"url": "/header/response/prim/datetimerfc1123"}  # type: ignore

    @distributed_trace
    def param_duration(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: datetime.timedelta
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S".

        :param scenario: Send a post request with header values "scenario": "valid". Required.
        :type scenario: str
        :param value: Send a post request with header values "P123DT22H14M12.011S". Required.
        :type value: ~datetime.timedelta
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_duration_request(
            scenario=scenario,
            value=value,
            template_url=self.param_duration.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_duration.metadata = {"url": "/header/param/prim/duration"}  # type: ignore

    @distributed_trace
    def response_duration(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header values "P123DT22H14M12.011S".

        :param scenario: Send a post request with header values "scenario": "valid". Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_duration_request(
            scenario=scenario,
            template_url=self.response_duration.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("duration", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_duration.metadata = {"url": "/header/response/prim/duration"}  # type: ignore

    @distributed_trace
    def param_byte(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value,  # type: bytes
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩".

        :param scenario: Send a post request with header values "scenario": "valid". Required.
        :type scenario: str
        :param value: Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩". Required.
        :type value: bytes
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_byte_request(
            scenario=scenario,
            value=value,
            template_url=self.param_byte.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_byte.metadata = {"url": "/header/param/prim/byte"}  # type: ignore

    @distributed_trace
    def response_byte(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header values "啊齄丂狛狜隣郎隣兀﨩".

        :param scenario: Send a post request with header values "scenario": "valid". Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_byte_request(
            scenario=scenario,
            template_url=self.response_byte.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("bytearray", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_byte.metadata = {"url": "/header/response/prim/byte"}  # type: ignore

    @distributed_trace
    def param_enum(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        value=None,  # type: Optional[Union[str, "_models.GreyscaleColors"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario":
        "null", "value": null.

        :param scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty". Required.
        :type scenario: str
        :param value: Send a post request with header values 'GREY'. Known values are: "White",
         "black", and "GREY". Default value is None.
        :type value: str or ~header.models.GreyscaleColors
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_param_enum_request(
            scenario=scenario,
            value=value,
            template_url=self.param_enum.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    param_enum.metadata = {"url": "/header/param/prim/enum"}  # type: ignore

    @distributed_trace
    def response_enum(  # pylint: disable=inconsistent-return-statements
        self,
        scenario,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get a response with header values "GREY" or null.

        :param scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty". Required.
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_response_enum_request(
            scenario=scenario,
            template_url=self.response_enum.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers["value"] = self._deserialize("str", response.headers.get("value"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    response_enum.metadata = {"url": "/header/response/prim/enum"}  # type: ignore

    @distributed_trace
    def custom_request_id(  # pylint: disable=inconsistent-return-statements
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the
        request.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_custom_request_id_request(
            template_url=self.custom_request_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    custom_request_id.metadata = {"url": "/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0"}  # type: ignore
