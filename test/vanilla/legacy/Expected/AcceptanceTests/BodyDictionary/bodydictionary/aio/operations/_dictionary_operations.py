# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._dictionary_operations import (
    build_get_array_empty_request,
    build_get_array_item_empty_request,
    build_get_array_item_null_request,
    build_get_array_null_request,
    build_get_array_valid_request,
    build_get_base64_url_request,
    build_get_boolean_invalid_null_request,
    build_get_boolean_invalid_string_request,
    build_get_boolean_tfft_request,
    build_get_byte_invalid_null_request,
    build_get_byte_valid_request,
    build_get_complex_empty_request,
    build_get_complex_item_empty_request,
    build_get_complex_item_null_request,
    build_get_complex_null_request,
    build_get_complex_valid_request,
    build_get_date_invalid_chars_request,
    build_get_date_invalid_null_request,
    build_get_date_time_invalid_chars_request,
    build_get_date_time_invalid_null_request,
    build_get_date_time_rfc1123_valid_request,
    build_get_date_time_valid_request,
    build_get_date_valid_request,
    build_get_dictionary_empty_request,
    build_get_dictionary_item_empty_request,
    build_get_dictionary_item_null_request,
    build_get_dictionary_null_request,
    build_get_dictionary_valid_request,
    build_get_double_invalid_null_request,
    build_get_double_invalid_string_request,
    build_get_double_valid_request,
    build_get_duration_valid_request,
    build_get_empty_request,
    build_get_empty_string_key_request,
    build_get_float_invalid_null_request,
    build_get_float_invalid_string_request,
    build_get_float_valid_request,
    build_get_int_invalid_null_request,
    build_get_int_invalid_string_request,
    build_get_integer_valid_request,
    build_get_invalid_request,
    build_get_long_invalid_null_request,
    build_get_long_invalid_string_request,
    build_get_long_valid_request,
    build_get_null_key_request,
    build_get_null_request,
    build_get_null_value_request,
    build_get_string_valid_request,
    build_get_string_with_invalid_request,
    build_get_string_with_null_request,
    build_put_array_valid_request,
    build_put_boolean_tfft_request,
    build_put_byte_valid_request,
    build_put_complex_valid_request,
    build_put_date_time_rfc1123_valid_request,
    build_put_date_time_valid_request,
    build_put_date_valid_request,
    build_put_dictionary_valid_request,
    build_put_double_valid_request,
    build_put_duration_valid_request,
    build_put_empty_request,
    build_put_float_valid_request,
    build_put_integer_valid_request,
    build_put_long_valid_request,
    build_put_string_valid_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class DictionaryOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~bodydictionary.aio.AutoRestSwaggerBATDictionaryService`'s
        :attr:`dictionary` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_null(self, **kwargs: Any) -> Dict[str, int]:
        """Get null dictionary value.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to int or the result of cls(response)
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_null_request(
            template_url=self.get_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{int}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_null.metadata = {"url": "/dictionary/null"}  # type: ignore

    @distributed_trace_async
    async def get_empty(self, **kwargs: Any) -> Dict[str, int]:
        """Get empty dictionary value {}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to int or the result of cls(response)
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_empty_request(
            template_url=self.get_empty.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{int}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty.metadata = {"url": "/dictionary/empty"}  # type: ignore

    @overload
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, str], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {}.

        :param array_body: Required.
        :type array_body: dict[str, str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, str], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value empty {}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{str}")

        request = build_put_empty_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_empty.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty.metadata = {"url": "/dictionary/empty"}  # type: ignore

    @distributed_trace_async
    async def get_null_value(self, **kwargs: Any) -> Dict[str, str]:
        """Get Dictionary with null value.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to str or the result of cls(response)
        :rtype: dict[str, str]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]

        request = build_get_null_value_request(
            template_url=self.get_null_value.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{str}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_null_value.metadata = {"url": "/dictionary/nullvalue"}  # type: ignore

    @distributed_trace_async
    async def get_null_key(self, **kwargs: Any) -> Dict[str, str]:
        """Get Dictionary with null key.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to str or the result of cls(response)
        :rtype: dict[str, str]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]

        request = build_get_null_key_request(
            template_url=self.get_null_key.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{str}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_null_key.metadata = {"url": "/dictionary/nullkey"}  # type: ignore

    @distributed_trace_async
    async def get_empty_string_key(self, **kwargs: Any) -> Dict[str, str]:
        """Get Dictionary with key as empty string.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to str or the result of cls(response)
        :rtype: dict[str, str]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]

        request = build_get_empty_string_key_request(
            template_url=self.get_empty_string_key.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{str}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_string_key.metadata = {"url": "/dictionary/keyemptystring"}  # type: ignore

    @distributed_trace_async
    async def get_invalid(self, **kwargs: Any) -> Dict[str, str]:
        """Get invalid Dictionary value.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to str or the result of cls(response)
        :rtype: dict[str, str]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]

        request = build_get_invalid_request(
            template_url=self.get_invalid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{str}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_invalid.metadata = {"url": "/dictionary/invalid"}  # type: ignore

    @distributed_trace_async
    async def get_boolean_tfft(self, **kwargs: Any) -> Dict[str, bool]:
        """Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true }.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to bool or the result of cls(response)
        :rtype: dict[str, bool]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bool]]

        request = build_get_boolean_tfft_request(
            template_url=self.get_boolean_tfft.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{bool}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_tfft.metadata = {"url": "/dictionary/prim/boolean/tfft"}  # type: ignore

    @overload
    async def put_boolean_tfft(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, bool], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }.

        :param array_body: Required.
        :type array_body: dict[str, bool]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_boolean_tfft(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_boolean_tfft(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, bool], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, bool] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{bool}")

        request = build_put_boolean_tfft_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_boolean_tfft.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_boolean_tfft.metadata = {"url": "/dictionary/prim/boolean/tfft"}  # type: ignore

    @distributed_trace_async
    async def get_boolean_invalid_null(self, **kwargs: Any) -> Dict[str, bool]:
        """Get boolean dictionary value {"0": true, "1": null, "2": false }.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to bool or the result of cls(response)
        :rtype: dict[str, bool]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bool]]

        request = build_get_boolean_invalid_null_request(
            template_url=self.get_boolean_invalid_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{bool}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_invalid_null.metadata = {"url": "/dictionary/prim/boolean/true.null.false"}  # type: ignore

    @distributed_trace_async
    async def get_boolean_invalid_string(self, **kwargs: Any) -> Dict[str, bool]:
        """Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to bool or the result of cls(response)
        :rtype: dict[str, bool]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bool]]

        request = build_get_boolean_invalid_string_request(
            template_url=self.get_boolean_invalid_string.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{bool}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_boolean_invalid_string.metadata = {"url": "/dictionary/prim/boolean/true.boolean.false"}  # type: ignore

    @distributed_trace_async
    async def get_integer_valid(self, **kwargs: Any) -> Dict[str, int]:
        """Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to int or the result of cls(response)
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_integer_valid_request(
            template_url=self.get_integer_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{int}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_integer_valid.metadata = {"url": "/dictionary/prim/integer/1.-1.3.300"}  # type: ignore

    @overload
    async def put_integer_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, int], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body: Required.
        :type array_body: dict[str, int]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_integer_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_integer_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, int], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, int] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{int}")

        request = build_put_integer_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_integer_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_integer_valid.metadata = {"url": "/dictionary/prim/integer/1.-1.3.300"}  # type: ignore

    @distributed_trace_async
    async def get_int_invalid_null(self, **kwargs: Any) -> Dict[str, int]:
        """Get integer dictionary value {"0": 1, "1": null, "2": 0}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to int or the result of cls(response)
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_int_invalid_null_request(
            template_url=self.get_int_invalid_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{int}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_int_invalid_null.metadata = {"url": "/dictionary/prim/integer/1.null.zero"}  # type: ignore

    @distributed_trace_async
    async def get_int_invalid_string(self, **kwargs: Any) -> Dict[str, int]:
        """Get integer dictionary value {"0": 1, "1": "integer", "2": 0}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to int or the result of cls(response)
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_int_invalid_string_request(
            template_url=self.get_int_invalid_string.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{int}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_int_invalid_string.metadata = {"url": "/dictionary/prim/integer/1.integer.0"}  # type: ignore

    @distributed_trace_async
    async def get_long_valid(self, **kwargs: Any) -> Dict[str, int]:
        """Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to int or the result of cls(response)
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_long_valid_request(
            template_url=self.get_long_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{int}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_valid.metadata = {"url": "/dictionary/prim/long/1.-1.3.300"}  # type: ignore

    @overload
    async def put_long_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, int], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body: Required.
        :type array_body: dict[str, int]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_long_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_long_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, int], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, int] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{int}")

        request = build_put_long_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_long_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_long_valid.metadata = {"url": "/dictionary/prim/long/1.-1.3.300"}  # type: ignore

    @distributed_trace_async
    async def get_long_invalid_null(self, **kwargs: Any) -> Dict[str, int]:
        """Get long dictionary value {"0": 1, "1": null, "2": 0}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to int or the result of cls(response)
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_long_invalid_null_request(
            template_url=self.get_long_invalid_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{int}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_invalid_null.metadata = {"url": "/dictionary/prim/long/1.null.zero"}  # type: ignore

    @distributed_trace_async
    async def get_long_invalid_string(self, **kwargs: Any) -> Dict[str, int]:
        """Get long dictionary value {"0": 1, "1": "integer", "2": 0}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to int or the result of cls(response)
        :rtype: dict[str, int]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, int]]

        request = build_get_long_invalid_string_request(
            template_url=self.get_long_invalid_string.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{int}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_long_invalid_string.metadata = {"url": "/dictionary/prim/long/1.integer.0"}  # type: ignore

    @distributed_trace_async
    async def get_float_valid(self, **kwargs: Any) -> Dict[str, float]:
        """Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to float or the result of cls(response)
        :rtype: dict[str, float]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]

        request = build_get_float_valid_request(
            template_url=self.get_float_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{float}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_valid.metadata = {"url": "/dictionary/prim/float/0--0.01-1.2e20"}  # type: ignore

    @overload
    async def put_float_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, float], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body: Required.
        :type array_body: dict[str, float]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_float_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_float_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, float], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, float] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{float}")

        request = build_put_float_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_float_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_float_valid.metadata = {"url": "/dictionary/prim/float/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def get_float_invalid_null(self, **kwargs: Any) -> Dict[str, float]:
        """Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to float or the result of cls(response)
        :rtype: dict[str, float]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]

        request = build_get_float_invalid_null_request(
            template_url=self.get_float_invalid_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{float}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_invalid_null.metadata = {"url": "/dictionary/prim/float/0.0-null-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def get_float_invalid_string(self, **kwargs: Any) -> Dict[str, float]:
        """Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to float or the result of cls(response)
        :rtype: dict[str, float]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]

        request = build_get_float_invalid_string_request(
            template_url=self.get_float_invalid_string.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{float}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_float_invalid_string.metadata = {"url": "/dictionary/prim/float/1.number.0"}  # type: ignore

    @distributed_trace_async
    async def get_double_valid(self, **kwargs: Any) -> Dict[str, float]:
        """Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to float or the result of cls(response)
        :rtype: dict[str, float]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]

        request = build_get_double_valid_request(
            template_url=self.get_double_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{float}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_valid.metadata = {"url": "/dictionary/prim/double/0--0.01-1.2e20"}  # type: ignore

    @overload
    async def put_double_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, float], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body: Required.
        :type array_body: dict[str, float]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_double_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_double_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, float], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, float] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{float}")

        request = build_put_double_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_double_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_double_valid.metadata = {"url": "/dictionary/prim/double/0--0.01-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def get_double_invalid_null(self, **kwargs: Any) -> Dict[str, float]:
        """Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to float or the result of cls(response)
        :rtype: dict[str, float]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]

        request = build_get_double_invalid_null_request(
            template_url=self.get_double_invalid_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{float}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_invalid_null.metadata = {"url": "/dictionary/prim/double/0.0-null-1.2e20"}  # type: ignore

    @distributed_trace_async
    async def get_double_invalid_string(self, **kwargs: Any) -> Dict[str, float]:
        """Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to float or the result of cls(response)
        :rtype: dict[str, float]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, float]]

        request = build_get_double_invalid_string_request(
            template_url=self.get_double_invalid_string.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{float}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_double_invalid_string.metadata = {"url": "/dictionary/prim/double/1.number.0"}  # type: ignore

    @distributed_trace_async
    async def get_string_valid(self, **kwargs: Any) -> Dict[str, str]:
        """Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to str or the result of cls(response)
        :rtype: dict[str, str]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]

        request = build_get_string_valid_request(
            template_url=self.get_string_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{str}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_valid.metadata = {"url": "/dictionary/prim/string/foo1.foo2.foo3"}  # type: ignore

    @overload
    async def put_string_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, str], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.

        :param array_body: Required.
        :type array_body: dict[str, str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_string_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_string_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, str], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{str}")

        request = build_put_string_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_string_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_string_valid.metadata = {"url": "/dictionary/prim/string/foo1.foo2.foo3"}  # type: ignore

    @distributed_trace_async
    async def get_string_with_null(self, **kwargs: Any) -> Dict[str, str]:
        """Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to str or the result of cls(response)
        :rtype: dict[str, str]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]

        request = build_get_string_with_null_request(
            template_url=self.get_string_with_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{str}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_with_null.metadata = {"url": "/dictionary/prim/string/foo.null.foo2"}  # type: ignore

    @distributed_trace_async
    async def get_string_with_invalid(self, **kwargs: Any) -> Dict[str, str]:
        """Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to str or the result of cls(response)
        :rtype: dict[str, str]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, str]]

        request = build_get_string_with_invalid_request(
            template_url=self.get_string_with_invalid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{str}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_string_with_invalid.metadata = {"url": "/dictionary/prim/string/foo.123.foo2"}  # type: ignore

    @distributed_trace_async
    async def get_date_valid(self, **kwargs: Any) -> Dict[str, datetime.date]:
        """Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to date or the result of cls(response)
        :rtype: dict[str, ~datetime.date]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.date]]

        request = build_get_date_valid_request(
            template_url=self.get_date_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{date}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_valid.metadata = {"url": "/dictionary/prim/date/valid"}  # type: ignore

    @overload
    async def put_date_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, datetime.date], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.

        :param array_body: Required.
        :type array_body: dict[str, ~datetime.date]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_date_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_date_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, datetime.date], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2": "1492-10-12"}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, ~datetime.date] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{date}")

        request = build_put_date_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_date_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_valid.metadata = {"url": "/dictionary/prim/date/valid"}  # type: ignore

    @distributed_trace_async
    async def get_date_invalid_null(self, **kwargs: Any) -> Dict[str, datetime.date]:
        """Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to date or the result of cls(response)
        :rtype: dict[str, ~datetime.date]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.date]]

        request = build_get_date_invalid_null_request(
            template_url=self.get_date_invalid_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{date}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_invalid_null.metadata = {"url": "/dictionary/prim/date/invalidnull"}  # type: ignore

    @distributed_trace_async
    async def get_date_invalid_chars(self, **kwargs: Any) -> Dict[str, datetime.date]:
        """Get date dictionary value {"0": "2011-03-22", "1": "date"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to date or the result of cls(response)
        :rtype: dict[str, ~datetime.date]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.date]]

        request = build_get_date_invalid_chars_request(
            template_url=self.get_date_invalid_chars.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{date}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_invalid_chars.metadata = {"url": "/dictionary/prim/date/invalidchars"}  # type: ignore

    @distributed_trace_async
    async def get_date_time_valid(self, **kwargs: Any) -> Dict[str, datetime.datetime]:
        """Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00",
        "2": "1492-10-12T10:15:01-08:00"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to datetime or the result of cls(response)
        :rtype: dict[str, ~datetime.datetime]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.datetime]]

        request = build_get_date_time_valid_request(
            template_url=self.get_date_time_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{iso-8601}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_valid.metadata = {"url": "/dictionary/prim/date-time/valid"}  # type: ignore

    @overload
    async def put_date_time_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, datetime.datetime], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
        "1492-10-12T10:15:01-08:00"}.

        :param array_body: Required.
        :type array_body: dict[str, ~datetime.datetime]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_date_time_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
        "1492-10-12T10:15:01-08:00"}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_date_time_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, datetime.datetime], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "2000-12-01t00:00:01z", "1": "1980-01-02T00:11:35+01:00", "2":
        "1492-10-12T10:15:01-08:00"}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, ~datetime.datetime] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{iso-8601}")

        request = build_put_date_time_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_date_time_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_time_valid.metadata = {"url": "/dictionary/prim/date-time/valid"}  # type: ignore

    @distributed_trace_async
    async def get_date_time_invalid_null(self, **kwargs: Any) -> Dict[str, datetime.datetime]:
        """Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to datetime or the result of cls(response)
        :rtype: dict[str, ~datetime.datetime]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.datetime]]

        request = build_get_date_time_invalid_null_request(
            template_url=self.get_date_time_invalid_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{iso-8601}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_invalid_null.metadata = {"url": "/dictionary/prim/date-time/invalidnull"}  # type: ignore

    @distributed_trace_async
    async def get_date_time_invalid_chars(self, **kwargs: Any) -> Dict[str, datetime.datetime]:
        """Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to datetime or the result of cls(response)
        :rtype: dict[str, ~datetime.datetime]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.datetime]]

        request = build_get_date_time_invalid_chars_request(
            template_url=self.get_date_time_invalid_chars.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{iso-8601}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_invalid_chars.metadata = {"url": "/dictionary/prim/date-time/invalidchars"}  # type: ignore

    @distributed_trace_async
    async def get_date_time_rfc1123_valid(self, **kwargs: Any) -> Dict[str, datetime.datetime]:
        """Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan
        1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to datetime or the result of cls(response)
        :rtype: dict[str, ~datetime.datetime]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.datetime]]

        request = build_get_date_time_rfc1123_valid_request(
            template_url=self.get_date_time_rfc1123_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{rfc-1123}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_date_time_rfc1123_valid.metadata = {"url": "/dictionary/prim/date-time-rfc1123/valid"}  # type: ignore

    @overload
    async def put_date_time_rfc1123_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, datetime.datetime], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980
        00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.

        :param array_body: Required.
        :type array_body: dict[str, ~datetime.datetime]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_date_time_rfc1123_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980
        00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_date_time_rfc1123_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, datetime.datetime], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1": "Wed, 02 Jan 1980
        00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, ~datetime.datetime] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{rfc-1123}")

        request = build_put_date_time_rfc1123_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_date_time_rfc1123_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_date_time_rfc1123_valid.metadata = {"url": "/dictionary/prim/date-time-rfc1123/valid"}  # type: ignore

    @distributed_trace_async
    async def get_duration_valid(self, **kwargs: Any) -> Dict[str, datetime.timedelta]:
        """Get duration dictionary value {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to timedelta or the result of cls(response)
        :rtype: dict[str, ~datetime.timedelta]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, datetime.timedelta]]

        request = build_get_duration_valid_request(
            template_url=self.get_duration_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{duration}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_duration_valid.metadata = {"url": "/dictionary/prim/duration/valid"}  # type: ignore

    @overload
    async def put_duration_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, datetime.timedelta], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.

        :param array_body: Required.
        :type array_body: dict[str, ~datetime.timedelta]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_duration_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_duration_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, datetime.timedelta], IO], **kwargs: Any
    ) -> None:
        """Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, ~datetime.timedelta] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{duration}")

        request = build_put_duration_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_duration_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_duration_valid.metadata = {"url": "/dictionary/prim/duration/valid"}  # type: ignore

    @distributed_trace_async
    async def get_byte_valid(self, **kwargs: Any) -> Dict[str, bytes]:
        """Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)}
        with each item encoded in base64.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to bytes or the result of cls(response)
        :rtype: dict[str, bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bytes]]

        request = build_get_byte_valid_request(
            template_url=self.get_byte_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{bytearray}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_byte_valid.metadata = {"url": "/dictionary/prim/byte/valid"}  # type: ignore

    @overload
    async def put_byte_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)}
        with each elementencoded in base 64.

        :param array_body: Required.
        :type array_body: dict[str, bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_byte_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)}
        with each elementencoded in base 64.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_byte_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, bytes], IO], **kwargs: Any
    ) -> None:
        """Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2": hex (25, 29, 43)}
        with each elementencoded in base 64.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, bytes] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{bytearray}")

        request = build_put_byte_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_byte_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_byte_valid.metadata = {"url": "/dictionary/prim/byte/valid"}  # type: ignore

    @distributed_trace_async
    async def get_byte_invalid_null(self, **kwargs: Any) -> Dict[str, bytes]:
        """Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the first item base64
        encoded.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to bytes or the result of cls(response)
        :rtype: dict[str, bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bytes]]

        request = build_get_byte_invalid_null_request(
            template_url=self.get_byte_invalid_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{bytearray}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_byte_invalid_null.metadata = {"url": "/dictionary/prim/byte/invalidnull"}  # type: ignore

    @distributed_trace_async
    async def get_base64_url(self, **kwargs: Any) -> Dict[str, bytes]:
        """Get base64url dictionary value {"0": "a string that gets encoded with base64url", "1": "test
        string", "2": "Lorem ipsum"}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to bytes or the result of cls(response)
        :rtype: dict[str, bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, bytes]]

        request = build_get_base64_url_request(
            template_url=self.get_base64_url.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{base64}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_base64_url.metadata = {"url": "/dictionary/prim/base64url/valid"}  # type: ignore

    @distributed_trace_async
    async def get_complex_null(self, **kwargs: Any) -> Optional[Dict[str, _models.Widget]]:
        """Get dictionary of complex type null value.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to Widget or None or the result of cls(response)
        :rtype: dict[str, ~bodydictionary.models.Widget] or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[Dict[str, _models.Widget]]]

        request = build_get_complex_null_request(
            template_url=self.get_complex_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{Widget}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_null.metadata = {"url": "/dictionary/complex/null"}  # type: ignore

    @distributed_trace_async
    async def get_complex_empty(self, **kwargs: Any) -> Dict[str, _models.Widget]:
        """Get empty dictionary of complex type {}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to Widget or the result of cls(response)
        :rtype: dict[str, ~bodydictionary.models.Widget]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, _models.Widget]]

        request = build_get_complex_empty_request(
            template_url=self.get_complex_empty.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{Widget}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_empty.metadata = {"url": "/dictionary/complex/empty"}  # type: ignore

    @distributed_trace_async
    async def get_complex_item_null(self, **kwargs: Any) -> Dict[str, _models.Widget]:
        """Get dictionary of complex type with null item {"0": {"integer": 1, "string": "2"}, "1": null,
        "2": {"integer": 5, "string": "6"}}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to Widget or the result of cls(response)
        :rtype: dict[str, ~bodydictionary.models.Widget]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, _models.Widget]]

        request = build_get_complex_item_null_request(
            template_url=self.get_complex_item_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{Widget}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_item_null.metadata = {"url": "/dictionary/complex/itemnull"}  # type: ignore

    @distributed_trace_async
    async def get_complex_item_empty(self, **kwargs: Any) -> Dict[str, _models.Widget]:
        """Get dictionary of complex type with empty item {"0": {"integer": 1, "string": "2"}, "1:" {},
        "2": {"integer": 5, "string": "6"}}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to Widget or the result of cls(response)
        :rtype: dict[str, ~bodydictionary.models.Widget]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, _models.Widget]]

        request = build_get_complex_item_empty_request(
            template_url=self.get_complex_item_empty.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{Widget}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_item_empty.metadata = {"url": "/dictionary/complex/itemempty"}  # type: ignore

    @distributed_trace_async
    async def get_complex_valid(self, **kwargs: Any) -> Dict[str, _models.Widget]:
        """Get dictionary of complex type with {"0": {"integer": 1, "string": "2"}, "1": {"integer": 3,
        "string": "4"}, "2": {"integer": 5, "string": "6"}}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to Widget or the result of cls(response)
        :rtype: dict[str, ~bodydictionary.models.Widget]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, _models.Widget]]

        request = build_get_complex_valid_request(
            template_url=self.get_complex_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{Widget}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_valid.metadata = {"url": "/dictionary/complex/valid"}  # type: ignore

    @overload
    async def put_complex_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, _models.Widget], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1":
        {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.

        :param array_body: Required.
        :type array_body: dict[str, ~bodydictionary.models.Widget]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_complex_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1":
        {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_complex_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, _models.Widget], IO], **kwargs: Any
    ) -> None:
        """Put an dictionary of complex type with values {"0": {"integer": 1, "string": "2"}, "1":
        {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, ~bodydictionary.models.Widget] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{Widget}")

        request = build_put_complex_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_complex_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_complex_valid.metadata = {"url": "/dictionary/complex/valid"}  # type: ignore

    @distributed_trace_async
    async def get_array_null(self, **kwargs: Any) -> Optional[Dict[str, List[str]]]:
        """Get a null array.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to list of str or None or the result of cls(response)
        :rtype: dict[str, list[str]] or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Optional[Dict[str, List[str]]]]

        request = build_get_array_null_request(
            template_url=self.get_array_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{[str]}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_null.metadata = {"url": "/dictionary/array/null"}  # type: ignore

    @distributed_trace_async
    async def get_array_empty(self, **kwargs: Any) -> Dict[str, List[str]]:
        """Get an empty dictionary {}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to list of str or the result of cls(response)
        :rtype: dict[str, list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, List[str]]]

        request = build_get_array_empty_request(
            template_url=self.get_array_empty.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{[str]}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_empty.metadata = {"url": "/dictionary/array/empty"}  # type: ignore

    @distributed_trace_async
    async def get_array_item_null(self, **kwargs: Any) -> Dict[str, List[str]]:
        """Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null, "2": ["7", "8", "9"]}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to list of str or the result of cls(response)
        :rtype: dict[str, list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, List[str]]]

        request = build_get_array_item_null_request(
            template_url=self.get_array_item_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{[str]}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_item_null.metadata = {"url": "/dictionary/array/itemnull"}  # type: ignore

    @distributed_trace_async
    async def get_array_item_empty(self, **kwargs: Any) -> Dict[str, List[str]]:
        """Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2": ["7", "8", "9"]}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to list of str or the result of cls(response)
        :rtype: dict[str, list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, List[str]]]

        request = build_get_array_item_empty_request(
            template_url=self.get_array_item_empty.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{[str]}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_item_empty.metadata = {"url": "/dictionary/array/itemempty"}  # type: ignore

    @distributed_trace_async
    async def get_array_valid(self, **kwargs: Any) -> Dict[str, List[str]]:
        """Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8",
        "9"]}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to list of str or the result of cls(response)
        :rtype: dict[str, list[str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, List[str]]]

        request = build_get_array_valid_request(
            template_url=self.get_array_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{[str]}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array_valid.metadata = {"url": "/dictionary/array/valid"}  # type: ignore

    @overload
    async def put_array_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, List[str]], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8",
        "9"]}.

        :param array_body: Required.
        :type array_body: dict[str, list[str]]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_array_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8",
        "9"]}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_array_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, List[str]], IO], **kwargs: Any
    ) -> None:
        """Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5", "6"], "2": ["7", "8",
        "9"]}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, list[str]] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{[str]}")

        request = build_put_array_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_array_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_array_valid.metadata = {"url": "/dictionary/array/valid"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_null(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries with value null.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to dict mapping str to str or the result of cls(response)
        :rtype: dict[str, dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]

        request = build_get_dictionary_null_request(
            template_url=self.get_dictionary_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{{str}}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_null.metadata = {"url": "/dictionary/dictionary/null"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_empty(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries of type <string, string> with value {}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to dict mapping str to str or the result of cls(response)
        :rtype: dict[str, dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]

        request = build_get_dictionary_empty_request(
            template_url=self.get_dictionary_empty.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{{str}}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_empty.metadata = {"url": "/dictionary/dictionary/empty"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_item_null(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": null, "2": {"7": "seven", "8": "eight", "9": "nine"}}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to dict mapping str to str or the result of cls(response)
        :rtype: dict[str, dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]

        request = build_get_dictionary_item_null_request(
            template_url=self.get_dictionary_item_null.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{{str}}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_item_null.metadata = {"url": "/dictionary/dictionary/itemnull"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_item_empty(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": {}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to dict mapping str to str or the result of cls(response)
        :rtype: dict[str, dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]

        request = build_get_dictionary_item_empty_request(
            template_url=self.get_dictionary_item_empty.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{{str}}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_item_empty.metadata = {"url": "/dictionary/dictionary/itemempty"}  # type: ignore

    @distributed_trace_async
    async def get_dictionary_valid(self, **kwargs: Any) -> Dict[str, Dict[str, str]]:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8":
        "eight", "9": "nine"}}.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to dict mapping str to str or the result of cls(response)
        :rtype: dict[str, dict[str, str]]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[Dict[str, Dict[str, str]]]

        request = build_get_dictionary_valid_request(
            template_url=self.get_dictionary_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{{str}}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary_valid.metadata = {"url": "/dictionary/dictionary/valid"}  # type: ignore

    @overload
    async def put_dictionary_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Dict[str, Dict[str, str]], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8":
        "eight", "9": "nine"}}.

        :param array_body: Required.
        :type array_body: dict[str, dict[str, str]]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_dictionary_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8":
        "eight", "9": "nine"}}.

        :param array_body: Required.
        :type array_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_dictionary_valid(  # pylint: disable=inconsistent-return-statements
        self, array_body: Union[Dict[str, Dict[str, str]], IO], **kwargs: Any
    ) -> None:
        """Get an dictionaries of dictionaries of type <string, string> with value {"0": {"1": "one", "2":
        "two", "3": "three"}, "1": {"4": "four", "5": "five", "6": "six"}, "2": {"7": "seven", "8":
        "eight", "9": "nine"}}.

        :param array_body: Is either a dict type or a IO type. Required.
        :type array_body: dict[str, dict[str, str]] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(array_body, (IO, bytes)):
            _content = array_body
        else:
            _json = self._serialize.body(array_body, "{{str}}")

        request = build_put_dictionary_valid_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_dictionary_valid.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_dictionary_valid.metadata = {"url": "/dictionary/dictionary/valid"}  # type: ignore
