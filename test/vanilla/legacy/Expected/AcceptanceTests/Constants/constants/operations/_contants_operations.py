# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Optional, TYPE_CHECKING

from msrest import Serializer

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Optional, TypeVar, Union

    T = TypeVar("T")
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_put_no_model_as_string_no_required_two_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', None))  # type: Optional[Union[str, "_models.NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum"]]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putNoModelAsStringNoRequiredTwoValueNoDefault")

    # Construct parameters
    if input is not None:
        _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_no_model_as_string_no_required_two_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: Union[str, "_models.NoModelAsStringNoRequiredTwoValueDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putNoModelAsStringNoRequiredTwoValueDefault")

    # Construct parameters
    if input is not None:
        _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_no_model_as_string_no_required_one_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putNoModelAsStringNoRequiredOneValueNoDefault")

    # Construct parameters
    if input is not None:
        _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_no_model_as_string_no_required_one_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putNoModelAsStringNoRequiredOneValueDefault")

    # Construct parameters
    if input is not None:
        _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_no_model_as_string_required_two_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input')  # type: Union[str, "_models.NoModelAsStringRequiredTwoValueNoDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putNoModelAsStringRequiredTwoValueNoDefault")

    # Construct parameters
    _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_no_model_as_string_required_two_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: Union[str, "_models.NoModelAsStringRequiredTwoValueDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putNoModelAsStringRequiredTwoValueDefault")

    # Construct parameters
    _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_no_model_as_string_required_one_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putNoModelAsStringRequiredOneValueNoDefault")

    # Construct parameters
    _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_no_model_as_string_required_one_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putNoModelAsStringRequiredOneValueDefault")

    # Construct parameters
    _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_model_as_string_no_required_two_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', None))  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredTwoValueNoDefaultOpEnum"]]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putModelAsStringNoRequiredTwoValueNoDefault")

    # Construct parameters
    if input is not None:
        _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_model_as_string_no_required_two_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: Union[str, "_models.ModelAsStringNoRequiredTwoValueDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putModelAsStringNoRequiredTwoValueDefault")

    # Construct parameters
    if input is not None:
        _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_model_as_string_no_required_one_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', None))  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredOneValueNoDefaultOpEnum"]]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putModelAsStringNoRequiredOneValueNoDefault")

    # Construct parameters
    if input is not None:
        _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_model_as_string_no_required_one_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: Union[str, "_models.ModelAsStringNoRequiredOneValueDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putModelAsStringNoRequiredOneValueDefault")

    # Construct parameters
    if input is not None:
        _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_model_as_string_required_two_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input')  # type: Union[str, "_models.ModelAsStringRequiredTwoValueNoDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putModelAsStringRequiredTwoValueNoDefault")

    # Construct parameters
    _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_model_as_string_required_two_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: Union[str, "_models.ModelAsStringRequiredTwoValueDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putModelAsStringRequiredTwoValueDefault")

    # Construct parameters
    _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_model_as_string_required_one_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input')  # type: Union[str, "_models.ModelAsStringRequiredOneValueNoDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putModelAsStringRequiredOneValueNoDefault")

    # Construct parameters
    _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_model_as_string_required_one_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    input = kwargs.pop('input', _params.pop('input', "value1"))  # type: Union[str, "_models.ModelAsStringRequiredOneValueDefaultOpEnum"]
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/putModelAsStringRequiredOneValueDefault")

    # Construct parameters
    _params['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        **kwargs
    )


def build_put_client_constants_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    header_constant = kwargs.pop('header_constant', _headers.pop('header-constant', True))  # type: bool
    query_constant = kwargs.pop('query_constant', _params.pop('query-constant', 100))  # type: int
    path_constant = kwargs.pop('path_constant', "path")  # type: str
    # Construct URL
    _url = kwargs.pop("template_url", "/constants/clientConstants/{path-constant}")
    path_format_arguments = {
        "path-constant": _SERIALIZER.url("path_constant", path_constant, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params['query-constant'] = _SERIALIZER.query("query_constant", query_constant, 'int')

    # Construct headers
    _headers['header-constant'] = _SERIALIZER.header("header_constant", header_constant, 'bool')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )

# fmt: on
class ContantsOperations(object):
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~constants.AutoRestSwaggerConstantService`'s
        :attr:`contants` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def put_no_model_as_string_no_required_two_value_no_default(  # pylint: disable=inconsistent-return-statements
        self,
        input=None,  # type: Optional[Union[str, "_models.NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are: "value1" and "value2". Default value is None.
        :type input: str or ~constants.models.NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_no_model_as_string_no_required_two_value_no_default_request(
            input=input,
            template_url=self.put_no_model_as_string_no_required_two_value_no_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_no_required_two_value_no_default.metadata = {"url": "/constants/putNoModelAsStringNoRequiredTwoValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_no_required_two_value_default(  # pylint: disable=inconsistent-return-statements
        self,
        input="value1",  # type: Union[str, "_models.NoModelAsStringNoRequiredTwoValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are: "value1" and "value2". Default value is "value1".
        :type input: str or ~constants.models.NoModelAsStringNoRequiredTwoValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_no_model_as_string_no_required_two_value_default_request(
            input=input,
            template_url=self.put_no_model_as_string_no_required_two_value_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_no_required_two_value_default.metadata = {"url": "/constants/putNoModelAsStringNoRequiredTwoValueDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_no_required_one_value_no_default(  # pylint: disable=inconsistent-return-statements
        self,
        input="value1",  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are "value1" and None. Default value is "value1".
        :type input: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_no_model_as_string_no_required_one_value_no_default_request(
            input=input,
            template_url=self.put_no_model_as_string_no_required_one_value_no_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_no_required_one_value_no_default.metadata = {"url": "/constants/putNoModelAsStringNoRequiredOneValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_no_required_one_value_default(  # pylint: disable=inconsistent-return-statements
        self,
        input="value1",  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are "value1" and None. Default value is "value1".
        :type input: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_no_model_as_string_no_required_one_value_default_request(
            input=input,
            template_url=self.put_no_model_as_string_no_required_one_value_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_no_required_one_value_default.metadata = {"url": "/constants/putNoModelAsStringNoRequiredOneValueDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_required_two_value_no_default(  # pylint: disable=inconsistent-return-statements
        self,
        input,  # type: Union[str, "_models.NoModelAsStringRequiredTwoValueNoDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are: "value1" and "value2". Required.
        :type input: str or ~constants.models.NoModelAsStringRequiredTwoValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_no_model_as_string_required_two_value_no_default_request(
            input=input,
            template_url=self.put_no_model_as_string_required_two_value_no_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_required_two_value_no_default.metadata = {"url": "/constants/putNoModelAsStringRequiredTwoValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_required_two_value_default(  # pylint: disable=inconsistent-return-statements
        self,
        input="value1",  # type: Union[str, "_models.NoModelAsStringRequiredTwoValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are: "value1" and "value2". Default value is "value1".
        :type input: str or ~constants.models.NoModelAsStringRequiredTwoValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_no_model_as_string_required_two_value_default_request(
            input=input,
            template_url=self.put_no_model_as_string_required_two_value_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_required_two_value_default.metadata = {"url": "/constants/putNoModelAsStringRequiredTwoValueDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_required_one_value_no_default(  # pylint: disable=inconsistent-return-statements
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :keyword input: Default value is "value1". Note that overriding this default value may result
         in unsupported behavior.
        :paramtype input: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        input = kwargs.pop("input", _params.pop("input", "value1"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_no_model_as_string_required_one_value_no_default_request(
            input=input,
            template_url=self.put_no_model_as_string_required_one_value_no_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_required_one_value_no_default.metadata = {"url": "/constants/putNoModelAsStringRequiredOneValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_required_one_value_default(  # pylint: disable=inconsistent-return-statements
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :keyword input: Default value is "value1". Note that overriding this default value may result
         in unsupported behavior.
        :paramtype input: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

        input = kwargs.pop("input", _params.pop("input", "value1"))  # type: str
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_no_model_as_string_required_one_value_default_request(
            input=input,
            template_url=self.put_no_model_as_string_required_one_value_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_required_one_value_default.metadata = {"url": "/constants/putNoModelAsStringRequiredOneValueDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_no_required_two_value_no_default(  # pylint: disable=inconsistent-return-statements
        self,
        input=None,  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredTwoValueNoDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are: "value1" and "value2". Default value is None.
        :type input: str or ~constants.models.ModelAsStringNoRequiredTwoValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_model_as_string_no_required_two_value_no_default_request(
            input=input,
            template_url=self.put_model_as_string_no_required_two_value_no_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_no_required_two_value_no_default.metadata = {"url": "/constants/putModelAsStringNoRequiredTwoValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_no_required_two_value_default(  # pylint: disable=inconsistent-return-statements
        self,
        input="value1",  # type: Union[str, "_models.ModelAsStringNoRequiredTwoValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are: "value1" and "value2". Default value is "value1".
        :type input: str or ~constants.models.ModelAsStringNoRequiredTwoValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_model_as_string_no_required_two_value_default_request(
            input=input,
            template_url=self.put_model_as_string_no_required_two_value_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_no_required_two_value_default.metadata = {"url": "/constants/putModelAsStringNoRequiredTwoValueDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_no_required_one_value_no_default(  # pylint: disable=inconsistent-return-statements
        self,
        input=None,  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredOneValueNoDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: "value1" Default value is None.
        :type input: str or ~constants.models.ModelAsStringNoRequiredOneValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_model_as_string_no_required_one_value_no_default_request(
            input=input,
            template_url=self.put_model_as_string_no_required_one_value_no_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_no_required_one_value_no_default.metadata = {"url": "/constants/putModelAsStringNoRequiredOneValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_no_required_one_value_default(  # pylint: disable=inconsistent-return-statements
        self,
        input="value1",  # type: Union[str, "_models.ModelAsStringNoRequiredOneValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: "value1" Default value is "value1".
        :type input: str or ~constants.models.ModelAsStringNoRequiredOneValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_model_as_string_no_required_one_value_default_request(
            input=input,
            template_url=self.put_model_as_string_no_required_one_value_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_no_required_one_value_default.metadata = {"url": "/constants/putModelAsStringNoRequiredOneValueDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_required_two_value_no_default(  # pylint: disable=inconsistent-return-statements
        self,
        input,  # type: Union[str, "_models.ModelAsStringRequiredTwoValueNoDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are: "value1" and "value2". Required.
        :type input: str or ~constants.models.ModelAsStringRequiredTwoValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_model_as_string_required_two_value_no_default_request(
            input=input,
            template_url=self.put_model_as_string_required_two_value_no_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_required_two_value_no_default.metadata = {"url": "/constants/putModelAsStringRequiredTwoValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_required_two_value_default(  # pylint: disable=inconsistent-return-statements
        self,
        input="value1",  # type: Union[str, "_models.ModelAsStringRequiredTwoValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: Known values are: "value1" and "value2". Default value is "value1".
        :type input: str or ~constants.models.ModelAsStringRequiredTwoValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_model_as_string_required_two_value_default_request(
            input=input,
            template_url=self.put_model_as_string_required_two_value_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_required_two_value_default.metadata = {"url": "/constants/putModelAsStringRequiredTwoValueDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_required_one_value_no_default(  # pylint: disable=inconsistent-return-statements
        self,
        input,  # type: Union[str, "_models.ModelAsStringRequiredOneValueNoDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: "value1" Required.
        :type input: str or ~constants.models.ModelAsStringRequiredOneValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_model_as_string_required_one_value_no_default_request(
            input=input,
            template_url=self.put_model_as_string_required_one_value_no_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_required_one_value_no_default.metadata = {"url": "/constants/putModelAsStringRequiredOneValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_required_one_value_default(  # pylint: disable=inconsistent-return-statements
        self,
        input="value1",  # type: Union[str, "_models.ModelAsStringRequiredOneValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input: "value1" Default value is "value1".
        :type input: str or ~constants.models.ModelAsStringRequiredOneValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_model_as_string_required_one_value_default_request(
            input=input,
            template_url=self.put_model_as_string_required_one_value_default.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_required_one_value_default.metadata = {"url": "/constants/putModelAsStringRequiredOneValueDefault"}  # type: ignore

    @distributed_trace
    def put_client_constants(  # pylint: disable=inconsistent-return-statements
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Pass constants from the client to this function. Will pass in constant path, query, and header
        parameters.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_put_client_constants_request(
            header_constant=self._config.header_constant,
            query_constant=self._config.query_constant,
            path_constant=self._config.path_constant,
            template_url=self.put_client_constants.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_client_constants.metadata = {"url": "/constants/clientConstants/{path-constant}"}  # type: ignore
