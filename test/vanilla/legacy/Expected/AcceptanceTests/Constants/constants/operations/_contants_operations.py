# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar, Union

    T = TypeVar("T")
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
# fmt: off

def build_put_no_model_as_string_no_required_two_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', None)  # type: Optional[Union[str, "_models.NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum"]]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putNoModelAsStringNoRequiredTwoValueNoDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if input is not None:
        query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_no_model_as_string_no_required_two_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', "value1")  # type: Optional[Union[str, "_models.NoModelAsStringNoRequiredTwoValueDefaultOpEnum"]]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putNoModelAsStringNoRequiredTwoValueDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if input is not None:
        query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_no_model_as_string_no_required_one_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', "value1")  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putNoModelAsStringNoRequiredOneValueNoDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if input is not None:
        query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_no_model_as_string_no_required_one_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', "value1")  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putNoModelAsStringNoRequiredOneValueDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if input is not None:
        query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_no_model_as_string_required_two_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input')  # type: Union[str, "_models.NoModelAsStringRequiredTwoValueNoDefaultOpEnum"]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putNoModelAsStringRequiredTwoValueNoDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_no_model_as_string_required_two_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', "value1")  # type: Union[str, "_models.NoModelAsStringRequiredTwoValueDefaultOpEnum"]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putNoModelAsStringRequiredTwoValueDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_no_model_as_string_required_one_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = "value1"
    # Construct URL
    url = kwargs.pop("template_url", '/constants/putNoModelAsStringRequiredOneValueNoDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_no_model_as_string_required_one_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = "value1"
    # Construct URL
    url = kwargs.pop("template_url", '/constants/putNoModelAsStringRequiredOneValueDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_model_as_string_no_required_two_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', None)  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredTwoValueNoDefaultOpEnum"]]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putModelAsStringNoRequiredTwoValueNoDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if input is not None:
        query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_model_as_string_no_required_two_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', "value1")  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredTwoValueDefaultOpEnum"]]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putModelAsStringNoRequiredTwoValueDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if input is not None:
        query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_model_as_string_no_required_one_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', None)  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredOneValueNoDefaultOpEnum"]]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putModelAsStringNoRequiredOneValueNoDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if input is not None:
        query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_model_as_string_no_required_one_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', "value1")  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredOneValueDefaultOpEnum"]]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putModelAsStringNoRequiredOneValueDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if input is not None:
        query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_model_as_string_required_two_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input')  # type: Union[str, "_models.ModelAsStringRequiredTwoValueNoDefaultOpEnum"]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putModelAsStringRequiredTwoValueNoDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_model_as_string_required_two_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', "value1")  # type: Union[str, "_models.ModelAsStringRequiredTwoValueDefaultOpEnum"]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putModelAsStringRequiredTwoValueDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_model_as_string_required_one_value_no_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input')  # type: Union[str, "_models.ModelAsStringRequiredOneValueNoDefaultOpEnum"]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putModelAsStringRequiredOneValueNoDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_model_as_string_required_one_value_default_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    input = kwargs.pop('input', "value1")  # type: Union[str, "_models.ModelAsStringRequiredOneValueDefaultOpEnum"]

    # Construct URL
    url = kwargs.pop("template_url", '/constants/putModelAsStringRequiredOneValueDefault')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['input'] = _SERIALIZER.query("input", input, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        **kwargs
    )


def build_put_client_constants_request(
    path_constant="path",  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    header_constant = kwargs.pop('header_constant', True)  # type: bool
    query_constant = kwargs.pop('query_constant', 100)  # type: int

    # Construct URL
    url = kwargs.pop("template_url", '/constants/clientConstants/{path-constant}')
    path_format_arguments = {
        "path-constant": _SERIALIZER.url("path_constant", path_constant, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['query-constant'] = _SERIALIZER.query("query_constant", query_constant, 'int')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['header-constant'] = _SERIALIZER.header("header_constant", header_constant, 'bool')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class ContantsOperations(object):
    """ContantsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~constants.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def put_no_model_as_string_no_required_two_value_no_default(
        self,
        input=None,  # type: Optional[Union[str, "_models.NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.NoModelAsStringNoRequiredTwoValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_no_model_as_string_no_required_two_value_no_default_request(
            input=input,
            template_url=self.put_no_model_as_string_no_required_two_value_no_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_no_required_two_value_no_default.metadata = {"url": "/constants/putNoModelAsStringNoRequiredTwoValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_no_required_two_value_default(
        self,
        input="value1",  # type: Optional[Union[str, "_models.NoModelAsStringNoRequiredTwoValueDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.NoModelAsStringNoRequiredTwoValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_no_model_as_string_no_required_two_value_default_request(
            input=input,
            template_url=self.put_no_model_as_string_no_required_two_value_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_no_required_two_value_default.metadata = {"url": "/constants/putNoModelAsStringNoRequiredTwoValueDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_no_required_one_value_no_default(
        self,
        input="value1",  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_no_model_as_string_no_required_one_value_no_default_request(
            input=input,
            template_url=self.put_no_model_as_string_no_required_one_value_no_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_no_required_one_value_no_default.metadata = {"url": "/constants/putNoModelAsStringNoRequiredOneValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_no_required_one_value_default(
        self,
        input="value1",  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_no_model_as_string_no_required_one_value_default_request(
            input=input,
            template_url=self.put_no_model_as_string_no_required_one_value_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_no_required_one_value_default.metadata = {"url": "/constants/putNoModelAsStringNoRequiredOneValueDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_required_two_value_no_default(
        self,
        input,  # type: Union[str, "_models.NoModelAsStringRequiredTwoValueNoDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.NoModelAsStringRequiredTwoValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_no_model_as_string_required_two_value_no_default_request(
            input=input,
            template_url=self.put_no_model_as_string_required_two_value_no_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_required_two_value_no_default.metadata = {"url": "/constants/putNoModelAsStringRequiredTwoValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_required_two_value_default(
        self,
        input="value1",  # type: Union[str, "_models.NoModelAsStringRequiredTwoValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.NoModelAsStringRequiredTwoValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_no_model_as_string_required_two_value_default_request(
            input=input,
            template_url=self.put_no_model_as_string_required_two_value_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_required_two_value_default.metadata = {"url": "/constants/putNoModelAsStringRequiredTwoValueDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_required_one_value_no_default(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_no_model_as_string_required_one_value_no_default_request(
            template_url=self.put_no_model_as_string_required_one_value_no_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_required_one_value_no_default.metadata = {"url": "/constants/putNoModelAsStringRequiredOneValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_no_model_as_string_required_one_value_default(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_no_model_as_string_required_one_value_default_request(
            template_url=self.put_no_model_as_string_required_one_value_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_no_model_as_string_required_one_value_default.metadata = {"url": "/constants/putNoModelAsStringRequiredOneValueDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_no_required_two_value_no_default(
        self,
        input=None,  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredTwoValueNoDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.ModelAsStringNoRequiredTwoValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_model_as_string_no_required_two_value_no_default_request(
            input=input,
            template_url=self.put_model_as_string_no_required_two_value_no_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_no_required_two_value_no_default.metadata = {"url": "/constants/putModelAsStringNoRequiredTwoValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_no_required_two_value_default(
        self,
        input="value1",  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredTwoValueDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.ModelAsStringNoRequiredTwoValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_model_as_string_no_required_two_value_default_request(
            input=input,
            template_url=self.put_model_as_string_no_required_two_value_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_no_required_two_value_default.metadata = {"url": "/constants/putModelAsStringNoRequiredTwoValueDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_no_required_one_value_no_default(
        self,
        input=None,  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredOneValueNoDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.ModelAsStringNoRequiredOneValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_model_as_string_no_required_one_value_no_default_request(
            input=input,
            template_url=self.put_model_as_string_no_required_one_value_no_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_no_required_one_value_no_default.metadata = {"url": "/constants/putModelAsStringNoRequiredOneValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_no_required_one_value_default(
        self,
        input="value1",  # type: Optional[Union[str, "_models.ModelAsStringNoRequiredOneValueDefaultOpEnum"]]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.ModelAsStringNoRequiredOneValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_model_as_string_no_required_one_value_default_request(
            input=input,
            template_url=self.put_model_as_string_no_required_one_value_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_no_required_one_value_default.metadata = {"url": "/constants/putModelAsStringNoRequiredOneValueDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_required_two_value_no_default(
        self,
        input,  # type: Union[str, "_models.ModelAsStringRequiredTwoValueNoDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.ModelAsStringRequiredTwoValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_model_as_string_required_two_value_no_default_request(
            input=input,
            template_url=self.put_model_as_string_required_two_value_no_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_required_two_value_no_default.metadata = {"url": "/constants/putModelAsStringRequiredTwoValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_required_two_value_default(
        self,
        input="value1",  # type: Union[str, "_models.ModelAsStringRequiredTwoValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.ModelAsStringRequiredTwoValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_model_as_string_required_two_value_default_request(
            input=input,
            template_url=self.put_model_as_string_required_two_value_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_required_two_value_default.metadata = {"url": "/constants/putModelAsStringRequiredTwoValueDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_required_one_value_no_default(
        self,
        input,  # type: Union[str, "_models.ModelAsStringRequiredOneValueNoDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.ModelAsStringRequiredOneValueNoDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_model_as_string_required_one_value_no_default_request(
            input=input,
            template_url=self.put_model_as_string_required_one_value_no_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_required_one_value_no_default.metadata = {"url": "/constants/putModelAsStringRequiredOneValueNoDefault"}  # type: ignore

    @distributed_trace
    def put_model_as_string_required_one_value_default(
        self,
        input="value1",  # type: Union[str, "_models.ModelAsStringRequiredOneValueDefaultOpEnum"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts constants to the testserver.

        Puts constants to the testserver.

        :param input:
        :type input: str or ~constants.models.ModelAsStringRequiredOneValueDefaultOpEnum
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_model_as_string_required_one_value_default_request(
            input=input,
            template_url=self.put_model_as_string_required_one_value_default.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_model_as_string_required_one_value_default.metadata = {"url": "/constants/putModelAsStringRequiredOneValueDefault"}  # type: ignore

    @distributed_trace
    def put_client_constants(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Pass constants from the client to this function. Will pass in constant path, query, and header
        parameters.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_put_client_constants_request(
            path_constant=self._config.path_constant,
            header_constant=self._config.header_constant,
            query_constant=self._config.query_constant,
            template_url=self.put_client_constants.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_client_constants.metadata = {"url": "/constants/clientConstants/{path-constant}"}  # type: ignore
