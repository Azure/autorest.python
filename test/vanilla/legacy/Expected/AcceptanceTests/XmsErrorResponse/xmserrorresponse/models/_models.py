# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Animal(msrest.serialization.Model):
    """Animal.

    :keyword ani_type:
    :paramtype ani_type: str
    """

    _attribute_map = {
        "ani_type": {"key": "aniType", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Animal, self).__init__(**kwargs)
        self.ani_type = kwargs.get("ani_type", None)


class BaseError(msrest.serialization.Model):
    """BaseError.

    :keyword some_base_prop:
    :paramtype some_base_prop: str
    """

    _attribute_map = {
        "some_base_prop": {"key": "someBaseProp", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(BaseError, self).__init__(**kwargs)
        self.some_base_prop = kwargs.get("some_base_prop", None)


class NotFoundErrorBase(BaseError):
    """NotFoundErrorBase.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AnimalNotFound, LinkNotFound.

    All required parameters must be populated in order to send to Azure.

    :keyword some_base_prop:
    :paramtype some_base_prop: str
    :keyword reason:
    :paramtype reason: str
    :keyword what_not_found: Required. Constant filled by server.
    :paramtype what_not_found: str
    """

    _validation = {
        "what_not_found": {"required": True},
    }

    _attribute_map = {
        "some_base_prop": {"key": "someBaseProp", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "what_not_found": {"key": "whatNotFound", "type": "str"},
    }

    _subtype_map = {"what_not_found": {"AnimalNotFound": "AnimalNotFound", "InvalidResourceLink": "LinkNotFound"}}

    def __init__(self, **kwargs):
        super(NotFoundErrorBase, self).__init__(**kwargs)
        self.reason = kwargs.get("reason", None)
        self.what_not_found = "NotFoundErrorBase"  # type: str


class AnimalNotFound(NotFoundErrorBase):
    """AnimalNotFound.

    All required parameters must be populated in order to send to Azure.

    :keyword some_base_prop:
    :paramtype some_base_prop: str
    :keyword reason:
    :paramtype reason: str
    :keyword what_not_found: Required. Constant filled by server.
    :paramtype what_not_found: str
    :keyword name:
    :paramtype name: str
    """

    _validation = {
        "what_not_found": {"required": True},
    }

    _attribute_map = {
        "some_base_prop": {"key": "someBaseProp", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "what_not_found": {"key": "whatNotFound", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(AnimalNotFound, self).__init__(**kwargs)
        self.what_not_found = "AnimalNotFound"  # type: str
        self.name = kwargs.get("name", None)


class LinkNotFound(NotFoundErrorBase):
    """LinkNotFound.

    All required parameters must be populated in order to send to Azure.

    :keyword some_base_prop:
    :paramtype some_base_prop: str
    :keyword reason:
    :paramtype reason: str
    :keyword what_not_found: Required. Constant filled by server.
    :paramtype what_not_found: str
    :keyword what_sub_address:
    :paramtype what_sub_address: str
    """

    _validation = {
        "what_not_found": {"required": True},
    }

    _attribute_map = {
        "some_base_prop": {"key": "someBaseProp", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "what_not_found": {"key": "whatNotFound", "type": "str"},
        "what_sub_address": {"key": "whatSubAddress", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(LinkNotFound, self).__init__(**kwargs)
        self.what_not_found = "InvalidResourceLink"  # type: str
        self.what_sub_address = kwargs.get("what_sub_address", None)


class Pet(Animal):
    """Pet.

    Variables are only populated by the server, and will be ignored when sending a request.

    :keyword ani_type:
    :paramtype ani_type: str
    :ivar name: Gets the Pet by id.
    :vartype name: str
    """

    _validation = {
        "name": {"readonly": True},
    }

    _attribute_map = {
        "ani_type": {"key": "aniType", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Pet, self).__init__(**kwargs)
        self.name = None


class PetAction(msrest.serialization.Model):
    """PetAction.

    :keyword action_response: action feedback.
    :paramtype action_response: str
    """

    _attribute_map = {
        "action_response": {"key": "actionResponse", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PetAction, self).__init__(**kwargs)
        self.action_response = kwargs.get("action_response", None)


class PetActionError(PetAction):
    """PetActionError.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: PetSadError.

    All required parameters must be populated in order to send to Azure.

    :keyword action_response: action feedback.
    :paramtype action_response: str
    :keyword error_type: Required. Constant filled by server.
    :paramtype error_type: str
    :keyword error_message: the error message.
    :paramtype error_message: str
    """

    _validation = {
        "error_type": {"required": True},
    }

    _attribute_map = {
        "action_response": {"key": "actionResponse", "type": "str"},
        "error_type": {"key": "errorType", "type": "str"},
        "error_message": {"key": "errorMessage", "type": "str"},
    }

    _subtype_map = {"error_type": {"PetSadError": "PetSadError"}}

    def __init__(self, **kwargs):
        super(PetActionError, self).__init__(**kwargs)
        self.error_type = "PetActionError"  # type: str
        self.error_message = kwargs.get("error_message", None)


class PetSadError(PetActionError):
    """PetSadError.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: PetHungryOrThirstyError.

    All required parameters must be populated in order to send to Azure.

    :keyword action_response: action feedback.
    :paramtype action_response: str
    :keyword error_type: Required. Constant filled by server.
    :paramtype error_type: str
    :keyword error_message: the error message.
    :paramtype error_message: str
    :keyword reason: why is the pet sad.
    :paramtype reason: str
    """

    _validation = {
        "error_type": {"required": True},
    }

    _attribute_map = {
        "action_response": {"key": "actionResponse", "type": "str"},
        "error_type": {"key": "errorType", "type": "str"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
    }

    _subtype_map = {"error_type": {"PetHungryOrThirstyError": "PetHungryOrThirstyError"}}

    def __init__(self, **kwargs):
        super(PetSadError, self).__init__(**kwargs)
        self.error_type = "PetSadError"  # type: str
        self.reason = kwargs.get("reason", None)


class PetHungryOrThirstyError(PetSadError):
    """PetHungryOrThirstyError.

    All required parameters must be populated in order to send to Azure.

    :keyword action_response: action feedback.
    :paramtype action_response: str
    :keyword error_type: Required. Constant filled by server.
    :paramtype error_type: str
    :keyword error_message: the error message.
    :paramtype error_message: str
    :keyword reason: why is the pet sad.
    :paramtype reason: str
    :keyword hungry_or_thirsty: is the pet hungry or thirsty or both.
    :paramtype hungry_or_thirsty: str
    """

    _validation = {
        "error_type": {"required": True},
    }

    _attribute_map = {
        "action_response": {"key": "actionResponse", "type": "str"},
        "error_type": {"key": "errorType", "type": "str"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "reason": {"key": "reason", "type": "str"},
        "hungry_or_thirsty": {"key": "hungryOrThirsty", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(PetHungryOrThirstyError, self).__init__(**kwargs)
        self.error_type = "PetHungryOrThirstyError"  # type: str
        self.hungry_or_thirsty = kwargs.get("hungry_or_thirsty", None)
