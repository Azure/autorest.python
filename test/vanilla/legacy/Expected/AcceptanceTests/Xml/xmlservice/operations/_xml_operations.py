# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from msrest import Serializer

from .. import models as _models
from .._vendor import _convert_request

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar

    T = TypeVar("T")
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_get_complex_type_ref_no_meta_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/complex-type-ref-no-meta')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_complex_type_ref_no_meta_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/complex-type-ref-no-meta')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_complex_type_ref_with_meta_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/complex-type-ref-with-meta')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_complex_type_ref_with_meta_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/complex-type-ref-with-meta')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_simple_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/simple')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_simple_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/simple')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_wrapped_lists_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/wrapped-lists')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_wrapped_lists_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/wrapped-lists')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_headers_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    # Construct URL
    url = kwargs.pop("template_url", '/xml/headers')

    return HttpRequest(
        method="GET",
        url=url,
        **kwargs
    )


def build_get_empty_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/empty-list')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_empty_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/empty-list')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_empty_wrapped_lists_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/empty-wrapped-lists')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_empty_wrapped_lists_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/empty-wrapped-lists')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_root_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/root-list')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_root_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/root-list')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_root_list_single_item_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/root-list-single-item')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_root_list_single_item_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/root-list-single-item')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_empty_root_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/empty-root-list')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_empty_root_list_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/empty-root-list')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_empty_child_element_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/empty-child-element')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_empty_child_element_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/empty-child-element')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_list_containers_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    comp = kwargs.pop('comp', "list")  # type: str

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_service_properties_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    comp = kwargs.pop('comp', "properties")  # type: str
    restype = kwargs.pop('restype', "service")  # type: str

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_put_service_properties_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    comp = kwargs.pop('comp', "properties")  # type: str
    restype = kwargs.pop('restype', "service")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_acls_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    comp = kwargs.pop('comp', "acl")  # type: str
    restype = kwargs.pop('restype', "container")  # type: str

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/mycontainer')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_put_acls_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    comp = kwargs.pop('comp', "acl")  # type: str
    restype = kwargs.pop('restype', "container")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/mycontainer')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_blobs_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    comp = kwargs.pop('comp', "list")  # type: str
    restype = kwargs.pop('restype', "container")  # type: str

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/mycontainer')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['comp'] = _SERIALIZER.query("comp", comp, 'str')
    query_parameters['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_json_input_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", '/xml/jsoninput')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_json_output_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/jsonoutput')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_xms_text_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/x-ms-text')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_bytes_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/bytes')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_binary_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/bytes')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_get_uri_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/url')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_put_uri_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", '/xml/url')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )

# fmt: on
class XmlOperations(object):
    """XmlOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~xmlservice.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get_complex_type_ref_no_meta(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RootWithRefAndNoMeta"
        """Get a complex type that has a ref to a complex type with no XML node.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RootWithRefAndNoMeta, or the result of cls(response)
        :rtype: ~xmlservice.models.RootWithRefAndNoMeta
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.RootWithRefAndNoMeta"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_complex_type_ref_no_meta_request(
            template_url=self.get_complex_type_ref_no_meta.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("RootWithRefAndNoMeta", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_type_ref_no_meta.metadata = {"url": "/xml/complex-type-ref-no-meta"}  # type: ignore

    @distributed_trace
    def put_complex_type_ref_no_meta(
        self,
        model,  # type: "_models.RootWithRefAndNoMeta"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts a complex type that has a ref to a complex type with no XML node.

        :param model:
        :type model: ~xmlservice.models.RootWithRefAndNoMeta
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _content = self._serialize.body(model, "RootWithRefAndNoMeta", is_xml=True)

        request = build_put_complex_type_ref_no_meta_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_complex_type_ref_no_meta.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_complex_type_ref_no_meta.metadata = {"url": "/xml/complex-type-ref-no-meta"}  # type: ignore

    @distributed_trace
    def get_complex_type_ref_with_meta(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.RootWithRefAndMeta"
        """Get a complex type that has a ref to a complex type with XML node.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RootWithRefAndMeta, or the result of cls(response)
        :rtype: ~xmlservice.models.RootWithRefAndMeta
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.RootWithRefAndMeta"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_complex_type_ref_with_meta_request(
            template_url=self.get_complex_type_ref_with_meta.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("RootWithRefAndMeta", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_complex_type_ref_with_meta.metadata = {"url": "/xml/complex-type-ref-with-meta"}  # type: ignore

    @distributed_trace
    def put_complex_type_ref_with_meta(
        self,
        model,  # type: "_models.RootWithRefAndMeta"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts a complex type that has a ref to a complex type with XML node.

        :param model:
        :type model: ~xmlservice.models.RootWithRefAndMeta
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _content = self._serialize.body(model, "RootWithRefAndMeta", is_xml=True)

        request = build_put_complex_type_ref_with_meta_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_complex_type_ref_with_meta.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_complex_type_ref_with_meta.metadata = {"url": "/xml/complex-type-ref-with-meta"}  # type: ignore

    @distributed_trace
    def get_simple(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.Slideshow"
        """Get a simple XML document.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Slideshow, or the result of cls(response)
        :rtype: ~xmlservice.models.Slideshow
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.Slideshow"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_simple_request(
            template_url=self.get_simple.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("Slideshow", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_simple.metadata = {"url": "/xml/simple"}  # type: ignore

    @distributed_trace
    def put_simple(
        self,
        slideshow,  # type: "_models.Slideshow"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Put a simple XML document.

        :param slideshow:
        :type slideshow: ~xmlservice.models.Slideshow
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _content = self._serialize.body(slideshow, "Slideshow", is_xml=True)

        request = build_put_simple_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_simple.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_simple.metadata = {"url": "/xml/simple"}  # type: ignore

    @distributed_trace
    def get_wrapped_lists(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.AppleBarrel"
        """Get an XML document with multiple wrapped lists.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AppleBarrel, or the result of cls(response)
        :rtype: ~xmlservice.models.AppleBarrel
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.AppleBarrel"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_wrapped_lists_request(
            template_url=self.get_wrapped_lists.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("AppleBarrel", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_wrapped_lists.metadata = {"url": "/xml/wrapped-lists"}  # type: ignore

    @distributed_trace
    def put_wrapped_lists(
        self,
        wrapped_lists,  # type: "_models.AppleBarrel"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Put an XML document with multiple wrapped lists.

        :param wrapped_lists:
        :type wrapped_lists: ~xmlservice.models.AppleBarrel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _content = self._serialize.body(wrapped_lists, "AppleBarrel", is_xml=True)

        request = build_put_wrapped_lists_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_wrapped_lists.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_wrapped_lists.metadata = {"url": "/xml/wrapped-lists"}  # type: ignore

    @distributed_trace
    def get_headers(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Get strongly-typed response headers.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_headers_request(
            template_url=self.get_headers.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Custom-Header"] = self._deserialize("str", response.headers.get("Custom-Header"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    get_headers.metadata = {"url": "/xml/headers"}  # type: ignore

    @distributed_trace
    def get_empty_list(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.Slideshow"
        """Get an empty list.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Slideshow, or the result of cls(response)
        :rtype: ~xmlservice.models.Slideshow
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.Slideshow"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_empty_list_request(
            template_url=self.get_empty_list.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("Slideshow", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_list.metadata = {"url": "/xml/empty-list"}  # type: ignore

    @distributed_trace
    def put_empty_list(
        self,
        slideshow,  # type: "_models.Slideshow"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts an empty list.

        :param slideshow:
        :type slideshow: ~xmlservice.models.Slideshow
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _content = self._serialize.body(slideshow, "Slideshow", is_xml=True)

        request = build_put_empty_list_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_empty_list.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty_list.metadata = {"url": "/xml/empty-list"}  # type: ignore

    @distributed_trace
    def get_empty_wrapped_lists(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.AppleBarrel"
        """Gets some empty wrapped lists.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AppleBarrel, or the result of cls(response)
        :rtype: ~xmlservice.models.AppleBarrel
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.AppleBarrel"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_empty_wrapped_lists_request(
            template_url=self.get_empty_wrapped_lists.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("AppleBarrel", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_wrapped_lists.metadata = {"url": "/xml/empty-wrapped-lists"}  # type: ignore

    @distributed_trace
    def put_empty_wrapped_lists(
        self,
        apple_barrel,  # type: "_models.AppleBarrel"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts some empty wrapped lists.

        :param apple_barrel:
        :type apple_barrel: ~xmlservice.models.AppleBarrel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _content = self._serialize.body(apple_barrel, "AppleBarrel", is_xml=True)

        request = build_put_empty_wrapped_lists_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_empty_wrapped_lists.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty_wrapped_lists.metadata = {"url": "/xml/empty-wrapped-lists"}  # type: ignore

    @distributed_trace
    def get_root_list(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> List["_models.Banana"]
        """Gets a list as the root element.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Banana, or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Banana"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_root_list_request(
            template_url=self.get_root_list.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("[Banana]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_root_list.metadata = {"url": "/xml/root-list"}  # type: ignore

    @distributed_trace
    def put_root_list(
        self,
        bananas,  # type: List["_models.Banana"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts a list as the root element.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        serialization_ctxt = {"xml": {"name": "bananas", "wrapped": True, "itemsName": "banana"}}
        _content = self._serialize.body(bananas, "[Banana]", is_xml=True, serialization_ctxt=serialization_ctxt)

        request = build_put_root_list_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_root_list.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_root_list.metadata = {"url": "/xml/root-list"}  # type: ignore

    @distributed_trace
    def get_root_list_single_item(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> List["_models.Banana"]
        """Gets a list with a single item.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Banana, or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Banana"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_root_list_single_item_request(
            template_url=self.get_root_list_single_item.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("[Banana]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_root_list_single_item.metadata = {"url": "/xml/root-list-single-item"}  # type: ignore

    @distributed_trace
    def put_root_list_single_item(
        self,
        bananas,  # type: List["_models.Banana"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts a list with a single item.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        serialization_ctxt = {"xml": {"name": "bananas", "wrapped": True, "itemsName": "banana"}}
        _content = self._serialize.body(bananas, "[Banana]", is_xml=True, serialization_ctxt=serialization_ctxt)

        request = build_put_root_list_single_item_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_root_list_single_item.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_root_list_single_item.metadata = {"url": "/xml/root-list-single-item"}  # type: ignore

    @distributed_trace
    def get_empty_root_list(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> List["_models.Banana"]
        """Gets an empty list as the root element.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of Banana, or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.Banana"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_empty_root_list_request(
            template_url=self.get_empty_root_list.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("[Banana]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_root_list.metadata = {"url": "/xml/empty-root-list"}  # type: ignore

    @distributed_trace
    def put_empty_root_list(
        self,
        bananas,  # type: List["_models.Banana"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts an empty list as the root element.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        serialization_ctxt = {"xml": {"name": "bananas", "wrapped": True, "itemsName": "banana"}}
        _content = self._serialize.body(bananas, "[Banana]", is_xml=True, serialization_ctxt=serialization_ctxt)

        request = build_put_empty_root_list_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_empty_root_list.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty_root_list.metadata = {"url": "/xml/empty-root-list"}  # type: ignore

    @distributed_trace
    def get_empty_child_element(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.Banana"
        """Gets an XML document with an empty child element.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Banana, or the result of cls(response)
        :rtype: ~xmlservice.models.Banana
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.Banana"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_empty_child_element_request(
            template_url=self.get_empty_child_element.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("Banana", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_empty_child_element.metadata = {"url": "/xml/empty-child-element"}  # type: ignore

    @distributed_trace
    def put_empty_child_element(
        self,
        banana,  # type: "_models.Banana"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts a value with an empty child element.

        :param banana:
        :type banana: ~xmlservice.models.Banana
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _content = self._serialize.body(banana, "Banana", is_xml=True)

        request = build_put_empty_child_element_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_empty_child_element.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_empty_child_element.metadata = {"url": "/xml/empty-child-element"}  # type: ignore

    @distributed_trace
    def list_containers(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ListContainersResponse"
        """Lists containers in a storage account.

        :keyword comp: The default value is "list". Note that overriding this default value may result
         in unsupported behavior.
        :paramtype comp: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ListContainersResponse, or the result of cls(response)
        :rtype: ~xmlservice.models.ListContainersResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.ListContainersResponse"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        comp = kwargs.pop("comp", "list")  # type: str

        request = build_list_containers_request(
            comp=comp,
            template_url=self.list_containers.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("ListContainersResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_containers.metadata = {"url": "/xml/"}  # type: ignore

    @distributed_trace
    def get_service_properties(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.StorageServiceProperties"
        """Gets storage service properties.

        :keyword comp: The default value is "properties". Note that overriding this default value may
         result in unsupported behavior.
        :paramtype comp: str
        :keyword restype: The default value is "service". Note that overriding this default value may
         result in unsupported behavior.
        :paramtype restype: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: StorageServiceProperties, or the result of cls(response)
        :rtype: ~xmlservice.models.StorageServiceProperties
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.StorageServiceProperties"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        comp = kwargs.pop("comp", "properties")  # type: str
        restype = kwargs.pop("restype", "service")  # type: str

        request = build_get_service_properties_request(
            comp=comp,
            restype=restype,
            template_url=self.get_service_properties.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("StorageServiceProperties", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_service_properties.metadata = {"url": "/xml/"}  # type: ignore

    @distributed_trace
    def put_service_properties(
        self,
        properties,  # type: "_models.StorageServiceProperties"
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts storage service properties.

        :param properties:
        :type properties: ~xmlservice.models.StorageServiceProperties
        :keyword comp: The default value is "properties". Note that overriding this default value may
         result in unsupported behavior.
        :paramtype comp: str
        :keyword restype: The default value is "service". Note that overriding this default value may
         result in unsupported behavior.
        :paramtype restype: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        comp = kwargs.pop("comp", "properties")  # type: str
        restype = kwargs.pop("restype", "service")  # type: str
        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _content = self._serialize.body(properties, "StorageServiceProperties", is_xml=True)

        request = build_put_service_properties_request(
            comp=comp,
            restype=restype,
            content_type=content_type,
            content=_content,
            template_url=self.put_service_properties.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_service_properties.metadata = {"url": "/xml/"}  # type: ignore

    @distributed_trace
    def get_acls(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> List["_models.SignedIdentifier"]
        """Gets storage ACLs for a container.

        :keyword comp: The default value is "acl". Note that overriding this default value may result
         in unsupported behavior.
        :paramtype comp: str
        :keyword restype: The default value is "container". Note that overriding this default value may
         result in unsupported behavior.
        :paramtype restype: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of SignedIdentifier, or the result of cls(response)
        :rtype: list[~xmlservice.models.SignedIdentifier]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[List["_models.SignedIdentifier"]]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        comp = kwargs.pop("comp", "acl")  # type: str
        restype = kwargs.pop("restype", "container")  # type: str

        request = build_get_acls_request(
            comp=comp,
            restype=restype,
            template_url=self.get_acls.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("[SignedIdentifier]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_acls.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    @distributed_trace
    def put_acls(
        self,
        properties,  # type: List["_models.SignedIdentifier"]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Puts storage ACLs for a container.

        :param properties:
        :type properties: list[~xmlservice.models.SignedIdentifier]
        :keyword comp: The default value is "acl". Note that overriding this default value may result
         in unsupported behavior.
        :paramtype comp: str
        :keyword restype: The default value is "container". Note that overriding this default value may
         result in unsupported behavior.
        :paramtype restype: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        comp = kwargs.pop("comp", "acl")  # type: str
        restype = kwargs.pop("restype", "container")  # type: str
        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        serialization_ctxt = {"xml": {"name": "SignedIdentifiers", "wrapped": True, "itemsName": "SignedIdentifier"}}
        _content = self._serialize.body(
            properties, "[SignedIdentifier]", is_xml=True, serialization_ctxt=serialization_ctxt
        )

        request = build_put_acls_request(
            comp=comp,
            restype=restype,
            content_type=content_type,
            content=_content,
            template_url=self.put_acls.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    put_acls.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    @distributed_trace
    def list_blobs(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ListBlobsResponse"
        """Lists blobs in a storage container.

        :keyword comp: The default value is "list". Note that overriding this default value may result
         in unsupported behavior.
        :paramtype comp: str
        :keyword restype: The default value is "container". Note that overriding this default value may
         result in unsupported behavior.
        :paramtype restype: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ListBlobsResponse, or the result of cls(response)
        :rtype: ~xmlservice.models.ListBlobsResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.ListBlobsResponse"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        comp = kwargs.pop("comp", "list")  # type: str
        restype = kwargs.pop("restype", "container")  # type: str

        request = build_list_blobs_request(
            comp=comp,
            restype=restype,
            template_url=self.list_blobs.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("ListBlobsResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_blobs.metadata = {"url": "/xml/mycontainer"}  # type: ignore

    @distributed_trace
    def json_input(
        self,
        id=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """A Swagger with XML that has one operation that takes JSON as input. You need to send the ID
        number 42.

        :param id:
        :type id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/json")  # type: Optional[str]

        _properties = _models.JSONInput(id=id)
        _json = self._serialize.body(_properties, "JSONInput")

        request = build_json_input_request(
            content_type=content_type,
            json=_json,
            template_url=self.json_input.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    json_input.metadata = {"url": "/xml/jsoninput"}  # type: ignore

    @distributed_trace
    def json_output(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.JSONOutput"
        """A Swagger with XML that has one operation that returns JSON. ID number 42.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: JSONOutput, or the result of cls(response)
        :rtype: ~xmlservice.models.JSONOutput
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.JSONOutput"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_json_output_request(
            template_url=self.json_output.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("JSONOutput", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    json_output.metadata = {"url": "/xml/jsonoutput"}  # type: ignore

    @distributed_trace
    def get_xms_text(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ObjectWithXMsTextProperty"
        """Get back an XML object with an x-ms-text property, which should translate to the returned
        object's 'language' property being 'english' and its 'content' property being 'I am text'.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ObjectWithXMsTextProperty, or the result of cls(response)
        :rtype: ~xmlservice.models.ObjectWithXMsTextProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.ObjectWithXMsTextProperty"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_xms_text_request(
            template_url=self.get_xms_text.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize("ObjectWithXMsTextProperty", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_xms_text.metadata = {"url": "/xml/x-ms-text"}  # type: ignore

    @distributed_trace
    def get_bytes(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ModelWithByteProperty"
        """Get an XML document with binary property.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelWithByteProperty, or the result of cls(response)
        :rtype: ~xmlservice.models.ModelWithByteProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.ModelWithByteProperty"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_bytes_request(
            template_url=self.get_bytes.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("ModelWithByteProperty", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_bytes.metadata = {"url": "/xml/bytes"}  # type: ignore

    @distributed_trace
    def put_binary(
        self,
        bytes=None,  # type: Optional[bytearray]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Put an XML document with binary property.

        :param bytes:
        :type bytes: bytearray
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _slideshow = _models.ModelWithByteProperty(bytes=bytes)
        _content = self._serialize.body(_slideshow, "ModelWithByteProperty", is_xml=True)

        request = build_put_binary_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_binary.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_binary.metadata = {"url": "/xml/bytes"}  # type: ignore

    @distributed_trace
    def get_uri(
        self, **kwargs  # type: Any
    ):
        # type: (...) -> "_models.ModelWithUrlProperty"
        """Get an XML document with uri property.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelWithUrlProperty, or the result of cls(response)
        :rtype: ~xmlservice.models.ModelWithUrlProperty
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType["_models.ModelWithUrlProperty"]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        request = build_get_uri_request(
            template_url=self.get_uri.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("ModelWithUrlProperty", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_uri.metadata = {"url": "/xml/url"}  # type: ignore

    @distributed_trace
    def put_uri(
        self,
        url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Put an XML document with uri property.

        :param url:
        :type url: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop("cls", None)  # type: ClsType[None]
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}))

        content_type = kwargs.pop("content_type", "application/xml")  # type: Optional[str]

        _model = _models.ModelWithUrlProperty(url=url)
        _content = self._serialize.body(_model, "ModelWithUrlProperty", is_xml=True)

        request = build_put_uri_request(
            content_type=content_type,
            content=_content,
            template_url=self.put_uri.metadata["url"],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_uri.metadata = {"url": "/xml/url"}  # type: ignore
