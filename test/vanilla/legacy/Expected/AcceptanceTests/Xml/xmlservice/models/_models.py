# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class AccessPolicy(msrest.serialization.Model):
    """An Access policy.

    All required parameters must be populated in order to send to Azure.

    :ivar start: the date-time the policy is active. Required.
    :vartype start: ~datetime.datetime
    :ivar expiry: the date-time the policy expires. Required.
    :vartype expiry: ~datetime.datetime
    :ivar permission: the permissions for the acl policy. Required.
    :vartype permission: str
    """

    _validation = {
        "start": {"required": True},
        "expiry": {"required": True},
        "permission": {"required": True},
    }

    _attribute_map = {
        "start": {"key": "Start", "type": "iso-8601"},
        "expiry": {"key": "Expiry", "type": "iso-8601"},
        "permission": {"key": "Permission", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword start: the date-time the policy is active. Required.
        :paramtype start: ~datetime.datetime
        :keyword expiry: the date-time the policy expires. Required.
        :paramtype expiry: ~datetime.datetime
        :keyword permission: the permissions for the acl policy. Required.
        :paramtype permission: str
        """
        super(AccessPolicy, self).__init__(**kwargs)
        self.start = kwargs["start"]
        self.expiry = kwargs["expiry"]
        self.permission = kwargs["permission"]


class AppleBarrel(msrest.serialization.Model):
    """A barrel of apples.

    :ivar good_apples:
    :vartype good_apples: list[str]
    :ivar bad_apples:
    :vartype bad_apples: list[str]
    """

    _attribute_map = {
        "good_apples": {"key": "GoodApples", "type": "[str]", "xml": {"wrapped": True, "itemsName": "Apple"}},
        "bad_apples": {"key": "BadApples", "type": "[str]", "xml": {"wrapped": True, "itemsName": "Apple"}},
    }

    def __init__(self, **kwargs):
        """
        :keyword good_apples:
        :paramtype good_apples: list[str]
        :keyword bad_apples:
        :paramtype bad_apples: list[str]
        """
        super(AppleBarrel, self).__init__(**kwargs)
        self.good_apples = kwargs.get("good_apples", None)
        self.bad_apples = kwargs.get("bad_apples", None)


class Banana(msrest.serialization.Model):
    """A banana.

    :ivar name:
    :vartype name: str
    :ivar flavor:
    :vartype flavor: str
    :ivar expiration: The time at which you should reconsider eating this banana.
    :vartype expiration: ~datetime.datetime
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str", "xml": {"name": "name"}},
        "flavor": {"key": "flavor", "type": "str", "xml": {"name": "flavor"}},
        "expiration": {"key": "expiration", "type": "iso-8601", "xml": {"name": "expiration"}},
    }
    _xml_map = {"name": "banana"}

    def __init__(self, **kwargs):
        """
        :keyword name:
        :paramtype name: str
        :keyword flavor:
        :paramtype flavor: str
        :keyword expiration: The time at which you should reconsider eating this banana.
        :paramtype expiration: ~datetime.datetime
        """
        super(Banana, self).__init__(**kwargs)
        self.name = kwargs.get("name", None)
        self.flavor = kwargs.get("flavor", None)
        self.expiration = kwargs.get("expiration", None)


class Blob(msrest.serialization.Model):
    """An Azure Storage blob.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required.
    :vartype name: str
    :ivar deleted: Required.
    :vartype deleted: bool
    :ivar snapshot: Required.
    :vartype snapshot: str
    :ivar properties: Properties of a blob. Required.
    :vartype properties: ~xmlservice.models.BlobProperties
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    """

    _validation = {
        "name": {"required": True},
        "deleted": {"required": True},
        "snapshot": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "Name", "type": "str"},
        "deleted": {"key": "Deleted", "type": "bool"},
        "snapshot": {"key": "Snapshot", "type": "str"},
        "properties": {"key": "Properties", "type": "BlobProperties"},
        "metadata": {"key": "Metadata", "type": "{str}"},
    }
    _xml_map = {"name": "Blob"}

    def __init__(self, **kwargs):
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword deleted: Required.
        :paramtype deleted: bool
        :keyword snapshot: Required.
        :paramtype snapshot: str
        :keyword properties: Properties of a blob. Required.
        :paramtype properties: ~xmlservice.models.BlobProperties
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        """
        super(Blob, self).__init__(**kwargs)
        self.name = kwargs["name"]
        self.deleted = kwargs["deleted"]
        self.snapshot = kwargs["snapshot"]
        self.properties = kwargs["properties"]
        self.metadata = kwargs.get("metadata", None)


class BlobPrefix(msrest.serialization.Model):
    """BlobPrefix.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required.
    :vartype name: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "Name", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword name: Required.
        :paramtype name: str
        """
        super(BlobPrefix, self).__init__(**kwargs)
        self.name = kwargs["name"]


class BlobProperties(msrest.serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Properties of a blob.

    All required parameters must be populated in order to send to Azure.

    :ivar last_modified: Required.
    :vartype last_modified: ~datetime.datetime
    :ivar etag: Required.
    :vartype etag: str
    :ivar content_length: Size in bytes.
    :vartype content_length: int
    :ivar content_type:
    :vartype content_type: str
    :ivar content_encoding:
    :vartype content_encoding: str
    :ivar content_language:
    :vartype content_language: str
    :ivar content_md5:
    :vartype content_md5: str
    :ivar content_disposition:
    :vartype content_disposition: str
    :ivar cache_control:
    :vartype cache_control: str
    :ivar blob_sequence_number:
    :vartype blob_sequence_number: int
    :ivar blob_type: Known values are: "BlockBlob", "PageBlob", and "AppendBlob".
    :vartype blob_type: str or ~xmlservice.models.BlobType
    :ivar lease_status: Known values are: "locked" and "unlocked".
    :vartype lease_status: str or ~xmlservice.models.LeaseStatusType
    :ivar lease_state: Known values are: "available", "leased", "expired", "breaking", and
     "broken".
    :vartype lease_state: str or ~xmlservice.models.LeaseStateType
    :ivar lease_duration: Known values are: "infinite" and "fixed".
    :vartype lease_duration: str or ~xmlservice.models.LeaseDurationType
    :ivar copy_id:
    :vartype copy_id: str
    :ivar copy_status: Known values are: "pending", "success", "aborted", and "failed".
    :vartype copy_status: str or ~xmlservice.models.CopyStatusType
    :ivar copy_source:
    :vartype copy_source: str
    :ivar copy_progress:
    :vartype copy_progress: str
    :ivar copy_completion_time:
    :vartype copy_completion_time: ~datetime.datetime
    :ivar copy_status_description:
    :vartype copy_status_description: str
    :ivar server_encrypted:
    :vartype server_encrypted: bool
    :ivar incremental_copy:
    :vartype incremental_copy: bool
    :ivar destination_snapshot:
    :vartype destination_snapshot: str
    :ivar deleted_time:
    :vartype deleted_time: ~datetime.datetime
    :ivar remaining_retention_days:
    :vartype remaining_retention_days: int
    :ivar access_tier: Known values are: "P4", "P6", "P10", "P20", "P30", "P40", "P50", "Hot",
     "Cool", and "Archive".
    :vartype access_tier: str or ~xmlservice.models.AccessTier
    :ivar access_tier_inferred:
    :vartype access_tier_inferred: bool
    :ivar archive_status: Known values are: "rehydrate-pending-to-hot" and
     "rehydrate-pending-to-cool".
    :vartype archive_status: str or ~xmlservice.models.ArchiveStatus
    """

    _validation = {
        "last_modified": {"required": True},
        "etag": {"required": True},
    }

    _attribute_map = {
        "last_modified": {"key": "Last-Modified", "type": "rfc-1123"},
        "etag": {"key": "Etag", "type": "str"},
        "content_length": {"key": "Content-Length", "type": "int"},
        "content_type": {"key": "Content-Type", "type": "str"},
        "content_encoding": {"key": "Content-Encoding", "type": "str"},
        "content_language": {"key": "Content-Language", "type": "str"},
        "content_md5": {"key": "Content-MD5", "type": "str"},
        "content_disposition": {"key": "Content-Disposition", "type": "str"},
        "cache_control": {"key": "Cache-Control", "type": "str"},
        "blob_sequence_number": {"key": "x-ms-blob-sequence-number", "type": "int"},
        "blob_type": {"key": "BlobType", "type": "str"},
        "lease_status": {"key": "LeaseStatus", "type": "str"},
        "lease_state": {"key": "LeaseState", "type": "str"},
        "lease_duration": {"key": "LeaseDuration", "type": "str"},
        "copy_id": {"key": "CopyId", "type": "str"},
        "copy_status": {"key": "CopyStatus", "type": "str"},
        "copy_source": {"key": "CopySource", "type": "str"},
        "copy_progress": {"key": "CopyProgress", "type": "str"},
        "copy_completion_time": {"key": "CopyCompletionTime", "type": "rfc-1123"},
        "copy_status_description": {"key": "CopyStatusDescription", "type": "str"},
        "server_encrypted": {"key": "ServerEncrypted", "type": "bool"},
        "incremental_copy": {"key": "IncrementalCopy", "type": "bool"},
        "destination_snapshot": {"key": "DestinationSnapshot", "type": "str"},
        "deleted_time": {"key": "DeletedTime", "type": "rfc-1123"},
        "remaining_retention_days": {"key": "RemainingRetentionDays", "type": "int"},
        "access_tier": {"key": "AccessTier", "type": "str"},
        "access_tier_inferred": {"key": "AccessTierInferred", "type": "bool"},
        "archive_status": {"key": "ArchiveStatus", "type": "str"},
    }

    def __init__(self, **kwargs):  # pylint: disable=too-many-locals
        """
        :keyword last_modified: Required.
        :paramtype last_modified: ~datetime.datetime
        :keyword etag: Required.
        :paramtype etag: str
        :keyword content_length: Size in bytes.
        :paramtype content_length: int
        :keyword content_type:
        :paramtype content_type: str
        :keyword content_encoding:
        :paramtype content_encoding: str
        :keyword content_language:
        :paramtype content_language: str
        :keyword content_md5:
        :paramtype content_md5: str
        :keyword content_disposition:
        :paramtype content_disposition: str
        :keyword cache_control:
        :paramtype cache_control: str
        :keyword blob_sequence_number:
        :paramtype blob_sequence_number: int
        :keyword blob_type: Known values are: "BlockBlob", "PageBlob", and "AppendBlob".
        :paramtype blob_type: str or ~xmlservice.models.BlobType
        :keyword lease_status: Known values are: "locked" and "unlocked".
        :paramtype lease_status: str or ~xmlservice.models.LeaseStatusType
        :keyword lease_state: Known values are: "available", "leased", "expired", "breaking", and
         "broken".
        :paramtype lease_state: str or ~xmlservice.models.LeaseStateType
        :keyword lease_duration: Known values are: "infinite" and "fixed".
        :paramtype lease_duration: str or ~xmlservice.models.LeaseDurationType
        :keyword copy_id:
        :paramtype copy_id: str
        :keyword copy_status: Known values are: "pending", "success", "aborted", and "failed".
        :paramtype copy_status: str or ~xmlservice.models.CopyStatusType
        :keyword copy_source:
        :paramtype copy_source: str
        :keyword copy_progress:
        :paramtype copy_progress: str
        :keyword copy_completion_time:
        :paramtype copy_completion_time: ~datetime.datetime
        :keyword copy_status_description:
        :paramtype copy_status_description: str
        :keyword server_encrypted:
        :paramtype server_encrypted: bool
        :keyword incremental_copy:
        :paramtype incremental_copy: bool
        :keyword destination_snapshot:
        :paramtype destination_snapshot: str
        :keyword deleted_time:
        :paramtype deleted_time: ~datetime.datetime
        :keyword remaining_retention_days:
        :paramtype remaining_retention_days: int
        :keyword access_tier: Known values are: "P4", "P6", "P10", "P20", "P30", "P40", "P50", "Hot",
         "Cool", and "Archive".
        :paramtype access_tier: str or ~xmlservice.models.AccessTier
        :keyword access_tier_inferred:
        :paramtype access_tier_inferred: bool
        :keyword archive_status: Known values are: "rehydrate-pending-to-hot" and
         "rehydrate-pending-to-cool".
        :paramtype archive_status: str or ~xmlservice.models.ArchiveStatus
        """
        super(BlobProperties, self).__init__(**kwargs)
        self.last_modified = kwargs["last_modified"]
        self.etag = kwargs["etag"]
        self.content_length = kwargs.get("content_length", None)
        self.content_type = kwargs.get("content_type", None)
        self.content_encoding = kwargs.get("content_encoding", None)
        self.content_language = kwargs.get("content_language", None)
        self.content_md5 = kwargs.get("content_md5", None)
        self.content_disposition = kwargs.get("content_disposition", None)
        self.cache_control = kwargs.get("cache_control", None)
        self.blob_sequence_number = kwargs.get("blob_sequence_number", None)
        self.blob_type = kwargs.get("blob_type", None)
        self.lease_status = kwargs.get("lease_status", None)
        self.lease_state = kwargs.get("lease_state", None)
        self.lease_duration = kwargs.get("lease_duration", None)
        self.copy_id = kwargs.get("copy_id", None)
        self.copy_status = kwargs.get("copy_status", None)
        self.copy_source = kwargs.get("copy_source", None)
        self.copy_progress = kwargs.get("copy_progress", None)
        self.copy_completion_time = kwargs.get("copy_completion_time", None)
        self.copy_status_description = kwargs.get("copy_status_description", None)
        self.server_encrypted = kwargs.get("server_encrypted", None)
        self.incremental_copy = kwargs.get("incremental_copy", None)
        self.destination_snapshot = kwargs.get("destination_snapshot", None)
        self.deleted_time = kwargs.get("deleted_time", None)
        self.remaining_retention_days = kwargs.get("remaining_retention_days", None)
        self.access_tier = kwargs.get("access_tier", None)
        self.access_tier_inferred = kwargs.get("access_tier_inferred", None)
        self.archive_status = kwargs.get("archive_status", None)


class Blobs(msrest.serialization.Model):
    """Blobs.

    :ivar blob_prefix:
    :vartype blob_prefix: list[~xmlservice.models.BlobPrefix]
    :ivar blob:
    :vartype blob: list[~xmlservice.models.Blob]
    """

    _attribute_map = {
        "blob_prefix": {"key": "BlobPrefix", "type": "[BlobPrefix]"},
        "blob": {"key": "Blob", "type": "[Blob]", "xml": {"itemsName": "Blob"}},
    }

    def __init__(self, **kwargs):
        """
        :keyword blob_prefix:
        :paramtype blob_prefix: list[~xmlservice.models.BlobPrefix]
        :keyword blob:
        :paramtype blob: list[~xmlservice.models.Blob]
        """
        super(Blobs, self).__init__(**kwargs)
        self.blob_prefix = kwargs.get("blob_prefix", None)
        self.blob = kwargs.get("blob", None)


class ComplexTypeNoMeta(msrest.serialization.Model):
    """I am a complex type with no XML node.

    :ivar id: The id of the res.
    :vartype id: str
    """

    _attribute_map = {
        "id": {"key": "ID", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword id: The id of the res.
        :paramtype id: str
        """
        super(ComplexTypeNoMeta, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)


class ComplexTypeWithMeta(msrest.serialization.Model):
    """I am a complex type with XML node.

    :ivar id: The id of the res.
    :vartype id: str
    """

    _attribute_map = {
        "id": {"key": "ID", "type": "str"},
    }
    _xml_map = {"name": "XMLComplexTypeWithMeta"}

    def __init__(self, **kwargs):
        """
        :keyword id: The id of the res.
        :paramtype id: str
        """
        super(ComplexTypeWithMeta, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)


class Container(msrest.serialization.Model):
    """An Azure Storage container.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required.
    :vartype name: str
    :ivar properties: Properties of a container. Required.
    :vartype properties: ~xmlservice.models.ContainerProperties
    :ivar metadata: Dictionary of :code:`<string>`.
    :vartype metadata: dict[str, str]
    """

    _validation = {
        "name": {"required": True},
        "properties": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "Name", "type": "str"},
        "properties": {"key": "Properties", "type": "ContainerProperties"},
        "metadata": {"key": "Metadata", "type": "{str}"},
    }

    def __init__(self, **kwargs):
        """
        :keyword name: Required.
        :paramtype name: str
        :keyword properties: Properties of a container. Required.
        :paramtype properties: ~xmlservice.models.ContainerProperties
        :keyword metadata: Dictionary of :code:`<string>`.
        :paramtype metadata: dict[str, str]
        """
        super(Container, self).__init__(**kwargs)
        self.name = kwargs["name"]
        self.properties = kwargs["properties"]
        self.metadata = kwargs.get("metadata", None)


class ContainerProperties(msrest.serialization.Model):
    """Properties of a container.

    All required parameters must be populated in order to send to Azure.

    :ivar last_modified: Required.
    :vartype last_modified: ~datetime.datetime
    :ivar etag: Required.
    :vartype etag: str
    :ivar lease_status: Known values are: "locked" and "unlocked".
    :vartype lease_status: str or ~xmlservice.models.LeaseStatusType
    :ivar lease_state: Known values are: "available", "leased", "expired", "breaking", and
     "broken".
    :vartype lease_state: str or ~xmlservice.models.LeaseStateType
    :ivar lease_duration: Known values are: "infinite" and "fixed".
    :vartype lease_duration: str or ~xmlservice.models.LeaseDurationType
    :ivar public_access: Known values are: "container" and "blob".
    :vartype public_access: str or ~xmlservice.models.PublicAccessType
    """

    _validation = {
        "last_modified": {"required": True},
        "etag": {"required": True},
    }

    _attribute_map = {
        "last_modified": {"key": "Last-Modified", "type": "rfc-1123"},
        "etag": {"key": "Etag", "type": "str"},
        "lease_status": {"key": "LeaseStatus", "type": "str"},
        "lease_state": {"key": "LeaseState", "type": "str"},
        "lease_duration": {"key": "LeaseDuration", "type": "str"},
        "public_access": {"key": "PublicAccess", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword last_modified: Required.
        :paramtype last_modified: ~datetime.datetime
        :keyword etag: Required.
        :paramtype etag: str
        :keyword lease_status: Known values are: "locked" and "unlocked".
        :paramtype lease_status: str or ~xmlservice.models.LeaseStatusType
        :keyword lease_state: Known values are: "available", "leased", "expired", "breaking", and
         "broken".
        :paramtype lease_state: str or ~xmlservice.models.LeaseStateType
        :keyword lease_duration: Known values are: "infinite" and "fixed".
        :paramtype lease_duration: str or ~xmlservice.models.LeaseDurationType
        :keyword public_access: Known values are: "container" and "blob".
        :paramtype public_access: str or ~xmlservice.models.PublicAccessType
        """
        super(ContainerProperties, self).__init__(**kwargs)
        self.last_modified = kwargs["last_modified"]
        self.etag = kwargs["etag"]
        self.lease_status = kwargs.get("lease_status", None)
        self.lease_state = kwargs.get("lease_state", None)
        self.lease_duration = kwargs.get("lease_duration", None)
        self.public_access = kwargs.get("public_access", None)


class CorsRule(msrest.serialization.Model):
    """CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain.

    All required parameters must be populated in order to send to Azure.

    :ivar allowed_origins: The origin domains that are permitted to make a request against the
     storage service via CORS. The origin domain is the domain from which the request originates.
     Note that the origin must be an exact case-sensitive match with the origin that the user age
     sends to the service. You can also use the wildcard character '*' to allow all origin domains
     to make requests via CORS. Required.
    :vartype allowed_origins: str
    :ivar allowed_methods: The methods (HTTP request verbs) that the origin domain may use for a
     CORS request. (comma separated). Required.
    :vartype allowed_methods: str
    :ivar allowed_headers: the request headers that the origin domain may specify on the CORS
     request. Required.
    :vartype allowed_headers: str
    :ivar exposed_headers: The response headers that may be sent in the response to the CORS
     request and exposed by the browser to the request issuer. Required.
    :vartype exposed_headers: str
    :ivar max_age_in_seconds: The maximum amount time that a browser should cache the preflight
     OPTIONS request. Required.
    :vartype max_age_in_seconds: int
    """

    _validation = {
        "allowed_origins": {"required": True},
        "allowed_methods": {"required": True},
        "allowed_headers": {"required": True},
        "exposed_headers": {"required": True},
        "max_age_in_seconds": {"required": True, "minimum": 0},
    }

    _attribute_map = {
        "allowed_origins": {"key": "AllowedOrigins", "type": "str"},
        "allowed_methods": {"key": "AllowedMethods", "type": "str"},
        "allowed_headers": {"key": "AllowedHeaders", "type": "str"},
        "exposed_headers": {"key": "ExposedHeaders", "type": "str"},
        "max_age_in_seconds": {"key": "MaxAgeInSeconds", "type": "int"},
    }
    _xml_map = {"name": "CorsRule"}

    def __init__(self, **kwargs):
        """
        :keyword allowed_origins: The origin domains that are permitted to make a request against the
         storage service via CORS. The origin domain is the domain from which the request originates.
         Note that the origin must be an exact case-sensitive match with the origin that the user age
         sends to the service. You can also use the wildcard character '*' to allow all origin domains
         to make requests via CORS. Required.
        :paramtype allowed_origins: str
        :keyword allowed_methods: The methods (HTTP request verbs) that the origin domain may use for a
         CORS request. (comma separated). Required.
        :paramtype allowed_methods: str
        :keyword allowed_headers: the request headers that the origin domain may specify on the CORS
         request. Required.
        :paramtype allowed_headers: str
        :keyword exposed_headers: The response headers that may be sent in the response to the CORS
         request and exposed by the browser to the request issuer. Required.
        :paramtype exposed_headers: str
        :keyword max_age_in_seconds: The maximum amount time that a browser should cache the preflight
         OPTIONS request. Required.
        :paramtype max_age_in_seconds: int
        """
        super(CorsRule, self).__init__(**kwargs)
        self.allowed_origins = kwargs["allowed_origins"]
        self.allowed_methods = kwargs["allowed_methods"]
        self.allowed_headers = kwargs["allowed_headers"]
        self.exposed_headers = kwargs["exposed_headers"]
        self.max_age_in_seconds = kwargs["max_age_in_seconds"]


class Error(msrest.serialization.Model):
    """Error.

    :ivar status:
    :vartype status: int
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        "status": {"key": "status", "type": "int"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword status:
        :paramtype status: int
        :keyword message:
        :paramtype message: str
        """
        super(Error, self).__init__(**kwargs)
        self.status = kwargs.get("status", None)
        self.message = kwargs.get("message", None)


class JSONInput(msrest.serialization.Model):
    """JSONInput.

    :ivar id:
    :vartype id: int
    """

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
    }

    def __init__(self, **kwargs):
        """
        :keyword id:
        :paramtype id: int
        """
        super(JSONInput, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)


class JSONOutput(msrest.serialization.Model):
    """JSONOutput.

    :ivar id:
    :vartype id: int
    """

    _attribute_map = {
        "id": {"key": "id", "type": "int"},
    }

    def __init__(self, **kwargs):
        """
        :keyword id:
        :paramtype id: int
        """
        super(JSONOutput, self).__init__(**kwargs)
        self.id = kwargs.get("id", None)


class ListBlobsResponse(msrest.serialization.Model):
    """An enumeration of blobs.

    All required parameters must be populated in order to send to Azure.

    :ivar service_endpoint:
    :vartype service_endpoint: str
    :ivar container_name: Required.
    :vartype container_name: str
    :ivar prefix: Required.
    :vartype prefix: str
    :ivar marker: Required.
    :vartype marker: str
    :ivar max_results: Required.
    :vartype max_results: int
    :ivar delimiter: Required.
    :vartype delimiter: str
    :ivar blobs: Required.
    :vartype blobs: ~xmlservice.models.Blobs
    :ivar next_marker: Required.
    :vartype next_marker: str
    """

    _validation = {
        "container_name": {"required": True},
        "prefix": {"required": True},
        "marker": {"required": True},
        "max_results": {"required": True},
        "delimiter": {"required": True},
        "blobs": {"required": True},
        "next_marker": {"required": True},
    }

    _attribute_map = {
        "service_endpoint": {"key": "ServiceEndpoint", "type": "str", "xml": {"attr": True}},
        "container_name": {"key": "ContainerName", "type": "str", "xml": {"attr": True}},
        "prefix": {"key": "Prefix", "type": "str"},
        "marker": {"key": "Marker", "type": "str"},
        "max_results": {"key": "MaxResults", "type": "int"},
        "delimiter": {"key": "Delimiter", "type": "str"},
        "blobs": {"key": "Blobs", "type": "Blobs"},
        "next_marker": {"key": "NextMarker", "type": "str"},
    }
    _xml_map = {"name": "EnumerationResults"}

    def __init__(self, **kwargs):
        """
        :keyword service_endpoint:
        :paramtype service_endpoint: str
        :keyword container_name: Required.
        :paramtype container_name: str
        :keyword prefix: Required.
        :paramtype prefix: str
        :keyword marker: Required.
        :paramtype marker: str
        :keyword max_results: Required.
        :paramtype max_results: int
        :keyword delimiter: Required.
        :paramtype delimiter: str
        :keyword blobs: Required.
        :paramtype blobs: ~xmlservice.models.Blobs
        :keyword next_marker: Required.
        :paramtype next_marker: str
        """
        super(ListBlobsResponse, self).__init__(**kwargs)
        self.service_endpoint = kwargs.get("service_endpoint", None)
        self.container_name = kwargs["container_name"]
        self.prefix = kwargs["prefix"]
        self.marker = kwargs["marker"]
        self.max_results = kwargs["max_results"]
        self.delimiter = kwargs["delimiter"]
        self.blobs = kwargs["blobs"]
        self.next_marker = kwargs["next_marker"]


class ListContainersResponse(msrest.serialization.Model):
    """An enumeration of containers.

    All required parameters must be populated in order to send to Azure.

    :ivar service_endpoint: Required.
    :vartype service_endpoint: str
    :ivar prefix: Required.
    :vartype prefix: str
    :ivar marker:
    :vartype marker: str
    :ivar max_results: Required.
    :vartype max_results: int
    :ivar containers:
    :vartype containers: list[~xmlservice.models.Container]
    :ivar next_marker: Required.
    :vartype next_marker: str
    """

    _validation = {
        "service_endpoint": {"required": True},
        "prefix": {"required": True},
        "max_results": {"required": True},
        "next_marker": {"required": True},
    }

    _attribute_map = {
        "service_endpoint": {"key": "ServiceEndpoint", "type": "str", "xml": {"attr": True}},
        "prefix": {"key": "Prefix", "type": "str"},
        "marker": {"key": "Marker", "type": "str"},
        "max_results": {"key": "MaxResults", "type": "int"},
        "containers": {"key": "Containers", "type": "[Container]", "xml": {"wrapped": True}},
        "next_marker": {"key": "NextMarker", "type": "str"},
    }
    _xml_map = {"name": "EnumerationResults"}

    def __init__(self, **kwargs):
        """
        :keyword service_endpoint: Required.
        :paramtype service_endpoint: str
        :keyword prefix: Required.
        :paramtype prefix: str
        :keyword marker:
        :paramtype marker: str
        :keyword max_results: Required.
        :paramtype max_results: int
        :keyword containers:
        :paramtype containers: list[~xmlservice.models.Container]
        :keyword next_marker: Required.
        :paramtype next_marker: str
        """
        super(ListContainersResponse, self).__init__(**kwargs)
        self.service_endpoint = kwargs["service_endpoint"]
        self.prefix = kwargs["prefix"]
        self.marker = kwargs.get("marker", None)
        self.max_results = kwargs["max_results"]
        self.containers = kwargs.get("containers", None)
        self.next_marker = kwargs["next_marker"]


class Logging(msrest.serialization.Model):
    """Azure Analytics Logging settings.

    All required parameters must be populated in order to send to Azure.

    :ivar version: The version of Storage Analytics to configure. Required.
    :vartype version: str
    :ivar delete: Indicates whether all delete requests should be logged. Required.
    :vartype delete: bool
    :ivar read: Indicates whether all read requests should be logged. Required.
    :vartype read: bool
    :ivar write: Indicates whether all write requests should be logged. Required.
    :vartype write: bool
    :ivar retention_policy: the retention policy. Required.
    :vartype retention_policy: ~xmlservice.models.RetentionPolicy
    """

    _validation = {
        "version": {"required": True},
        "delete": {"required": True},
        "read": {"required": True},
        "write": {"required": True},
        "retention_policy": {"required": True},
    }

    _attribute_map = {
        "version": {"key": "Version", "type": "str"},
        "delete": {"key": "Delete", "type": "bool"},
        "read": {"key": "Read", "type": "bool"},
        "write": {"key": "Write", "type": "bool"},
        "retention_policy": {"key": "RetentionPolicy", "type": "RetentionPolicy"},
    }

    def __init__(self, **kwargs):
        """
        :keyword version: The version of Storage Analytics to configure. Required.
        :paramtype version: str
        :keyword delete: Indicates whether all delete requests should be logged. Required.
        :paramtype delete: bool
        :keyword read: Indicates whether all read requests should be logged. Required.
        :paramtype read: bool
        :keyword write: Indicates whether all write requests should be logged. Required.
        :paramtype write: bool
        :keyword retention_policy: the retention policy. Required.
        :paramtype retention_policy: ~xmlservice.models.RetentionPolicy
        """
        super(Logging, self).__init__(**kwargs)
        self.version = kwargs["version"]
        self.delete = kwargs["delete"]
        self.read = kwargs["read"]
        self.write = kwargs["write"]
        self.retention_policy = kwargs["retention_policy"]


class Metrics(msrest.serialization.Model):
    """Metrics.

    All required parameters must be populated in order to send to Azure.

    :ivar version: The version of Storage Analytics to configure.
    :vartype version: str
    :ivar enabled: Indicates whether metrics are enabled for the Blob service. Required.
    :vartype enabled: bool
    :ivar include_apis: Indicates whether metrics should generate summary statistics for called API
     operations.
    :vartype include_apis: bool
    :ivar retention_policy: the retention policy.
    :vartype retention_policy: ~xmlservice.models.RetentionPolicy
    """

    _validation = {
        "enabled": {"required": True},
    }

    _attribute_map = {
        "version": {"key": "Version", "type": "str"},
        "enabled": {"key": "Enabled", "type": "bool"},
        "include_apis": {"key": "IncludeAPIs", "type": "bool"},
        "retention_policy": {"key": "RetentionPolicy", "type": "RetentionPolicy"},
    }

    def __init__(self, **kwargs):
        """
        :keyword version: The version of Storage Analytics to configure.
        :paramtype version: str
        :keyword enabled: Indicates whether metrics are enabled for the Blob service. Required.
        :paramtype enabled: bool
        :keyword include_apis: Indicates whether metrics should generate summary statistics for called
         API operations.
        :paramtype include_apis: bool
        :keyword retention_policy: the retention policy.
        :paramtype retention_policy: ~xmlservice.models.RetentionPolicy
        """
        super(Metrics, self).__init__(**kwargs)
        self.version = kwargs.get("version", None)
        self.enabled = kwargs["enabled"]
        self.include_apis = kwargs.get("include_apis", None)
        self.retention_policy = kwargs.get("retention_policy", None)


class ModelWithByteProperty(msrest.serialization.Model):
    """ModelWithByteProperty.

    :ivar bytes:
    :vartype bytes: bytes
    """

    _attribute_map = {
        "bytes": {"key": "Bytes", "type": "bytearray"},
    }

    def __init__(self, **kwargs):
        """
        :keyword bytes:
        :paramtype bytes: bytes
        """
        super(ModelWithByteProperty, self).__init__(**kwargs)
        self.bytes = kwargs.get("bytes", None)


class ModelWithUrlProperty(msrest.serialization.Model):
    """ModelWithUrlProperty.

    :ivar url:
    :vartype url: str
    """

    _attribute_map = {
        "url": {"key": "Url", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword url:
        :paramtype url: str
        """
        super(ModelWithUrlProperty, self).__init__(**kwargs)
        self.url = kwargs.get("url", None)


class ObjectWithXMsTextProperty(msrest.serialization.Model):
    """Contans property.

    :ivar language: Returned value should be 'english'.
    :vartype language: str
    :ivar content: Returned value should be 'I am text'.
    :vartype content: str
    """

    _attribute_map = {
        "language": {"key": "language", "type": "str", "xml": {"name": "language", "attr": True}},
        "content": {"key": "content", "type": "str", "xml": {"text": True}},
    }
    _xml_map = {"name": "Data"}

    def __init__(self, **kwargs):
        """
        :keyword language: Returned value should be 'english'.
        :paramtype language: str
        :keyword content: Returned value should be 'I am text'.
        :paramtype content: str
        """
        super(ObjectWithXMsTextProperty, self).__init__(**kwargs)
        self.language = kwargs.get("language", None)
        self.content = kwargs.get("content", None)


class RetentionPolicy(msrest.serialization.Model):
    """the retention policy.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Indicates whether a retention policy is enabled for the storage service.
     Required.
    :vartype enabled: bool
    :ivar days: Indicates the number of days that metrics or logging or soft-deleted data should be
     retained. All data older than this value will be deleted.
    :vartype days: int
    """

    _validation = {
        "enabled": {"required": True},
        "days": {"minimum": 1},
    }

    _attribute_map = {
        "enabled": {"key": "Enabled", "type": "bool"},
        "days": {"key": "Days", "type": "int"},
    }

    def __init__(self, **kwargs):
        """
        :keyword enabled: Indicates whether a retention policy is enabled for the storage service.
         Required.
        :paramtype enabled: bool
        :keyword days: Indicates the number of days that metrics or logging or soft-deleted data should
         be retained. All data older than this value will be deleted.
        :paramtype days: int
        """
        super(RetentionPolicy, self).__init__(**kwargs)
        self.enabled = kwargs["enabled"]
        self.days = kwargs.get("days", None)


class RootWithRefAndMeta(msrest.serialization.Model):
    """I am root, and I ref a model WITH meta.

    :ivar ref_to_model: XML will use XMLComplexTypeWithMeta.
    :vartype ref_to_model: ~xmlservice.models.ComplexTypeWithMeta
    :ivar something: Something else (just to avoid flattening).
    :vartype something: str
    """

    _attribute_map = {
        "ref_to_model": {"key": "RefToModel", "type": "ComplexTypeWithMeta"},
        "something": {"key": "Something", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword ref_to_model: XML will use XMLComplexTypeWithMeta.
        :paramtype ref_to_model: ~xmlservice.models.ComplexTypeWithMeta
        :keyword something: Something else (just to avoid flattening).
        :paramtype something: str
        """
        super(RootWithRefAndMeta, self).__init__(**kwargs)
        self.ref_to_model = kwargs.get("ref_to_model", None)
        self.something = kwargs.get("something", None)


class RootWithRefAndNoMeta(msrest.serialization.Model):
    """I am root, and I ref a model with no meta.

    :ivar ref_to_model: XML will use RefToModel.
    :vartype ref_to_model: ~xmlservice.models.ComplexTypeNoMeta
    :ivar something: Something else (just to avoid flattening).
    :vartype something: str
    """

    _attribute_map = {
        "ref_to_model": {"key": "RefToModel", "type": "ComplexTypeNoMeta"},
        "something": {"key": "Something", "type": "str"},
    }

    def __init__(self, **kwargs):
        """
        :keyword ref_to_model: XML will use RefToModel.
        :paramtype ref_to_model: ~xmlservice.models.ComplexTypeNoMeta
        :keyword something: Something else (just to avoid flattening).
        :paramtype something: str
        """
        super(RootWithRefAndNoMeta, self).__init__(**kwargs)
        self.ref_to_model = kwargs.get("ref_to_model", None)
        self.something = kwargs.get("something", None)


class SignedIdentifier(msrest.serialization.Model):
    """signed identifier.

    All required parameters must be populated in order to send to Azure.

    :ivar id: a unique id. Required.
    :vartype id: str
    :ivar access_policy: The access policy. Required.
    :vartype access_policy: ~xmlservice.models.AccessPolicy
    """

    _validation = {
        "id": {"required": True},
        "access_policy": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "Id", "type": "str"},
        "access_policy": {"key": "AccessPolicy", "type": "AccessPolicy"},
    }
    _xml_map = {"name": "SignedIdentifier"}

    def __init__(self, **kwargs):
        """
        :keyword id: a unique id. Required.
        :paramtype id: str
        :keyword access_policy: The access policy. Required.
        :paramtype access_policy: ~xmlservice.models.AccessPolicy
        """
        super(SignedIdentifier, self).__init__(**kwargs)
        self.id = kwargs["id"]
        self.access_policy = kwargs["access_policy"]


class Slide(msrest.serialization.Model):
    """A slide in a slideshow.

    :ivar type:
    :vartype type: str
    :ivar title:
    :vartype title: str
    :ivar items:
    :vartype items: list[str]
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str", "xml": {"attr": True}},
        "title": {"key": "title", "type": "str"},
        "items": {"key": "items", "type": "[str]", "xml": {"itemsName": "item"}},
    }
    _xml_map = {"name": "slide"}

    def __init__(self, **kwargs):
        """
        :keyword type:
        :paramtype type: str
        :keyword title:
        :paramtype title: str
        :keyword items:
        :paramtype items: list[str]
        """
        super(Slide, self).__init__(**kwargs)
        self.type = kwargs.get("type", None)
        self.title = kwargs.get("title", None)
        self.items = kwargs.get("items", None)


class Slideshow(msrest.serialization.Model):
    """Data about a slideshow.

    :ivar title:
    :vartype title: str
    :ivar date:
    :vartype date: str
    :ivar author:
    :vartype author: str
    :ivar slides:
    :vartype slides: list[~xmlservice.models.Slide]
    """

    _attribute_map = {
        "title": {"key": "title", "type": "str", "xml": {"attr": True}},
        "date": {"key": "date", "type": "str", "xml": {"attr": True}},
        "author": {"key": "author", "type": "str", "xml": {"attr": True}},
        "slides": {"key": "slides", "type": "[Slide]", "xml": {"itemsName": "slide"}},
    }
    _xml_map = {"name": "slideshow"}

    def __init__(self, **kwargs):
        """
        :keyword title:
        :paramtype title: str
        :keyword date:
        :paramtype date: str
        :keyword author:
        :paramtype author: str
        :keyword slides:
        :paramtype slides: list[~xmlservice.models.Slide]
        """
        super(Slideshow, self).__init__(**kwargs)
        self.title = kwargs.get("title", None)
        self.date = kwargs.get("date", None)
        self.author = kwargs.get("author", None)
        self.slides = kwargs.get("slides", None)


class StorageServiceProperties(msrest.serialization.Model):
    """Storage Service Properties.

    :ivar logging: Azure Analytics Logging settings.
    :vartype logging: ~xmlservice.models.Logging
    :ivar hour_metrics: A summary of request statistics grouped by API in hourly aggregates for
     blobs.
    :vartype hour_metrics: ~xmlservice.models.Metrics
    :ivar minute_metrics: a summary of request statistics grouped by API in minute aggregates for
     blobs.
    :vartype minute_metrics: ~xmlservice.models.Metrics
    :ivar cors: The set of CORS rules.
    :vartype cors: list[~xmlservice.models.CorsRule]
    :ivar default_service_version: The default version to use for requests to the Blob service if
     an incoming request's version is not specified. Possible values include version 2008-10-27 and
     all more recent versions.
    :vartype default_service_version: str
    :ivar delete_retention_policy: The Delete Retention Policy for the service.
    :vartype delete_retention_policy: ~xmlservice.models.RetentionPolicy
    """

    _attribute_map = {
        "logging": {"key": "Logging", "type": "Logging"},
        "hour_metrics": {"key": "HourMetrics", "type": "Metrics"},
        "minute_metrics": {"key": "MinuteMetrics", "type": "Metrics"},
        "cors": {"key": "Cors", "type": "[CorsRule]", "xml": {"wrapped": True, "itemsName": "CorsRule"}},
        "default_service_version": {"key": "DefaultServiceVersion", "type": "str"},
        "delete_retention_policy": {"key": "DeleteRetentionPolicy", "type": "RetentionPolicy"},
    }

    def __init__(self, **kwargs):
        """
        :keyword logging: Azure Analytics Logging settings.
        :paramtype logging: ~xmlservice.models.Logging
        :keyword hour_metrics: A summary of request statistics grouped by API in hourly aggregates for
         blobs.
        :paramtype hour_metrics: ~xmlservice.models.Metrics
        :keyword minute_metrics: a summary of request statistics grouped by API in minute aggregates
         for blobs.
        :paramtype minute_metrics: ~xmlservice.models.Metrics
        :keyword cors: The set of CORS rules.
        :paramtype cors: list[~xmlservice.models.CorsRule]
        :keyword default_service_version: The default version to use for requests to the Blob service
         if an incoming request's version is not specified. Possible values include version 2008-10-27
         and all more recent versions.
        :paramtype default_service_version: str
        :keyword delete_retention_policy: The Delete Retention Policy for the service.
        :paramtype delete_retention_policy: ~xmlservice.models.RetentionPolicy
        """
        super(StorageServiceProperties, self).__init__(**kwargs)
        self.logging = kwargs.get("logging", None)
        self.hour_metrics = kwargs.get("hour_metrics", None)
        self.minute_metrics = kwargs.get("minute_metrics", None)
        self.cors = kwargs.get("cors", None)
        self.default_service_version = kwargs.get("default_service_version", None)
        self.delete_retention_policy = kwargs.get("delete_retention_policy", None)
