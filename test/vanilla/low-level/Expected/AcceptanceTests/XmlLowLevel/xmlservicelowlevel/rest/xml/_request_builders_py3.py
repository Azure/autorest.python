# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, IO, List, Optional, Union, overload
from xml.etree import ElementTree as ET

from msrest import Serializer

from azure.core.rest import HttpRequest
from azure.core.utils import case_insensitive_dict

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

# fmt: off

def build_get_complex_type_ref_no_meta_request(
    **kwargs: Any
) -> HttpRequest:
    """Get a complex type that has a ref to a complex type with no XML node.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/complex-type-ref-no-meta"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_complex_type_ref_no_meta_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts a complex type that has a ref to a complex type with no XML node.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "RefToModel": {
                    "ID": "str"  # Optional. The id of the res.
                },
                "Something": "str"  # Optional. Something else (just to avoid flattening).
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/complex-type-ref-no-meta"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_complex_type_ref_with_meta_request(
    **kwargs: Any
) -> HttpRequest:
    """Get a complex type that has a ref to a complex type with XML node.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/complex-type-ref-with-meta"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_complex_type_ref_with_meta_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts a complex type that has a ref to a complex type with XML node.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "RefToModel": {
                    "ID": "str"  # Optional. The id of the res.
                },
                "Something": "str"  # Optional. Something else (just to avoid flattening).
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/complex-type-ref-with-meta"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_simple_request(
    **kwargs: Any
) -> HttpRequest:
    """Get a simple XML document.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/simple"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_simple_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Put a simple XML document.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "author": "str",  # Optional.
                "date": "str",  # Optional.
                "slides": [
                    {
                        "items": [
                            "str"  # Optional.
                        ],
                        "title": "str",  # Optional.
                        "type": "str"  # Optional.
                    }
                ],
                "title": "str"  # Optional.
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/simple"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_wrapped_lists_request(
    **kwargs: Any
) -> HttpRequest:
    """Get an XML document with multiple wrapped lists.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/wrapped-lists"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_wrapped_lists_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Put an XML document with multiple wrapped lists.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "BadApples": [
                    "str"  # Optional.
                ],
                "GoodApples": [
                    "str"  # Optional.
                ]
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/wrapped-lists"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_headers_request(
    **kwargs: Any
) -> HttpRequest:
    """Get strongly-typed response headers.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    # Construct URL
    _url = "/xml/headers"

    return HttpRequest(
        method="GET",
        url=_url,
        **kwargs
    )


def build_get_empty_list_request(
    **kwargs: Any
) -> HttpRequest:
    """Get an empty list.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/empty-list"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_empty_list_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts an empty list.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "author": "str",  # Optional.
                "date": "str",  # Optional.
                "slides": [
                    {
                        "items": [
                            "str"  # Optional.
                        ],
                        "title": "str",  # Optional.
                        "type": "str"  # Optional.
                    }
                ],
                "title": "str"  # Optional.
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/empty-list"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_empty_wrapped_lists_request(
    **kwargs: Any
) -> HttpRequest:
    """Gets some empty wrapped lists.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/empty-wrapped-lists"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_empty_wrapped_lists_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts some empty wrapped lists.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "BadApples": [
                    "str"  # Optional.
                ],
                "GoodApples": [
                    "str"  # Optional.
                ]
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/empty-wrapped-lists"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_root_list_request(
    **kwargs: Any
) -> HttpRequest:
    """Gets a list as the root element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/root-list"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_root_list_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts a list as the root element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: list[ET.Element]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = [
                {
                    "expiration": "2020-02-20 00:00:00",  # Optional. The time at which
                      you should reconsider eating this banana.
                    "flavor": "str",  # Optional.
                    "name": "str"  # Optional.
                }
            ]
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/root-list"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_root_list_single_item_request(
    **kwargs: Any
) -> HttpRequest:
    """Gets a list with a single item.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/root-list-single-item"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_root_list_single_item_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts a list with a single item.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: list[ET.Element]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = [
                {
                    "expiration": "2020-02-20 00:00:00",  # Optional. The time at which
                      you should reconsider eating this banana.
                    "flavor": "str",  # Optional.
                    "name": "str"  # Optional.
                }
            ]
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/root-list-single-item"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_empty_root_list_request(
    **kwargs: Any
) -> HttpRequest:
    """Gets an empty list as the root element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/empty-root-list"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_empty_root_list_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts an empty list as the root element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: list[ET.Element]
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = [
                {
                    "expiration": "2020-02-20 00:00:00",  # Optional. The time at which
                      you should reconsider eating this banana.
                    "flavor": "str",  # Optional.
                    "name": "str"  # Optional.
                }
            ]
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/empty-root-list"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_empty_child_element_request(
    **kwargs: Any
) -> HttpRequest:
    """Gets an XML document with an empty child element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/empty-child-element"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_empty_child_element_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts a value with an empty child element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "expiration": "2020-02-20 00:00:00",  # Optional. The time at which you
                  should reconsider eating this banana.
                "flavor": "str",  # Optional.
                "name": "str"  # Optional.
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/empty-child-element"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_list_containers_request(
    **kwargs: Any
) -> HttpRequest:
    """Lists containers in a storage account.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: Default value is "list". Note that overriding this default value may result in
     unsupported behavior.
    :paramtype comp: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    comp = kwargs.pop('comp', _params.pop('comp', "list"))  # type: str
    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/"

    # Construct parameters
    _params['comp'] = _SERIALIZER.query("comp", comp, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_get_service_properties_request(
    **kwargs: Any
) -> HttpRequest:
    """Gets storage service properties.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: Default value is "properties". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype comp: str
    :keyword restype: Default value is "service". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    comp = kwargs.pop('comp', _params.pop('comp', "properties"))  # type: str
    restype = kwargs.pop('restype', _params.pop('restype', "service"))  # type: str
    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/"

    # Construct parameters
    _params['comp'] = _SERIALIZER.query("comp", comp, 'str')
    _params['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_put_service_properties_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts storage service properties.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :keyword comp: Default value is "properties". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype comp: str
    :keyword restype: Default value is "service". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "Cors": [
                    {
                        "AllowedHeaders": "str",  # the request headers that the
                          origin domain may specify on the CORS request. Required.
                        "AllowedMethods": "str",  # The methods (HTTP request verbs)
                          that the origin domain may use for a CORS request. (comma separated).
                          Required.
                        "AllowedOrigins": "str",  # The origin domains that are
                          permitted to make a request against the storage service via CORS. The
                          origin domain is the domain from which the request originates. Note that
                          the origin must be an exact case-sensitive match with the origin that the
                          user age sends to the service. You can also use the wildcard character
                          '*' to allow all origin domains to make requests via CORS. Required.
                        "ExposedHeaders": "str",  # The response headers that may be
                          sent in the response to the CORS request and exposed by the browser to
                          the request issuer. Required.
                        "MaxAgeInSeconds": 0  # The maximum amount time that a
                          browser should cache the preflight OPTIONS request. Required.
                    }
                ],
                "DefaultServiceVersion": "str",  # Optional. The default version to use for
                  requests to the Blob service if an incoming request's version is not specified.
                  Possible values include version 2008-10-27 and all more recent versions.
                "DeleteRetentionPolicy": {
                    "Days": 0,  # Optional. Indicates the number of days that metrics or
                      logging or soft-deleted data should be retained. All data older than this
                      value will be deleted.
                    "Enabled": bool  # Indicates whether a retention policy is enabled
                      for the storage service. Required.
                },
                "HourMetrics": {
                    "Enabled": bool,  # Indicates whether metrics are enabled for the
                      Blob service. Required.
                    "IncludeAPIs": bool,  # Optional. Indicates whether metrics should
                      generate summary statistics for called API operations.
                    "RetentionPolicy": {
                        "Days": 0,  # Optional. Indicates the number of days that
                          metrics or logging or soft-deleted data should be retained. All data
                          older than this value will be deleted.
                        "Enabled": bool  # Indicates whether a retention policy is
                          enabled for the storage service. Required.
                    },
                    "Version": "str"  # Optional. The version of Storage Analytics to
                      configure.
                },
                "Logging": {
                    "Delete": bool,  # Indicates whether all delete requests should be
                      logged. Required.
                    "Read": bool,  # Indicates whether all read requests should be
                      logged. Required.
                    "RetentionPolicy": {
                        "Days": 0,  # Optional. Indicates the number of days that
                          metrics or logging or soft-deleted data should be retained. All data
                          older than this value will be deleted.
                        "Enabled": bool  # Indicates whether a retention policy is
                          enabled for the storage service. Required.
                    },
                    "Version": "str",  # The version of Storage Analytics to configure.
                      Required.
                    "Write": bool  # Indicates whether all write requests should be
                      logged. Required.
                },
                "MinuteMetrics": {
                    "Enabled": bool,  # Indicates whether metrics are enabled for the
                      Blob service. Required.
                    "IncludeAPIs": bool,  # Optional. Indicates whether metrics should
                      generate summary statistics for called API operations.
                    "RetentionPolicy": {
                        "Days": 0,  # Optional. Indicates the number of days that
                          metrics or logging or soft-deleted data should be retained. All data
                          older than this value will be deleted.
                        "Enabled": bool  # Indicates whether a retention policy is
                          enabled for the storage service. Required.
                    },
                    "Version": "str"  # Optional. The version of Storage Analytics to
                      configure.
                }
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    comp = kwargs.pop('comp', _params.pop('comp', "properties"))  # type: str
    restype = kwargs.pop('restype', _params.pop('restype', "service"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/"

    # Construct parameters
    _params['comp'] = _SERIALIZER.query("comp", comp, 'str')
    _params['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_acls_request(
    **kwargs: Any
) -> HttpRequest:
    """Gets storage ACLs for a container.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: Default value is "acl". Note that overriding this default value may result in
     unsupported behavior.
    :paramtype comp: str
    :keyword restype: Default value is "container". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    comp = kwargs.pop('comp', _params.pop('comp', "acl"))  # type: str
    restype = kwargs.pop('restype', _params.pop('restype', "container"))  # type: str
    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/mycontainer"

    # Construct parameters
    _params['comp'] = _SERIALIZER.query("comp", comp, 'str')
    _params['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


def build_put_acls_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Puts storage ACLs for a container.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: list[ET.Element]
    :keyword comp: Default value is "acl". Note that overriding this default value may result in
     unsupported behavior.
    :paramtype comp: str
    :keyword restype: Default value is "container". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = [
                {
                    "AccessPolicy": {
                        "Expiry": "2020-02-20 00:00:00",  # the date-time the policy
                          expires. Required.
                        "Permission": "str",  # the permissions for the acl policy.
                          Required.
                        "Start": "2020-02-20 00:00:00"  # the date-time the policy is
                          active. Required.
                    },
                    "Id": "str"  # a unique id. Required.
                }
            ]
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    comp = kwargs.pop('comp', _params.pop('comp', "acl"))  # type: str
    restype = kwargs.pop('restype', _params.pop('restype', "container"))  # type: str
    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/mycontainer"

    # Construct parameters
    _params['comp'] = _SERIALIZER.query("comp", comp, 'str')
    _params['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_params,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_list_blobs_request(
    **kwargs: Any
) -> HttpRequest:
    """Lists blobs in a storage container.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: Default value is "list". Note that overriding this default value may result in
     unsupported behavior.
    :paramtype comp: str
    :keyword restype: Default value is "container". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    comp = kwargs.pop('comp', _params.pop('comp', "list"))  # type: str
    restype = kwargs.pop('restype', _params.pop('restype', "container"))  # type: str
    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/mycontainer"

    # Construct parameters
    _params['comp'] = _SERIALIZER.query("comp", comp, 'str')
    _params['restype'] = _SERIALIZER.query("restype", restype, 'str')

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_params,
        headers=_headers,
        **kwargs
    )


@overload
def build_json_input_request(
    *,
    json: JSON,
    content_type: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """A Swagger with XML that has one operation that takes JSON as input. You need to send the ID
    number 42.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Required.
    :paramtype json: JSON
    :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
     Default value is None.
    :paramtype content_type: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": 0  # Optional.
            }
    """


@overload
def build_json_input_request(
    *,
    content: IO,
    content_type: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    """A Swagger with XML that has one operation that takes JSON as input. You need to send the ID
    number 42.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: IO
    :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
     Default value is None.
    :paramtype content_type: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """


def build_json_input_request(
    **kwargs: Any
) -> HttpRequest:
    """A Swagger with XML that has one operation that takes JSON as input. You need to send the ID
    number 42.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Is either a model type or a IO type. Required.
    :paramtype json: JSON or IO
    :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
     Default value is None.
    :paramtype content_type: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    # Construct URL
    _url = "/xml/jsoninput"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_json_output_request(
    **kwargs: Any
) -> HttpRequest:
    """A Swagger with XML that has one operation that returns JSON. ID number 42.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/json")

    # Construct URL
    _url = "/xml/jsonoutput"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_xms_text_request(
    **kwargs: Any
) -> HttpRequest:
    """Get back an XML object with an x-ms-text property, which should translate to the returned
    object's 'language' property being 'english' and its 'content' property being 'I am text'.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/x-ms-text"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_get_bytes_request(
    **kwargs: Any
) -> HttpRequest:
    """Get an XML document with binary property.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/bytes"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_binary_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Put an XML document with binary property.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "Bytes": bytes("bytes", encoding="utf-8")  # Optional.
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/bytes"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )


def build_get_uri_request(
    **kwargs: Any
) -> HttpRequest:
    """Get an XML document with uri property.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/url"

    # Construct headers
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_headers,
        **kwargs
    )


def build_put_uri_request(
    *,
    content: Any,
    **kwargs: Any
) -> HttpRequest:
    """Put an XML document with uri property.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Required.
    :paramtype content: ET.Element
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            content = {
                "Url": "str"  # Optional.
            }
    """

    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop('content_type', _headers.pop('Content-Type', None))  # type: Optional[str]
    accept = _headers.pop('Accept', "application/xml")

    # Construct URL
    _url = "/xml/url"

    # Construct headers
    if content_type is not None:
        _headers['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _headers['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        headers=_headers,
        content=content,
        **kwargs
    )
