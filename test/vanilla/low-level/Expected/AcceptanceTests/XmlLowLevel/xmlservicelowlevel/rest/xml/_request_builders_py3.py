# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, List, Optional

from azure.core.rest import HttpRequest
from msrest import Serializer

_SERIALIZER = Serializer()


def build_get_complex_type_ref_no_meta_request(**kwargs: Any) -> HttpRequest:
    """Get a complex type that has a ref to a complex type with no XML node.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "RefToModel": {
                    "ID": "str"  # Optional. The id of the res.
                },
                "Something": "str"  # Optional. Something else (just to avoid flattening).
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/complex-type-ref-no-meta")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_complex_type_ref_no_meta_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts a complex type that has a ref to a complex type with no XML node.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/complex-type-ref-no-meta")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_complex_type_ref_with_meta_request(**kwargs: Any) -> HttpRequest:
    """Get a complex type that has a ref to a complex type with XML node.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "RefToModel": {
                    "ID": "str"  # Optional. The id of the res.
                },
                "Something": "str"  # Optional. Something else (just to avoid flattening).
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/complex-type-ref-with-meta")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_complex_type_ref_with_meta_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts a complex type that has a ref to a complex type with XML node.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/complex-type-ref-with-meta")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_simple_request(**kwargs: Any) -> HttpRequest:
    """Get a simple XML document.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "author": "str",  # Optional.
                "date": "str",  # Optional.
                "slides": [
                    {
                        "items": [
                            "str"  # Optional.
                        ],
                        "title": "str",  # Optional.
                        "type": "str"  # Optional.
                    }
                ],
                "title": "str"  # Optional.
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/simple")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_simple_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Put a simple XML document.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/simple")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_wrapped_lists_request(**kwargs: Any) -> HttpRequest:
    """Get an XML document with multiple wrapped lists.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "BadApples": [
                    "str"  # Optional.
                ],
                "GoodApples": [
                    "str"  # Optional.
                ]
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/wrapped-lists")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_wrapped_lists_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Put an XML document with multiple wrapped lists.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/wrapped-lists")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_headers_request(**kwargs: Any) -> HttpRequest:
    """Get strongly-typed response headers.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    # Construct URL
    url = kwargs.pop("template_url", "/xml/headers")

    return HttpRequest(method="GET", url=url, **kwargs)


def build_get_empty_list_request(**kwargs: Any) -> HttpRequest:
    """Get an empty list.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "author": "str",  # Optional.
                "date": "str",  # Optional.
                "slides": [
                    {
                        "items": [
                            "str"  # Optional.
                        ],
                        "title": "str",  # Optional.
                        "type": "str"  # Optional.
                    }
                ],
                "title": "str"  # Optional.
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-list")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_empty_list_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts an empty list.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-list")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_empty_wrapped_lists_request(**kwargs: Any) -> HttpRequest:
    """Gets some empty wrapped lists.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "BadApples": [
                    "str"  # Optional.
                ],
                "GoodApples": [
                    "str"  # Optional.
                ]
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-wrapped-lists")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_empty_wrapped_lists_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts some empty wrapped lists.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-wrapped-lists")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_root_list_request(**kwargs: Any) -> HttpRequest:
    """Gets a list as the root element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == [
                {
                    "expiration": "2020-02-20 00:00:00",  # Optional. The time at which you should reconsider eating this banana.
                    "flavor": "str",  # Optional.
                    "name": "str"  # Optional.
                }
            ]
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/root-list")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_root_list_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts a list as the root element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/root-list")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_root_list_single_item_request(**kwargs: Any) -> HttpRequest:
    """Gets a list with a single item.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == [
                {
                    "expiration": "2020-02-20 00:00:00",  # Optional. The time at which you should reconsider eating this banana.
                    "flavor": "str",  # Optional.
                    "name": "str"  # Optional.
                }
            ]
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/root-list-single-item")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_root_list_single_item_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts a list with a single item.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/root-list-single-item")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_empty_root_list_request(**kwargs: Any) -> HttpRequest:
    """Gets an empty list as the root element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == [
                {
                    "expiration": "2020-02-20 00:00:00",  # Optional. The time at which you should reconsider eating this banana.
                    "flavor": "str",  # Optional.
                    "name": "str"  # Optional.
                }
            ]
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-root-list")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_empty_root_list_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts an empty list as the root element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-root-list")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_empty_child_element_request(**kwargs: Any) -> HttpRequest:
    """Gets an XML document with an empty child element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "expiration": "2020-02-20 00:00:00",  # Optional. The time at which you should reconsider eating this banana.
                "flavor": "str",  # Optional.
                "name": "str"  # Optional.
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-child-element")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_empty_child_element_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts a value with an empty child element.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/empty-child-element")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_list_containers_request(**kwargs: Any) -> HttpRequest:
    """Lists containers in a storage account.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: The default value is "list". Note that overriding this default value may result
     in unsupported behavior.
    :paramtype comp: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "Containers": [
                    {
                        "Metadata": {
                            "str": "str"  # Optional. Dictionary of :code:`<string>`.
                        },
                        "Name": "str",  # Required.
                        "Properties": {
                            "Etag": "str",  # Required.
                            "Last-Modified": "2020-02-20 00:00:00",  # Required.
                            "LeaseDuration": "str",  # Optional. Possible values include: "infinite", "fixed".
                            "LeaseState": "str",  # Optional. Possible values include: "available", "leased", "expired", "breaking", "broken".
                            "LeaseStatus": "str",  # Optional. Possible values include: "locked", "unlocked".
                            "PublicAccess": "str"  # Optional. Possible values include: "container", "blob".
                        }
                    }
                ],
                "Marker": "str",  # Optional.
                "MaxResults": 0,  # Required.
                "NextMarker": "str",  # Required.
                "Prefix": "str",  # Required.
                "ServiceEndpoint": "str"  # Required.
            }
    """

    comp = kwargs.pop("comp", "list")  # type: str

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_get_service_properties_request(**kwargs: Any) -> HttpRequest:
    """Gets storage service properties.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: The default value is "properties". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype comp: str
    :keyword restype: The default value is "service". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "Cors": [
                    {
                        "AllowedHeaders": "str",  # Required. the request headers that the origin domain may specify on the CORS request.
                        "AllowedMethods": "str",  # Required. The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated).
                        "AllowedOrigins": "str",  # Required. The origin domains that are permitted to make a request against the storage service via CORS. The origin domain is the domain from which the request originates. Note that the origin must be an exact case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*' to allow all origin domains to make requests via CORS.
                        "ExposedHeaders": "str",  # Required. The response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer.
                        "MaxAgeInSeconds": 0  # Required. The maximum amount time that a browser should cache the preflight OPTIONS request.
                    }
                ],
                "DefaultServiceVersion": "str",  # Optional. The default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions.
                "DeleteRetentionPolicy": {
                    "Days": 0,  # Optional. Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted.
                    "Enabled": bool  # Required. Indicates whether a retention policy is enabled for the storage service.
                },
                "HourMetrics": {
                    "Enabled": bool,  # Required. Indicates whether metrics are enabled for the Blob service.
                    "IncludeAPIs": bool,  # Optional. Indicates whether metrics should generate summary statistics for called API operations.
                    "RetentionPolicy": {
                        "Days": 0,  # Optional. Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted.
                        "Enabled": bool  # Required. Indicates whether a retention policy is enabled for the storage service.
                    },
                    "Version": "str"  # Optional. The version of Storage Analytics to configure.
                },
                "Logging": {
                    "Delete": bool,  # Required. Indicates whether all delete requests should be logged.
                    "Read": bool,  # Required. Indicates whether all read requests should be logged.
                    "RetentionPolicy": {
                        "Days": 0,  # Optional. Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted.
                        "Enabled": bool  # Required. Indicates whether a retention policy is enabled for the storage service.
                    },
                    "Version": "str",  # Required. The version of Storage Analytics to configure.
                    "Write": bool  # Required. Indicates whether all write requests should be logged.
                },
                "MinuteMetrics": {
                    "Enabled": bool,  # Required. Indicates whether metrics are enabled for the Blob service.
                    "IncludeAPIs": bool,  # Optional. Indicates whether metrics should generate summary statistics for called API operations.
                    "RetentionPolicy": {
                        "Days": 0,  # Optional. Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this value will be deleted.
                        "Enabled": bool  # Required. Indicates whether a retention policy is enabled for the storage service.
                    },
                    "Version": "str"  # Optional. The version of Storage Analytics to configure.
                }
            }
    """

    comp = kwargs.pop("comp", "properties")  # type: str
    restype = kwargs.pop("restype", "service")  # type: str

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_put_service_properties_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts storage service properties.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: The default value is "properties". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype comp: str
    :keyword restype: The default value is "service". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    comp = kwargs.pop("comp", "properties")  # type: str
    restype = kwargs.pop("restype", "service")  # type: str
    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(
        method="PUT", url=url, params=query_parameters, headers=header_parameters, content=content, **kwargs
    )


def build_get_acls_request(**kwargs: Any) -> HttpRequest:
    """Gets storage ACLs for a container.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: The default value is "acl". Note that overriding this default value may result
     in unsupported behavior.
    :paramtype comp: str
    :keyword restype: The default value is "container". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == [
                {
                    "AccessPolicy": {
                        "Expiry": "2020-02-20 00:00:00",  # Required. the date-time the policy expires.
                        "Permission": "str",  # Required. the permissions for the acl policy.
                        "Start": "2020-02-20 00:00:00"  # Required. the date-time the policy is active.
                    },
                    "Id": "str"  # Required. a unique id.
                }
            ]
    """

    comp = kwargs.pop("comp", "acl")  # type: str
    restype = kwargs.pop("restype", "container")  # type: str

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/mycontainer")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_put_acls_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Puts storage ACLs for a container.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: The default value is "acl". Note that overriding this default value may result
     in unsupported behavior.
    :paramtype comp: str
    :keyword restype: The default value is "container". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    comp = kwargs.pop("comp", "acl")  # type: str
    restype = kwargs.pop("restype", "container")  # type: str
    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/mycontainer")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(
        method="PUT", url=url, params=query_parameters, headers=header_parameters, content=content, **kwargs
    )


def build_list_blobs_request(**kwargs: Any) -> HttpRequest:
    """Lists blobs in a storage container.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword comp: The default value is "list". Note that overriding this default value may result
     in unsupported behavior.
    :paramtype comp: str
    :keyword restype: The default value is "container". Note that overriding this default value may
     result in unsupported behavior.
    :paramtype restype: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "Blobs": {
                    "Blob": [
                        {
                            "Deleted": bool,  # Required.
                            "Metadata": {
                                "str": "str"  # Optional. Dictionary of :code:`<string>`.
                            },
                            "Name": "str",  # Required.
                            "Properties": {
                                "AccessTier": "str",  # Optional. Possible values include: "P4", "P6", "P10", "P20", "P30", "P40", "P50", "Hot", "Cool", "Archive".
                                "AccessTierInferred": bool,  # Optional. Required. Properties of a blob.
                                "ArchiveStatus": "str",  # Optional. Possible values include: "rehydrate-pending-to-hot", "rehydrate-pending-to-cool".
                                "BlobType": "str",  # Optional. Possible values include: "BlockBlob", "PageBlob", "AppendBlob".
                                "Cache-Control": "str",  # Optional. Required. Properties of a blob.
                                "Content-Disposition": "str",  # Optional. Required. Properties of a blob.
                                "Content-Encoding": "str",  # Optional. Required. Properties of a blob.
                                "Content-Language": "str",  # Optional. Required. Properties of a blob.
                                "Content-Length": 0.0,  # Optional. Size in bytes.
                                "Content-MD5": "str",  # Optional. Required. Properties of a blob.
                                "Content-Type": "str",  # Optional. Required. Properties of a blob.
                                "CopyCompletionTime": "2020-02-20 00:00:00",  # Optional. Required. Properties of a blob.
                                "CopyId": "str",  # Optional. Required. Properties of a blob.
                                "CopyProgress": "str",  # Optional. Required. Properties of a blob.
                                "CopySource": "str",  # Optional. Required. Properties of a blob.
                                "CopyStatus": "str",  # Optional. Possible values include: "pending", "success", "aborted", "failed".
                                "CopyStatusDescription": "str",  # Optional. Required. Properties of a blob.
                                "DeletedTime": "2020-02-20 00:00:00",  # Optional. Required. Properties of a blob.
                                "DestinationSnapshot": "str",  # Optional. Required. Properties of a blob.
                                "Etag": "str",  # Required.
                                "IncrementalCopy": bool,  # Optional. Required. Properties of a blob.
                                "Last-Modified": "2020-02-20 00:00:00",  # Required.
                                "LeaseDuration": "str",  # Optional. Possible values include: "infinite", "fixed".
                                "LeaseState": "str",  # Optional. Possible values include: "available", "leased", "expired", "breaking", "broken".
                                "LeaseStatus": "str",  # Optional. Possible values include: "locked", "unlocked".
                                "RemainingRetentionDays": 0,  # Optional. Required. Properties of a blob.
                                "ServerEncrypted": bool,  # Optional. Required. Properties of a blob.
                                "x-ms-blob-sequence-number": 0  # Optional. Required. Properties of a blob.
                            },
                            "Snapshot": "str"  # Required.
                        }
                    ],
                    "BlobPrefix": [
                        {
                            "Name": "str"  # Required.
                        }
                    ]
                },
                "ContainerName": "str",  # Required.
                "Delimiter": "str",  # Required.
                "Marker": "str",  # Required.
                "MaxResults": 0,  # Required.
                "NextMarker": "str",  # Required.
                "Prefix": "str",  # Required.
                "ServiceEndpoint": "str"  # Optional.
            }
    """

    comp = kwargs.pop("comp", "list")  # type: str
    restype = kwargs.pop("restype", "container")  # type: str

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/mycontainer")

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters["comp"] = _SERIALIZER.query("comp", comp, "str")
    query_parameters["restype"] = _SERIALIZER.query("restype", restype, "str")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, params=query_parameters, headers=header_parameters, **kwargs)


def build_json_input_request(*, json: Any = None, content: Any = None, **kwargs: Any) -> HttpRequest:
    """A Swagger with XML that has one operation that takes JSON as input. You need to send the ID
    number 42.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "id": 0  # Optional.
            }
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    # Construct URL
    url = kwargs.pop("template_url", "/xml/jsoninput")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, json=json, content=content, **kwargs)


def build_json_output_request(**kwargs: Any) -> HttpRequest:
    """A Swagger with XML that has one operation that returns JSON. ID number 42.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "id": 0  # Optional.
            }
    """

    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/jsonoutput")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_get_xms_text_request(**kwargs: Any) -> HttpRequest:
    """Get back an XML object with an x-ms-text property, which should translate to the returned
    object's 'language' property being 'english' and its 'content' property being 'I am text'.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "content": "str",  # Optional. Returned value should be 'I am text'.
                "language": "str"  # Optional. Returned value should be 'english'.
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/x-ms-text")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_get_bytes_request(**kwargs: Any) -> HttpRequest:
    """Get an XML document with binary property.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "Bytes": bytearray("bytearray", encoding="utf-8")  # Optional.
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/bytes")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_binary_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Put an XML document with binary property.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/bytes")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)


def build_get_uri_request(**kwargs: Any) -> HttpRequest:
    """Get an XML document with uri property.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "Url": str  # Optional.
            }
    """

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/url")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=url, headers=header_parameters, **kwargs)


def build_put_uri_request(*, content: Any, **kwargs: Any) -> HttpRequest:
    """Put an XML document with uri property.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    content_type = kwargs.pop("content_type", None)  # type: Optional[str]

    accept = "application/xml"
    # Construct URL
    url = kwargs.pop("template_url", "/xml/url")

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=url, headers=header_parameters, content=content, **kwargs)
