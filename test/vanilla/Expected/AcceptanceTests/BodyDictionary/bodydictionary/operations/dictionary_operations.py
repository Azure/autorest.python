# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class DictionaryOperations(object):
    """DictionaryOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def get_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get null dictionary value.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{int}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_null.metadata = {'url': '/dictionary/null'}

    def get_empty(
            self, custom_headers=None, raw=False, **operation_config):
        """Get empty dictionary value {}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_empty.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{int}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_empty.metadata = {'url': '/dictionary/empty'}

    def put_empty(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value empty {}.

        :param array_body:
        :type array_body: dict[str, str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_empty.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{str}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_empty.metadata = {'url': '/dictionary/empty'}

    def get_null_value(
            self, custom_headers=None, raw=False, **operation_config):
        """Get Dictionary with null value.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_null_value.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_null_value.metadata = {'url': '/dictionary/nullvalue'}

    def get_null_key(
            self, custom_headers=None, raw=False, **operation_config):
        """Get Dictionary with null key.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_null_key.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_null_key.metadata = {'url': '/dictionary/nullkey'}

    def get_empty_string_key(
            self, custom_headers=None, raw=False, **operation_config):
        """Get Dictionary with key as empty string.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_empty_string_key.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_empty_string_key.metadata = {'url': '/dictionary/keyemptystring'}

    def get_invalid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get invalid Dictionary value.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_invalid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_invalid.metadata = {'url': '/dictionary/invalid'}

    def get_boolean_tfft(
            self, custom_headers=None, raw=False, **operation_config):
        """Get boolean dictionary value {"0": true, "1": false, "2": false, "3":
        true }.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, bool] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_boolean_tfft.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{bool}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_boolean_tfft.metadata = {'url': '/dictionary/prim/boolean/tfft'}

    def put_boolean_tfft(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value empty {"0": true, "1": false, "2": false, "3":
        true }.

        :param array_body:
        :type array_body: dict[str, bool]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_boolean_tfft.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{bool}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_boolean_tfft.metadata = {'url': '/dictionary/prim/boolean/tfft'}

    def get_boolean_invalid_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get boolean dictionary value {"0": true, "1": null, "2": false }.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, bool] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_boolean_invalid_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{bool}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_boolean_invalid_null.metadata = {'url': '/dictionary/prim/boolean/true.null.false'}

    def get_boolean_invalid_string(
            self, custom_headers=None, raw=False, **operation_config):
        """Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, bool] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_boolean_invalid_string.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{bool}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_boolean_invalid_string.metadata = {'url': '/dictionary/prim/boolean/true.boolean.false'}

    def get_integer_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_integer_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{int}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_integer_valid.metadata = {'url': '/dictionary/prim/integer/1.-1.3.300'}

    def put_integer_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body:
        :type array_body: dict[str, int]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_integer_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{int}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_integer_valid.metadata = {'url': '/dictionary/prim/integer/1.-1.3.300'}

    def get_int_invalid_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get integer dictionary value {"0": 1, "1": null, "2": 0}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_int_invalid_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{int}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_int_invalid_null.metadata = {'url': '/dictionary/prim/integer/1.null.zero'}

    def get_int_invalid_string(
            self, custom_headers=None, raw=False, **operation_config):
        """Get integer dictionary value {"0": 1, "1": "integer", "2": 0}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_int_invalid_string.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{int}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_int_invalid_string.metadata = {'url': '/dictionary/prim/integer/1.integer.0'}

    def get_long_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, long] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_long_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{long}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_long_valid.metadata = {'url': '/dictionary/prim/long/1.-1.3.300'}

    def put_long_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}.

        :param array_body:
        :type array_body: dict[str, long]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_long_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{long}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_long_valid.metadata = {'url': '/dictionary/prim/long/1.-1.3.300'}

    def get_long_invalid_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get long dictionary value {"0": 1, "1": null, "2": 0}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, long] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_long_invalid_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{long}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_long_invalid_null.metadata = {'url': '/dictionary/prim/long/1.null.zero'}

    def get_long_invalid_string(
            self, custom_headers=None, raw=False, **operation_config):
        """Get long dictionary value {"0": 1, "1": "integer", "2": 0}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, long] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_long_invalid_string.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{long}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_long_invalid_string.metadata = {'url': '/dictionary/prim/long/1.integer.0'}

    def get_float_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_float_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{float}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_float_valid.metadata = {'url': '/dictionary/prim/float/0--0.01-1.2e20'}

    def put_float_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body:
        :type array_body: dict[str, float]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_float_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{float}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_float_valid.metadata = {'url': '/dictionary/prim/float/0--0.01-1.2e20'}

    def get_float_invalid_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_float_invalid_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{float}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_float_invalid_null.metadata = {'url': '/dictionary/prim/float/0.0-null-1.2e20'}

    def get_float_invalid_string(
            self, custom_headers=None, raw=False, **operation_config):
        """Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_float_invalid_string.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{float}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_float_invalid_string.metadata = {'url': '/dictionary/prim/float/1.number.0'}

    def get_double_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_double_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{float}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_double_valid.metadata = {'url': '/dictionary/prim/double/0--0.01-1.2e20'}

    def put_double_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}.

        :param array_body:
        :type array_body: dict[str, float]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_double_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{float}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_double_valid.metadata = {'url': '/dictionary/prim/double/0--0.01-1.2e20'}

    def get_double_invalid_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_double_invalid_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{float}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_double_invalid_null.metadata = {'url': '/dictionary/prim/double/0.0-null-1.2e20'}

    def get_double_invalid_string(
            self, custom_headers=None, raw=False, **operation_config):
        """Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_double_invalid_string.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{float}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_double_invalid_string.metadata = {'url': '/dictionary/prim/double/1.number.0'}

    def get_string_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_string_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_string_valid.metadata = {'url': '/dictionary/prim/string/foo1.foo2.foo3'}

    def put_string_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}.

        :param array_body:
        :type array_body: dict[str, str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_string_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{str}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_string_valid.metadata = {'url': '/dictionary/prim/string/foo1.foo2.foo3'}

    def get_string_with_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_string_with_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_string_with_null.metadata = {'url': '/dictionary/prim/string/foo.null.foo2'}

    def get_string_with_invalid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_string_with_invalid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{str}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_string_with_invalid.metadata = {'url': '/dictionary/prim/string/foo.123.foo2'}

    def get_date_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02",
        "2": "1492-10-12"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, date] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{date}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_valid.metadata = {'url': '/dictionary/prim/date/valid'}

    def put_date_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2":
        "1492-10-12"}.

        :param array_body:
        :type array_body: dict[str, date]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_date_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{date}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_date_valid.metadata = {'url': '/dictionary/prim/date/valid'}

    def get_date_invalid_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get date dictionary value {"0": "2012-01-01", "1": null, "2":
        "1776-07-04"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, date] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_invalid_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{date}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_invalid_null.metadata = {'url': '/dictionary/prim/date/invalidnull'}

    def get_date_invalid_chars(
            self, custom_headers=None, raw=False, **operation_config):
        """Get date dictionary value {"0": "2011-03-22", "1": "date"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, date] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_invalid_chars.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{date}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_invalid_chars.metadata = {'url': '/dictionary/prim/date/invalidchars'}

    def get_date_time_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1":
        "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, datetime] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_time_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{iso-8601}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_time_valid.metadata = {'url': '/dictionary/prim/date-time/valid'}

    def put_date_time_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value  {"0": "2000-12-01t00:00:01z", "1":
        "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}.

        :param array_body:
        :type array_body: dict[str, datetime]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_date_time_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{iso-8601}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_date_time_valid.metadata = {'url': '/dictionary/prim/date-time/valid'}

    def get_date_time_invalid_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, datetime] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_time_invalid_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{iso-8601}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_time_invalid_null.metadata = {'url': '/dictionary/prim/date-time/invalidnull'}

    def get_date_time_invalid_chars(
            self, custom_headers=None, raw=False, **operation_config):
        """Get date dictionary value {"0": "2000-12-01t00:00:01z", "1":
        "date-time"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, datetime] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_time_invalid_chars.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{iso-8601}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_time_invalid_chars.metadata = {'url': '/dictionary/prim/date-time/invalidchars'}

    def get_date_time_rfc1123_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01
        GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492
        10:15:01 GMT"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, datetime] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_time_rfc1123_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{rfc-1123}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_time_rfc1123_valid.metadata = {'url': '/dictionary/prim/date-time-rfc1123/valid'}

    def put_date_time_rfc1123_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1":
        "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}.

        :param array_body:
        :type array_body: dict[str, datetime]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_date_time_rfc1123_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{rfc-1123}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_date_time_rfc1123_valid.metadata = {'url': '/dictionary/prim/date-time-rfc1123/valid'}

    def get_duration_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get duration dictionary value {"0": "P123DT22H14M12.011S", "1":
        "P5DT1H0M0S"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, timedelta] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_duration_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{duration}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_duration_valid.metadata = {'url': '/dictionary/prim/duration/valid'}

    def put_duration_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}.

        :param array_body:
        :type array_body: dict[str, timedelta]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_duration_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{duration}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_duration_valid.metadata = {'url': '/dictionary/prim/duration/valid'}

    def get_byte_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03),
        "2": hex (25, 29, 43)} with each item encoded in base64.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, bytearray] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_byte_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{bytearray}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_byte_valid.metadata = {'url': '/dictionary/prim/byte/valid'}

    def put_byte_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03),
        "2": hex (25, 29, 43)} with each elementencoded in base 64.

        :param array_body:
        :type array_body: dict[str, bytearray]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_byte_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{bytearray}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_byte_valid.metadata = {'url': '/dictionary/prim/byte/valid'}

    def get_byte_invalid_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the
        first item base64 encoded.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, bytearray] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_byte_invalid_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{bytearray}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_byte_invalid_null.metadata = {'url': '/dictionary/prim/byte/invalidnull'}

    def get_base64_url(
            self, custom_headers=None, raw=False, **operation_config):
        """Get base64url dictionary value {"0": "a string that gets encoded with
        base64url", "1": "test string", "2": "Lorem ipsum"}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, bytes] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_base64_url.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{base64}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_base64_url.metadata = {'url': '/dictionary/prim/base64url/valid'}

    def get_complex_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get dictionary of complex type null value.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~bodydictionary.models.Widget] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{Widget}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_null.metadata = {'url': '/dictionary/complex/null'}

    def get_complex_empty(
            self, custom_headers=None, raw=False, **operation_config):
        """Get empty dictionary of complex type {}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~bodydictionary.models.Widget] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_empty.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{Widget}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_empty.metadata = {'url': '/dictionary/complex/empty'}

    def get_complex_item_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get dictionary of complex type with null item {"0": {"integer": 1,
        "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~bodydictionary.models.Widget] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_item_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{Widget}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_item_null.metadata = {'url': '/dictionary/complex/itemnull'}

    def get_complex_item_empty(
            self, custom_headers=None, raw=False, **operation_config):
        """Get dictionary of complex type with empty item {"0": {"integer": 1,
        "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~bodydictionary.models.Widget] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_item_empty.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{Widget}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_item_empty.metadata = {'url': '/dictionary/complex/itemempty'}

    def get_complex_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get dictionary of complex type with {"0": {"integer": 1, "string":
        "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string":
        "6"}}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, ~bodydictionary.models.Widget] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{Widget}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_valid.metadata = {'url': '/dictionary/complex/valid'}

    def put_complex_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Put an dictionary of complex type with values {"0": {"integer": 1,
        "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5,
        "string": "6"}}.

        :param array_body:
        :type array_body: dict[str, ~bodydictionary.models.Widget]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_complex_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{Widget}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_complex_valid.metadata = {'url': '/dictionary/complex/valid'}

    def get_array_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get a null array.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{[str]}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_null.metadata = {'url': '/dictionary/array/null'}

    def get_array_empty(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an empty dictionary {}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_empty.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{[str]}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_empty.metadata = {'url': '/dictionary/array/empty'}

    def get_array_item_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null,
        "2": ["7", "8", "9"]}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_item_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{[str]}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_item_null.metadata = {'url': '/dictionary/array/itemnull'}

    def get_array_item_empty(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2":
        ["7", "8", "9"]}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_item_empty.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{[str]}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_item_empty.metadata = {'url': '/dictionary/array/itemempty'}

    def get_array_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
        "6"], "2": ["7", "8", "9"]}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{[str]}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_valid.metadata = {'url': '/dictionary/array/valid'}

    def put_array_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
        "6"], "2": ["7", "8", "9"]}.

        :param array_body:
        :type array_body: dict[str, list[str]]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_array_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{[str]}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_array_valid.metadata = {'url': '/dictionary/array/valid'}

    def get_dictionary_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an dictionaries of dictionaries with value null.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, dict[str, str]] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{{str}}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_null.metadata = {'url': '/dictionary/dictionary/null'}

    def get_dictionary_empty(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an dictionaries of dictionaries of type <string, string> with value
        {}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, dict[str, str]] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_empty.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{{str}}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_empty.metadata = {'url': '/dictionary/dictionary/empty'}

    def get_dictionary_item_null(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an dictionaries of dictionaries of type <string, string> with value
        {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7":
        "seven", "8": "eight", "9": "nine"}}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, dict[str, str]] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_item_null.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{{str}}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_item_null.metadata = {'url': '/dictionary/dictionary/itemnull'}

    def get_dictionary_item_empty(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an dictionaries of dictionaries of type <string, string> with value
        {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7":
        "seven", "8": "eight", "9": "nine"}}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, dict[str, str]] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_item_empty.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{{str}}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_item_empty.metadata = {'url': '/dictionary/dictionary/itemempty'}

    def get_dictionary_valid(
            self, custom_headers=None, raw=False, **operation_config):
        """Get an dictionaries of dictionaries of type <string, string> with value
        {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5":
        "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: dict or ClientRawResponse if raw=true
        :rtype: dict[str, dict[str, str]] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('{{str}}', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_valid.metadata = {'url': '/dictionary/dictionary/valid'}

    def put_dictionary_valid(
            self, array_body, custom_headers=None, raw=False, **operation_config):
        """Get an dictionaries of dictionaries of type <string, string> with value
        {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four", "5":
        "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}.

        :param array_body:
        :type array_body: dict[str, dict[str, str]]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodydictionary.models.ErrorException>`
        """
        # Construct URL
        url = self.put_dictionary_valid.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '{{str}}')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_dictionary_valid.metadata = {'url': '/dictionary/dictionary/valid'}
