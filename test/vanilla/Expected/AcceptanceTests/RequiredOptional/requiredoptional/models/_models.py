# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class ArrayOptionalWrapper(msrest.serialization.Model):
    """ArrayOptionalWrapper.

    :param value:
    :type value: list[str]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ArrayOptionalWrapper, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ArrayWrapper(msrest.serialization.Model):
    """ArrayWrapper.

    All required parameters must be populated in order to send to Azure.

    :param value: Required.
    :type value: list[str]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ArrayWrapper, self).__init__(**kwargs)
        self.value = kwargs['value']


class ClassOptionalWrapper(msrest.serialization.Model):
    """ClassOptionalWrapper.

    :param value:
    :type value: ~requiredoptional.models.Product
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'Product'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ClassOptionalWrapper, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class ClassWrapper(msrest.serialization.Model):
    """ClassWrapper.

    All required parameters must be populated in order to send to Azure.

    :param value: Required.
    :type value: ~requiredoptional.models.Product
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'Product'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ClassWrapper, self).__init__(**kwargs)
        self.value = kwargs['value']


class Error(msrest.serialization.Model):
    """Error.

    :param status:
    :type status: int
    :param message:
    :type message: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.message = kwargs.get('message', None)


class IntOptionalWrapper(msrest.serialization.Model):
    """IntOptionalWrapper.

    :param value:
    :type value: int
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IntOptionalWrapper, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class IntWrapper(msrest.serialization.Model):
    """IntWrapper.

    All required parameters must be populated in order to send to Azure.

    :param value: Required.
    :type value: int
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IntWrapper, self).__init__(**kwargs)
        self.value = kwargs['value']


class Product(msrest.serialization.Model):
    """Product.

    All required parameters must be populated in order to send to Azure.

    :param id: Required.
    :type id: int
    :param name:
    :type name: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Product, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.name = kwargs.get('name', None)


class StringOptionalWrapper(msrest.serialization.Model):
    """StringOptionalWrapper.

    :param value:
    :type value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StringOptionalWrapper, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class StringWrapper(msrest.serialization.Model):
    """StringWrapper.

    All required parameters must be populated in order to send to Azure.

    :param value: Required.
    :type value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(StringWrapper, self).__init__(**kwargs)
        self.value = kwargs['value']
