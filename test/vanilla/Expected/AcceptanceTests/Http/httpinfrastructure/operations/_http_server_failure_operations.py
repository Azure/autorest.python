# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.core.tracing.decorator import distributed_trace
from azure.core.exceptions import map_error

from .. import models


class HttpServerFailureOperations(object):
    """HttpServerFailureOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self._config = config

    @distributed_trace
    def head501(self, cls=None, **kwargs):
        """Return 501 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.head501.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    head501.metadata = {'url': '/http/failure/server/501'}

    @distributed_trace
    def get501(self, cls=None, **kwargs):
        """Return 501 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.get501.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get501.metadata = {'url': '/http/failure/server/501'}

    @distributed_trace
    def post505(self, boolean_value=None, cls=None, **kwargs):
        """Return 505 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post505.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    post505.metadata = {'url': '/http/failure/server/505'}

    @distributed_trace
    def delete505(self, boolean_value=None, cls=None, **kwargs):
        """Return 505 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete505.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    delete505.metadata = {'url': '/http/failure/server/505'}
