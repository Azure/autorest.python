# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.exceptions import map_error

from ... import models


class HttpClientFailureOperations:
    """HttpClientFailureOperations async operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self._config = config

    @distributed_trace_async
    async def head400(self, *, cls=None, **kwargs):
        """Return 400 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.head400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    head400.metadata = {'url': '/http/failure/client/400'}

    @distributed_trace_async
    async def get400(self, *, cls=None, **kwargs):
        """Return 400 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.get400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get400.metadata = {'url': '/http/failure/client/400'}

    @distributed_trace_async
    async def put400(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 400 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    put400.metadata = {'url': '/http/failure/client/400'}

    @distributed_trace_async
    async def patch400(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 400 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.patch400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    patch400.metadata = {'url': '/http/failure/client/400'}

    @distributed_trace_async
    async def post400(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 400 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    post400.metadata = {'url': '/http/failure/client/400'}

    @distributed_trace_async
    async def delete400(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 400 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete400.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    delete400.metadata = {'url': '/http/failure/client/400'}

    @distributed_trace_async
    async def head401(self, *, cls=None, **kwargs):
        """Return 401 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.head401.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    head401.metadata = {'url': '/http/failure/client/401'}

    @distributed_trace_async
    async def get402(self, *, cls=None, **kwargs):
        """Return 402 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.get402.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get402.metadata = {'url': '/http/failure/client/402'}

    @distributed_trace_async
    async def get403(self, *, cls=None, **kwargs):
        """Return 403 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.get403.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get403.metadata = {'url': '/http/failure/client/403'}

    @distributed_trace_async
    async def put404(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 404 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put404.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    put404.metadata = {'url': '/http/failure/client/404'}

    @distributed_trace_async
    async def patch405(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 405 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.patch405.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    patch405.metadata = {'url': '/http/failure/client/405'}

    @distributed_trace_async
    async def post406(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 406 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post406.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    post406.metadata = {'url': '/http/failure/client/406'}

    @distributed_trace_async
    async def delete407(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 407 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete407.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    delete407.metadata = {'url': '/http/failure/client/407'}

    @distributed_trace_async
    async def put409(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 409 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put409.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    put409.metadata = {'url': '/http/failure/client/409'}

    @distributed_trace_async
    async def head410(self, *, cls=None, **kwargs):
        """Return 410 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.head410.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    head410.metadata = {'url': '/http/failure/client/410'}

    @distributed_trace_async
    async def get411(self, *, cls=None, **kwargs):
        """Return 411 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.get411.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get411.metadata = {'url': '/http/failure/client/411'}

    @distributed_trace_async
    async def get412(self, *, cls=None, **kwargs):
        """Return 412 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.get412.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get412.metadata = {'url': '/http/failure/client/412'}

    @distributed_trace_async
    async def put413(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 413 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.put413.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    put413.metadata = {'url': '/http/failure/client/413'}

    @distributed_trace_async
    async def patch414(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 414 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.patch414.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    patch414.metadata = {'url': '/http/failure/client/414'}

    @distributed_trace_async
    async def post415(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 415 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.post415.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    post415.metadata = {'url': '/http/failure/client/415'}

    @distributed_trace_async
    async def get416(self, *, cls=None, **kwargs):
        """Return 416 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.get416.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get416.metadata = {'url': '/http/failure/client/416'}

    @distributed_trace_async
    async def delete417(self, boolean_value=None, *, cls=None, **kwargs):
        """Return 417 status code - should be represented in the client as an
        error.

        :param boolean_value: Simple boolean value true
        :type boolean_value: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.delete417.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'

        # Construct body
        if boolean_value is not None:
            body_content = self._serialize.body(boolean_value, 'bool')
        else:
            body_content = None

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    delete417.metadata = {'url': '/http/failure/client/417'}

    @distributed_trace_async
    async def head429(self, *, cls=None, **kwargs):
        """Return 429 status code - should be represented in the client as an
        error.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :return: Error or the result of cls(response)
        :rtype: ~httpinfrastructure.models.Error
        :raises:
         :class:`ErrorException<httpinfrastructure.models.ErrorException>`
        """
        error_map = kwargs.pop('error_map', None)
        # Construct URL
        url = self.head429.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.head(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code < 200 or response.status_code >= 300:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    head429.metadata = {'url': '/http/failure/client/429'}
