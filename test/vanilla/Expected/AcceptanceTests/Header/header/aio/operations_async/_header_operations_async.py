# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Generic, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class HeaderOperations:
    """HeaderOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~header.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def param_existing_key(
        self,
        user_agent_parameter: str,
        **kwargs
    ) -> None:
        """Send a post request with header value "User-Agent": "overwrite".

        :param user_agent_parameter: Send a post request with header value "User-Agent": "overwrite".
        :type user_agent_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_existing_key.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['User-Agent'] = self._serialize.header("user_agent_parameter", user_agent_parameter, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_existing_key.metadata = {'url': '/header/param/existingkey'}  # type: ignore

    @distributed_trace_async
    async def response_existing_key(
        self,
        **kwargs
    ) -> None:
        """Get a response with header value "User-Agent": "overwrite".

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_existing_key.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['User-Agent']=self._deserialize('str', response.headers.get('User-Agent'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_existing_key.metadata = {'url': '/header/response/existingkey'}  # type: ignore

    @distributed_trace_async
    async def param_protected_key(
        self,
        content_type: str,
        **kwargs
    ) -> None:
        """Send a post request with header value "Content-Type": "text/html".

        :param content_type: Send a post request with header value "Content-Type": "text/html".
        :type content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_protected_key.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_protected_key.metadata = {'url': '/header/param/protectedkey'}  # type: ignore

    @distributed_trace_async
    async def response_protected_key(
        self,
        **kwargs
    ) -> None:
        """Get a response with header value "Content-Type": "text/html".

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_protected_key.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['Content-Type']=self._deserialize('str', response.headers.get('Content-Type'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_protected_key.metadata = {'url': '/header/response/protectedkey'}  # type: ignore

    @distributed_trace_async
    async def param_integer(
        self,
        scenario: str,
        value: int,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "positive", "value": 1 or "scenario": "negative", "value": -2.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
        :type scenario: str
        :param value: Send a post request with header values 1 or -2.
        :type value: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_integer.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'int')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_integer.metadata = {'url': '/header/param/prim/integer'}  # type: ignore

    @distributed_trace_async
    async def response_integer(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header value "value": 1 or -2.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_integer.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('int', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_integer.metadata = {'url': '/header/response/prim/integer'}  # type: ignore

    @distributed_trace_async
    async def param_long(
        self,
        scenario: str,
        value: int,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "positive", "value": 105 or "scenario": "negative", "value": -2.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
        :type scenario: str
        :param value: Send a post request with header values 105 or -2.
        :type value: long
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_long.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'long')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_long.metadata = {'url': '/header/param/prim/long'}  # type: ignore

    @distributed_trace_async
    async def response_long(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header value "value": 105 or -2.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_long.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('long', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_long.metadata = {'url': '/header/response/prim/long'}  # type: ignore

    @distributed_trace_async
    async def param_float(
        self,
        scenario: str,
        value: float,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "positive", "value": 0.07 or "scenario": "negative", "value": -3.0.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
        :type scenario: str
        :param value: Send a post request with header values 0.07 or -3.0.
        :type value: float
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_float.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'float')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_float.metadata = {'url': '/header/param/prim/float'}  # type: ignore

    @distributed_trace_async
    async def response_float(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header value "value": 0.07 or -3.0.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_float.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('float', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_float.metadata = {'url': '/header/response/prim/float'}  # type: ignore

    @distributed_trace_async
    async def param_double(
        self,
        scenario: str,
        value: float,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "positive", "value": 7e120 or "scenario": "negative", "value": -3.0.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
        :type scenario: str
        :param value: Send a post request with header values 7e120 or -3.0.
        :type value: float
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_double.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'float')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_double.metadata = {'url': '/header/param/prim/double'}  # type: ignore

    @distributed_trace_async
    async def response_double(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header value "value": 7e120 or -3.0.

        :param scenario: Send a post request with header values "scenario": "positive" or "negative".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_double.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('float', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_double.metadata = {'url': '/header/response/prim/double'}  # type: ignore

    @distributed_trace_async
    async def param_bool(
        self,
        scenario: str,
        value: bool,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "true", "value": true or "scenario": "false", "value": false.

        :param scenario: Send a post request with header values "scenario": "true" or "false".
        :type scenario: str
        :param value: Send a post request with header values true or false.
        :type value: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_bool.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'bool')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_bool.metadata = {'url': '/header/param/prim/bool'}  # type: ignore

    @distributed_trace_async
    async def response_bool(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header value "value": true or false.

        :param scenario: Send a post request with header values "scenario": "true" or "false".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_bool.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('bool', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_bool.metadata = {'url': '/header/response/prim/bool'}  # type: ignore

    @distributed_trace_async
    async def param_string(
        self,
        scenario: str,
        value: Optional[str] = None,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "The quick brown fox jumps over the lazy dog" or "scenario": "null", "value": null or "scenario": "empty", "value": "".

        :param scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty".
        :type scenario: str
        :param value: Send a post request with header values "The quick brown fox jumps over the lazy
         dog" or null or "".
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_string.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        if value is not None:
            header_parameters['value'] = self._serialize.header("value", value, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_string.metadata = {'url': '/header/param/prim/string'}  # type: ignore

    @distributed_trace_async
    async def response_string(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header values "The quick brown fox jumps over the lazy dog" or null or "".

        :param scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_string.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('str', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_string.metadata = {'url': '/header/response/prim/string'}  # type: ignore

    @distributed_trace_async
    async def param_date(
        self,
        scenario: str,
        value: datetime.date,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "2010-01-01" or "scenario": "min", "value": "0001-01-01".

        :param scenario: Send a post request with header values "scenario": "valid" or "min".
        :type scenario: str
        :param value: Send a post request with header values "2010-01-01" or "0001-01-01".
        :type value: ~datetime.date
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_date.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'date')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_date.metadata = {'url': '/header/param/prim/date'}  # type: ignore

    @distributed_trace_async
    async def response_date(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header values "2010-01-01" or "0001-01-01".

        :param scenario: Send a post request with header values "scenario": "valid" or "min".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_date.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('date', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_date.metadata = {'url': '/header/response/prim/date'}  # type: ignore

    @distributed_trace_async
    async def param_datetime(
        self,
        scenario: str,
        value: datetime.datetime,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "2010-01-01T12:34:56Z" or "scenario": "min", "value": "0001-01-01T00:00:00Z".

        :param scenario: Send a post request with header values "scenario": "valid" or "min".
        :type scenario: str
        :param value: Send a post request with header values "2010-01-01T12:34:56Z" or
         "0001-01-01T00:00:00Z".
        :type value: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_datetime.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'iso-8601')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_datetime.metadata = {'url': '/header/param/prim/datetime'}  # type: ignore

    @distributed_trace_async
    async def response_datetime(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header values "2010-01-01T12:34:56Z" or "0001-01-01T00:00:00Z".

        :param scenario: Send a post request with header values "scenario": "valid" or "min".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_datetime.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('iso-8601', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_datetime.metadata = {'url': '/header/response/prim/datetime'}  # type: ignore

    @distributed_trace_async
    async def param_datetime_rfc1123(
        self,
        scenario: str,
        value: Optional[datetime.datetime] = None,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "Wed, 01 Jan 2010 12:34:56 GMT" or "scenario": "min", "value": "Mon, 01 Jan 0001 00:00:00 GMT".

        :param scenario: Send a post request with header values "scenario": "valid" or "min".
        :type scenario: str
        :param value: Send a post request with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon,
         01 Jan 0001 00:00:00 GMT".
        :type value: ~datetime.datetime
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_datetime_rfc1123.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        if value is not None:
            header_parameters['value'] = self._serialize.header("value", value, 'rfc-1123')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_datetime_rfc1123.metadata = {'url': '/header/param/prim/datetimerfc1123'}  # type: ignore

    @distributed_trace_async
    async def response_datetime_rfc1123(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header values "Wed, 01 Jan 2010 12:34:56 GMT" or "Mon, 01 Jan 0001 00:00:00 GMT".

        :param scenario: Send a post request with header values "scenario": "valid" or "min".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_datetime_rfc1123.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('rfc-1123', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_datetime_rfc1123.metadata = {'url': '/header/response/prim/datetimerfc1123'}  # type: ignore

    @distributed_trace_async
    async def param_duration(
        self,
        scenario: str,
        value: datetime.timedelta,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "P123DT22H14M12.011S".

        :param scenario: Send a post request with header values "scenario": "valid".
        :type scenario: str
        :param value: Send a post request with header values "P123DT22H14M12.011S".
        :type value: ~datetime.timedelta
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_duration.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'duration')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_duration.metadata = {'url': '/header/param/prim/duration'}  # type: ignore

    @distributed_trace_async
    async def response_duration(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header values "P123DT22H14M12.011S".

        :param scenario: Send a post request with header values "scenario": "valid".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_duration.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('duration', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_duration.metadata = {'url': '/header/response/prim/duration'}  # type: ignore

    @distributed_trace_async
    async def param_byte(
        self,
        scenario: str,
        value: bytearray,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "啊齄丂狛狜隣郎隣兀﨩".

        :param scenario: Send a post request with header values "scenario": "valid".
        :type scenario: str
        :param value: Send a post request with header values "啊齄丂狛狜隣郎隣兀﨩".
        :type value: bytearray
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_byte.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        header_parameters['value'] = self._serialize.header("value", value, 'bytearray')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_byte.metadata = {'url': '/header/param/prim/byte'}  # type: ignore

    @distributed_trace_async
    async def response_byte(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header values "啊齄丂狛狜隣郎隣兀﨩".

        :param scenario: Send a post request with header values "scenario": "valid".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_byte.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('bytearray', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_byte.metadata = {'url': '/header/response/prim/byte'}  # type: ignore

    @distributed_trace_async
    async def param_enum(
        self,
        scenario: str,
        value: Optional[Union[str, "models.GreyscaleColors"]] = None,
        **kwargs
    ) -> None:
        """Send a post request with header values "scenario": "valid", "value": "GREY" or "scenario": "null", "value": null.

        :param scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty".
        :type scenario: str
        :param value: Send a post request with header values 'GREY'.
        :type value: str or ~header.models.GreyscaleColors
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.param_enum.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')
        if value is not None:
            header_parameters['value'] = self._serialize.header("value", value, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    param_enum.metadata = {'url': '/header/param/prim/enum'}  # type: ignore

    @distributed_trace_async
    async def response_enum(
        self,
        scenario: str,
        **kwargs
    ) -> None:
        """Get a response with header values "GREY" or null.

        :param scenario: Send a post request with header values "scenario": "valid" or "null" or
         "empty".
        :type scenario: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.response_enum.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['scenario'] = self._serialize.header("scenario", scenario, 'str')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        response_headers = {}
        response_headers['value']=self._deserialize('str', response.headers.get('value'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    response_enum.metadata = {'url': '/header/response/prim/enum'}  # type: ignore

    @distributed_trace_async
    async def custom_request_id(
        self,
        **kwargs
    ) -> None:
        """Send x-ms-client-request-id = 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0 in the header of the request.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        # Construct URL
        url = self.custom_request_id.metadata['url']  # type: ignore

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.Error, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
          return cls(pipeline_response, None, {})

    custom_request_id.metadata = {'url': '/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0'}  # type: ignore
