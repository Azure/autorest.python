# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING

from azure.core.protocol import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional, Union

_SERIALIZER = Serializer()


def prepare_header_param_existing_key(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    user_agent_parameter = kwargs.pop("user_agent_parameter")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/existingkey")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["User-Agent"] = _SERIALIZER.header("user_agent_parameter", user_agent_parameter, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_existing_key(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/existingkey")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_protected_key(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop("content_type")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/protectedkey")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_protected_key(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/protectedkey")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_integer(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: int
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/integer")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "int")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_integer(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/integer")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_long(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: int
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/long")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "long")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_long(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/long")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_float(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: float
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/float")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "float")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_float(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/float")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_double(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: float
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/double")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "float")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_double(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/double")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_bool(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: bool
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/bool")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "bool")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_bool(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/bool")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_string(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value", None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/string")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        header_parameters["value"] = _SERIALIZER.header("value", value, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_string(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/string")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_date(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: datetime.date
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/date")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "date")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_date(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/date")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_datetime(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: datetime.datetime
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/datetime")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "iso-8601")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_datetime(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/datetime")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_datetime_rfc1123(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value", None)  # type: Optional[datetime.datetime]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/datetimerfc1123")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        header_parameters["value"] = _SERIALIZER.header("value", value, "rfc-1123")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_datetime_rfc1123(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/datetimerfc1123")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_duration(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: datetime.timedelta
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/duration")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "duration")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_duration(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/duration")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_byte(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value")  # type: bytearray
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/byte")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["value"] = _SERIALIZER.header("value", value, "bytearray")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_byte(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/byte")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_param_enum(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    value = kwargs.pop("value", None)  # type: Optional[Union[str, "_models.GreyscaleColors"]]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/param/prim/enum")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    if value is not None:
        header_parameters["value"] = _SERIALIZER.header("value", value, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_response_enum(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    scenario = kwargs.pop("scenario")  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/response/prim/enum")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["scenario"] = _SERIALIZER.header("scenario", scenario, "str")
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )


def prepare_header_custom_request_id(
    **kwargs,  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/header/custom/x-ms-client-request-id/9C4D50EE-2D56-4CD3-8152-34347DC9F2B0")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
    )
