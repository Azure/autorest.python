# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.pipeline.transport import HttpRequest


def _get_file_request(
    self, **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "image/png, application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/files/stream/nonempty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    return self._client.get(url, query_parameters, header_parameters)


def _get_file_large_request(
    self, **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "image/png, application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/files/stream/verylarge")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    return self._client.get(url, query_parameters, header_parameters)


def _get_empty_file_request(
    self, **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "image/png, application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/files/stream/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

    return self._client.get(url, query_parameters, header_parameters)
