# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.core import PipelineClient
from msrest import Serializer, Deserializer

from ._configuration import AutoRestUrlTestServiceConfiguration
from azure.core.exceptions import map_error
from .operations import PathsOperations
from .operations import QueriesOperations
from .operations import PathItemsOperations
from . import models


class AutoRestUrlTestService(object):
    """Test Infrastructure for AutoRest


    :ivar paths: Paths operations
    :vartype paths: url.operations.PathsOperations
    :ivar queries: Queries operations
    :vartype queries: url.operations.QueriesOperations
    :ivar path_items: PathItems operations
    :vartype path_items: url.operations.PathItemsOperations

    :param global_string_path: A string value 'globalItemStringPath' that
     appears in the path
    :type global_string_path: str
    :param global_string_query: should contain value null
    :type global_string_query: str
    :param str base_url: Service URL
    """

    def __init__(self, global_string_path, global_string_query=None, base_url=None, **kwargs):

        if not base_url:
            base_url = 'http://localhost:3000'
        self._config = AutoRestUrlTestServiceConfiguration(global_string_path, global_string_query, **kwargs)
        self._client = PipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '1.0.0'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.paths = PathsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.queries = QueriesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.path_items = PathItemsOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def __enter__(self):
        self._client.__enter__()
        return self
    def __exit__(self, *exc_details):
        self._client.__exit__(*exc_details)
