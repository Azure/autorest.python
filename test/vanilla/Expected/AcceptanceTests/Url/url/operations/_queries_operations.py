# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import models


class QueriesOperations(object):
    """QueriesOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar byte_query: '' as byte array
    :ivar date_query: '2012-01-01' as date. Constant value: "2012-01-01".
    :ivar date_time_query: '2012-01-01T01:01:01Z' as date-time. Constant value: "2012-01-01T01:01:01Z".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config
        self.byte_query = bytearray("", encoding="utf-8")
        self.date_query = "2012-01-01"
        self.date_time_query = "2012-01-01T01:01:01Z"

    def get_boolean_true(self, cls=None, **operation_config):
        """Get true Boolean value on path.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        bool_query = True

        # Construct URL
        url = self.get_boolean_true.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['boolQuery'] = self._serialize.query("bool_query", bool_query, 'bool')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_boolean_true.metadata = {'url': '/queries/bool/true'}

    def get_boolean_false(self, cls=None, **operation_config):
        """Get false Boolean value on path.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        bool_query = False

        # Construct URL
        url = self.get_boolean_false.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['boolQuery'] = self._serialize.query("bool_query", bool_query, 'bool')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_boolean_false.metadata = {'url': '/queries/bool/false'}

    def get_boolean_null(self, bool_query=None, cls=None, **operation_config):
        """Get null Boolean value on query (query string should be absent).

        :param bool_query: null boolean value
        :type bool_query: bool
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.get_boolean_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if bool_query is not None:
            query_parameters['boolQuery'] = self._serialize.query("bool_query", bool_query, 'bool')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_boolean_null.metadata = {'url': '/queries/bool/null'}

    def get_int_one_million(self, cls=None, **operation_config):
        """Get '1000000' integer value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        int_query = 1000000

        # Construct URL
        url = self.get_int_one_million.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['intQuery'] = self._serialize.query("int_query", int_query, 'int')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_int_one_million.metadata = {'url': '/queries/int/1000000'}

    def get_int_negative_one_million(self, cls=None, **operation_config):
        """Get '-1000000' integer value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        int_query = -1000000

        # Construct URL
        url = self.get_int_negative_one_million.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['intQuery'] = self._serialize.query("int_query", int_query, 'int')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_int_negative_one_million.metadata = {'url': '/queries/int/-1000000'}

    def get_int_null(self, int_query=None, cls=None, **operation_config):
        """Get null integer value (no query parameter).

        :param int_query: null integer value
        :type int_query: int
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.get_int_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if int_query is not None:
            query_parameters['intQuery'] = self._serialize.query("int_query", int_query, 'int')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_int_null.metadata = {'url': '/queries/int/null'}

    def get_ten_billion(self, cls=None, **operation_config):
        """Get '10000000000' 64 bit integer value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        long_query = 10000000000

        # Construct URL
        url = self.get_ten_billion.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['longQuery'] = self._serialize.query("long_query", long_query, 'long')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_ten_billion.metadata = {'url': '/queries/long/10000000000'}

    def get_negative_ten_billion(self, cls=None, **operation_config):
        """Get '-10000000000' 64 bit integer value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        long_query = -10000000000

        # Construct URL
        url = self.get_negative_ten_billion.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['longQuery'] = self._serialize.query("long_query", long_query, 'long')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_negative_ten_billion.metadata = {'url': '/queries/long/-10000000000'}

    def get_long_null(self, long_query=None, cls=None, **operation_config):
        """Get 'null 64 bit integer value (no query param in uri).

        :param long_query: null 64 bit integer value
        :type long_query: long
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.get_long_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if long_query is not None:
            query_parameters['longQuery'] = self._serialize.query("long_query", long_query, 'long')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    get_long_null.metadata = {'url': '/queries/long/null'}

    def float_scientific_positive(self, cls=None, **operation_config):
        """Get '1.034E+20' numeric value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        float_query = 1.034E+20

        # Construct URL
        url = self.float_scientific_positive.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['floatQuery'] = self._serialize.query("float_query", float_query, 'float')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    float_scientific_positive.metadata = {'url': '/queries/float/1.034E+20'}

    def float_scientific_negative(self, cls=None, **operation_config):
        """Get '-1.034E-20' numeric value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        float_query = -1.034E-20

        # Construct URL
        url = self.float_scientific_negative.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['floatQuery'] = self._serialize.query("float_query", float_query, 'float')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    float_scientific_negative.metadata = {'url': '/queries/float/-1.034E-20'}

    def float_null(self, float_query=None, cls=None, **operation_config):
        """Get null numeric value (no query parameter).

        :param float_query: null numeric value
        :type float_query: float
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.float_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if float_query is not None:
            query_parameters['floatQuery'] = self._serialize.query("float_query", float_query, 'float')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    float_null.metadata = {'url': '/queries/float/null'}

    def double_decimal_positive(self, cls=None, **operation_config):
        """Get '9999999.999' numeric value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        double_query = 9999999.999

        # Construct URL
        url = self.double_decimal_positive.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['doubleQuery'] = self._serialize.query("double_query", double_query, 'float')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    double_decimal_positive.metadata = {'url': '/queries/double/9999999.999'}

    def double_decimal_negative(self, cls=None, **operation_config):
        """Get '-9999999.999' numeric value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        double_query = -9999999.999

        # Construct URL
        url = self.double_decimal_negative.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['doubleQuery'] = self._serialize.query("double_query", double_query, 'float')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    double_decimal_negative.metadata = {'url': '/queries/double/-9999999.999'}

    def double_null(self, double_query=None, cls=None, **operation_config):
        """Get null numeric value (no query parameter).

        :param double_query: null numeric value
        :type double_query: float
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.double_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if double_query is not None:
            query_parameters['doubleQuery'] = self._serialize.query("double_query", double_query, 'float')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    double_null.metadata = {'url': '/queries/double/null'}

    def string_unicode(self, cls=None, **operation_config):
        """Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        string_query = "啊齄丂狛狜隣郎隣兀﨩"

        # Construct URL
        url = self.string_unicode.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['stringQuery'] = self._serialize.query("string_query", string_query, 'str')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    string_unicode.metadata = {'url': '/queries/string/unicode/'}

    def string_url_encoded(self, cls=None, **operation_config):
        """Get 'begin!*'();:@ &=+$,/?#[]end.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        string_query = "begin!*'();:@ &=+$,/?#[]end"

        # Construct URL
        url = self.string_url_encoded.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['stringQuery'] = self._serialize.query("string_query", string_query, 'str')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    string_url_encoded.metadata = {'url': '/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend'}

    def string_empty(self, cls=None, **operation_config):
        """Get ''.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        string_query = ""

        # Construct URL
        url = self.string_empty.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['stringQuery'] = self._serialize.query("string_query", string_query, 'str')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    string_empty.metadata = {'url': '/queries/string/empty'}

    def string_null(self, string_query=None, cls=None, **operation_config):
        """Get null (no query parameter in url).

        :param string_query: null string value
        :type string_query: str
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.string_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if string_query is not None:
            query_parameters['stringQuery'] = self._serialize.query("string_query", string_query, 'str')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    string_null.metadata = {'url': '/queries/string/null'}

    def enum_valid(self, enum_query=None, cls=None, **operation_config):
        """Get using uri with query parameter 'green color'.

        :param enum_query: 'green color' enum value. Possible values include:
         'red color', 'green color', 'blue color'
        :type enum_query: str or ~url.models.UriColor
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.enum_valid.metadata['url']

        # Construct parameters
        query_parameters = {}
        if enum_query is not None:
            query_parameters['enumQuery'] = self._serialize.query("enum_query", enum_query, 'UriColor')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    enum_valid.metadata = {'url': '/queries/enum/green%20color'}

    def enum_null(self, enum_query=None, cls=None, **operation_config):
        """Get null (no query parameter in url).

        :param enum_query: null string value. Possible values include: 'red
         color', 'green color', 'blue color'
        :type enum_query: str or ~url.models.UriColor
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.enum_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if enum_query is not None:
            query_parameters['enumQuery'] = self._serialize.query("enum_query", enum_query, 'UriColor')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    enum_null.metadata = {'url': '/queries/enum/null'}

    def byte_multi_byte(self, byte_query=None, cls=None, **operation_config):
        """Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.

        :param byte_query: '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte
         array
        :type byte_query: bytearray
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.byte_multi_byte.metadata['url']

        # Construct parameters
        query_parameters = {}
        if byte_query is not None:
            query_parameters['byteQuery'] = self._serialize.query("byte_query", byte_query, 'bytearray')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    byte_multi_byte.metadata = {'url': '/queries/byte/multibyte'}

    def byte_empty(self, cls=None, **operation_config):
        """Get '' as byte array.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.byte_empty.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['byteQuery'] = self._serialize.query("self.byte_query", self.byte_query, 'bytearray')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    byte_empty.metadata = {'url': '/queries/byte/empty'}

    def byte_null(self, byte_query=None, cls=None, **operation_config):
        """Get null as byte array (no query parameters in uri).

        :param byte_query: null as byte array (no query parameters in uri)
        :type byte_query: bytearray
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.byte_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if byte_query is not None:
            query_parameters['byteQuery'] = self._serialize.query("byte_query", byte_query, 'bytearray')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    byte_null.metadata = {'url': '/queries/byte/null'}

    def date_valid(self, cls=None, **operation_config):
        """Get '2012-01-01' as date.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.date_valid.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['dateQuery'] = self._serialize.query("self.date_query", self.date_query, 'date')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    date_valid.metadata = {'url': '/queries/date/2012-01-01'}

    def date_null(self, date_query=None, cls=None, **operation_config):
        """Get null as date - this should result in no query parameters in uri.

        :param date_query: null as date (no query parameters in uri)
        :type date_query: date
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.date_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if date_query is not None:
            query_parameters['dateQuery'] = self._serialize.query("date_query", date_query, 'date')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    date_null.metadata = {'url': '/queries/date/null'}

    def date_time_valid(self, cls=None, **operation_config):
        """Get '2012-01-01T01:01:01Z' as date-time.

        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.date_time_valid.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['dateTimeQuery'] = self._serialize.query("self.date_time_query", self.date_time_query, 'iso-8601')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    date_time_valid.metadata = {'url': '/queries/datetime/2012-01-01T01%3A01%3A01Z'}

    def date_time_null(self, date_time_query=None, cls=None, **operation_config):
        """Get null as date-time, should result in no query parameters in uri.

        :param date_time_query: null as date-time (no query parameters)
        :type date_time_query: datetime
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.date_time_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if date_time_query is not None:
            query_parameters['dateTimeQuery'] = self._serialize.query("date_time_query", date_time_query, 'iso-8601')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    date_time_null.metadata = {'url': '/queries/datetime/null'}

    def array_string_csv_valid(self, array_query=None, cls=None, **operation_config):
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
        null, ''] using the csv-array format.

        :param array_query: an array of string ['ArrayQuery1', 'begin!*'();:@
         &=+$,/?#[]end' , null, ''] using the csv-array format
        :type array_query: list[str]
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.array_string_csv_valid.metadata['url']

        # Construct parameters
        query_parameters = {}
        if array_query is not None:
            query_parameters['arrayQuery'] = self._serialize.query("array_query", array_query, '[str]', div=',')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    array_string_csv_valid.metadata = {'url': '/queries/array/csv/string/valid'}

    def array_string_csv_null(self, array_query=None, cls=None, **operation_config):
        """Get a null array of string using the csv-array format.

        :param array_query: a null array of string using the csv-array format
        :type array_query: list[str]
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.array_string_csv_null.metadata['url']

        # Construct parameters
        query_parameters = {}
        if array_query is not None:
            query_parameters['arrayQuery'] = self._serialize.query("array_query", array_query, '[str]', div=',')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    array_string_csv_null.metadata = {'url': '/queries/array/csv/string/null'}

    def array_string_csv_empty(self, array_query=None, cls=None, **operation_config):
        """Get an empty array [] of string using the csv-array format.

        :param array_query: an empty array [] of string using the csv-array
         format
        :type array_query: list[str]
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.array_string_csv_empty.metadata['url']

        # Construct parameters
        query_parameters = {}
        if array_query is not None:
            query_parameters['arrayQuery'] = self._serialize.query("array_query", array_query, '[str]', div=',')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    array_string_csv_empty.metadata = {'url': '/queries/array/csv/string/empty'}

    def array_string_ssv_valid(self, array_query=None, cls=None, **operation_config):
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
        null, ''] using the ssv-array format.

        :param array_query: an array of string ['ArrayQuery1', 'begin!*'();:@
         &=+$,/?#[]end' , null, ''] using the ssv-array format
        :type array_query: list[str]
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.array_string_ssv_valid.metadata['url']

        # Construct parameters
        query_parameters = {}
        if array_query is not None:
            query_parameters['arrayQuery'] = self._serialize.query("array_query", array_query, '[str]', div=' ')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    array_string_ssv_valid.metadata = {'url': '/queries/array/ssv/string/valid'}

    def array_string_tsv_valid(self, array_query=None, cls=None, **operation_config):
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
        null, ''] using the tsv-array format.

        :param array_query: an array of string ['ArrayQuery1', 'begin!*'();:@
         &=+$,/?#[]end' , null, ''] using the tsv-array format
        :type array_query: list[str]
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.array_string_tsv_valid.metadata['url']

        # Construct parameters
        query_parameters = {}
        if array_query is not None:
            query_parameters['arrayQuery'] = self._serialize.query("array_query", array_query, '[str]', div='	')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    array_string_tsv_valid.metadata = {'url': '/queries/array/tsv/string/valid'}

    def array_string_pipes_valid(self, array_query=None, cls=None, **operation_config):
        """Get an array of string ['ArrayQuery1', 'begin!*'();:@ &=+$,/?#[]end' ,
        null, ''] using the pipes-array format.

        :param array_query: an array of string ['ArrayQuery1', 'begin!*'();:@
         &=+$,/?#[]end' , null, ''] using the pipes-array format
        :type array_query: list[str]
        :param callable cls: A custom type or function that will be passed the
         direct response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or the result of cls(response)
        :rtype: None
        :raises: :class:`ErrorException<url.models.ErrorException>`
        """
        # Construct URL
        url = self.array_string_pipes_valid.metadata['url']

        # Construct parameters
        query_parameters = {}
        if array_query is not None:
            query_parameters['arrayQuery'] = self._serialize.query("array_query", array_query, '[str]', div='|')

        # Construct headers
        header_parameters = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_output = self._client.pipeline.run(request, stream=False, **operation_config)
        response = pipeline_output.http_response

        if response.status_code not in [200]:
            raise models.ErrorException(response, self._deserialize)

        if cls:
            response_headers = {}
            return cls(response, None, response_headers)
    array_string_pipes_valid.metadata = {'url': '/queries/array/pipes/string/valid'}
