# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import List, Optional, Union

from azure.core.pipeline.transport import HttpRequest
from azure.core.pipeline.transport._base import _format_url_section
from msrest import Serializer

_SERIALIZER = Serializer()

import xml.etree.ElementTree as ET


def _request(
    method,
    url,
    params=None,
    headers=None,
    content=None,
    form_content=None,
    stream_content=None,
):
    request = HttpRequest(method, url, headers=headers)

    if params:
        request.format_parameters(params)

    if content is not None:
        content_type = request.headers.get("Content-Type")
        if isinstance(content, ET.Element):
            request.set_xml_body(content)
        # https://github.com/Azure/azure-sdk-for-python/issues/12137
        # A string is valid JSON, make the difference between text
        # and a plain JSON string.
        # Content-Type is a good indicator of intent from user
        elif content_type and content_type.startswith("text/"):
            request.set_text_body(content)
        else:
            try:
                request.set_json_body(content)
            except TypeError:
                request.data = content

    if form_content:
        request.set_formdata_body(form_content)
    elif stream_content:
        request.set_streamed_data_body(stream_content)

    return request


def _prepare_paths_get_boolean_true_request(**kwargs) -> HttpRequest:
    bool_path = True
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/bool/true/{boolPath}")
    path_format_arguments = {
        "boolPath": _SERIALIZER.url("bool_path", bool_path, "bool"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_get_boolean_false_request(**kwargs) -> HttpRequest:
    bool_path = False
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/bool/false/{boolPath}")
    path_format_arguments = {
        "boolPath": _SERIALIZER.url("bool_path", bool_path, "bool"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_get_int_one_million_request(**kwargs) -> HttpRequest:
    int_path = 1000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/int/1000000/{intPath}")
    path_format_arguments = {
        "intPath": _SERIALIZER.url("int_path", int_path, "int"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_get_int_negative_one_million_request(**kwargs) -> HttpRequest:
    int_path = -1000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/int/-1000000/{intPath}")
    path_format_arguments = {
        "intPath": _SERIALIZER.url("int_path", int_path, "int"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_get_ten_billion_request(**kwargs) -> HttpRequest:
    long_path = 10000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/long/10000000000/{longPath}")
    path_format_arguments = {
        "longPath": _SERIALIZER.url("long_path", long_path, "long"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_get_negative_ten_billion_request(**kwargs) -> HttpRequest:
    long_path = -10000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/long/-10000000000/{longPath}")
    path_format_arguments = {
        "longPath": _SERIALIZER.url("long_path", long_path, "long"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_float_scientific_positive_request(**kwargs) -> HttpRequest:
    float_path = 103400000000000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/float/1.034E+20/{floatPath}")
    path_format_arguments = {
        "floatPath": _SERIALIZER.url("float_path", float_path, "float"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_float_scientific_negative_request(**kwargs) -> HttpRequest:
    float_path = -1.034e-20
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/float/-1.034E-20/{floatPath}")
    path_format_arguments = {
        "floatPath": _SERIALIZER.url("float_path", float_path, "float"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_double_decimal_positive_request(**kwargs) -> HttpRequest:
    double_path = 9999999.999
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/double/9999999.999/{doublePath}")
    path_format_arguments = {
        "doublePath": _SERIALIZER.url("double_path", double_path, "float"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_double_decimal_negative_request(**kwargs) -> HttpRequest:
    double_path = -9999999.999
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/double/-9999999.999/{doublePath}")
    path_format_arguments = {
        "doublePath": _SERIALIZER.url("double_path", double_path, "float"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_string_unicode_request(**kwargs) -> HttpRequest:
    string_path = "啊齄丂狛狜隣郎隣兀﨩"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/unicode/{stringPath}")
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_string_url_encoded_request(**kwargs) -> HttpRequest:
    string_path = "begin!*'();:@ &=+$,/?#[]end"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url", "/paths/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend/{stringPath}"
    )
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_string_url_non_encoded_request(**kwargs) -> HttpRequest:
    string_path = "begin!*'();:@&=+$,end"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/begin!*'();:@&=+$,end/{stringPath}")
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str", skip_quote=True),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_string_empty_request(**kwargs) -> HttpRequest:
    string_path = ""
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/empty/{stringPath}")
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_string_null_request(string_path: str, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/null/{stringPath}")
    path_format_arguments = {
        "stringPath": _SERIALIZER.url("string_path", string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_enum_valid_request(enum_path: Union[str, "_models.UriColor"], **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/enum/green%20color/{enumPath}")
    path_format_arguments = {
        "enumPath": _SERIALIZER.url("enum_path", enum_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_enum_null_request(enum_path: Union[str, "_models.UriColor"], **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/null/{enumPath}")
    path_format_arguments = {
        "enumPath": _SERIALIZER.url("enum_path", enum_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_byte_multi_byte_request(byte_path: bytearray, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/byte/multibyte/{bytePath}")
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_byte_empty_request(**kwargs) -> HttpRequest:
    byte_path = bytearray("", encoding="utf-8")
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/byte/empty/{bytePath}")
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_byte_null_request(byte_path: bytearray, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/byte/null/{bytePath}")
    path_format_arguments = {
        "bytePath": _SERIALIZER.url("byte_path", byte_path, "bytearray"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_date_valid_request(**kwargs) -> HttpRequest:
    date_path = "2012-01-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/date/2012-01-01/{datePath}")
    path_format_arguments = {
        "datePath": _SERIALIZER.url("date_path", date_path, "date"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_date_null_request(date_path: datetime.date, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/date/null/{datePath}")
    path_format_arguments = {
        "datePath": _SERIALIZER.url("date_path", date_path, "date"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_date_time_valid_request(**kwargs) -> HttpRequest:
    date_time_path = "2012-01-01T01:01:01Z"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/datetime/2012-01-01T01%3A01%3A01Z/{dateTimePath}")
    path_format_arguments = {
        "dateTimePath": _SERIALIZER.url("date_time_path", date_time_path, "iso-8601"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_date_time_null_request(date_time_path: datetime.datetime, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/datetime/null/{dateTimePath}")
    path_format_arguments = {
        "dateTimePath": _SERIALIZER.url("date_time_path", date_time_path, "iso-8601"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_base64_url_request(base64_url_path: bytes, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/string/bG9yZW0/{base64UrlPath}")
    path_format_arguments = {
        "base64UrlPath": _SERIALIZER.url("base64_url_path", base64_url_path, "base64"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_array_csv_in_path_request(array_path: List[str], **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/paths/array/ArrayPath1%2cbegin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend%2c%2c/{arrayPath}",
    )
    path_format_arguments = {
        "arrayPath": _SERIALIZER.url("array_path", array_path, "[str]", div=","),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_paths_unix_time_url_request(unix_time_url_path: datetime.datetime, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/paths/int/1460505600/{unixTimeUrlPath}")
    path_format_arguments = {
        "unixTimeUrlPath": _SERIALIZER.url("unix_time_url_path", unix_time_url_path, "unix-time"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_boolean_true_request(**kwargs) -> HttpRequest:
    bool_query = True
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/bool/true")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_boolean_false_request(**kwargs) -> HttpRequest:
    bool_query = False
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/bool/false")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_boolean_null_request(bool_query: Optional[bool] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/bool/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if bool_query is not None:
        query_parameters["boolQuery"] = _SERIALIZER.query("bool_query", bool_query, "bool")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_int_one_million_request(**kwargs) -> HttpRequest:
    int_query = 1000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/int/1000000")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_int_negative_one_million_request(**kwargs) -> HttpRequest:
    int_query = -1000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/int/-1000000")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_int_null_request(int_query: Optional[int] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/int/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if int_query is not None:
        query_parameters["intQuery"] = _SERIALIZER.query("int_query", int_query, "int")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_ten_billion_request(**kwargs) -> HttpRequest:
    long_query = 10000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/long/10000000000")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_negative_ten_billion_request(**kwargs) -> HttpRequest:
    long_query = -10000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/long/-10000000000")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_get_long_null_request(long_query: Optional[int] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/long/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if long_query is not None:
        query_parameters["longQuery"] = _SERIALIZER.query("long_query", long_query, "long")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_float_scientific_positive_request(**kwargs) -> HttpRequest:
    float_query = 103400000000000000000
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/float/1.034E+20")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_float_scientific_negative_request(**kwargs) -> HttpRequest:
    float_query = -1.034e-20
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/float/-1.034E-20")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_float_null_request(float_query: Optional[float] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/float/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if float_query is not None:
        query_parameters["floatQuery"] = _SERIALIZER.query("float_query", float_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_double_decimal_positive_request(**kwargs) -> HttpRequest:
    double_query = 9999999.999
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/double/9999999.999")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_double_decimal_negative_request(**kwargs) -> HttpRequest:
    double_query = -9999999.999
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/double/-9999999.999")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_double_null_request(double_query: Optional[float] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/double/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if double_query is not None:
        query_parameters["doubleQuery"] = _SERIALIZER.query("double_query", double_query, "float")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_string_unicode_request(**kwargs) -> HttpRequest:
    string_query = "啊齄丂狛狜隣郎隣兀﨩"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/string/unicode/")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_string_url_encoded_request(**kwargs) -> HttpRequest:
    string_query = "begin!*'();:@ &=+$,/?#[]end"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url", "/queries/string/begin%21%2A%27%28%29%3B%3A%40%20%26%3D%2B%24%2C%2F%3F%23%5B%5Dend"
    )

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_string_empty_request(**kwargs) -> HttpRequest:
    string_query = ""
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/string/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_string_null_request(string_query: Optional[str] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/string/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if string_query is not None:
        query_parameters["stringQuery"] = _SERIALIZER.query("string_query", string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_enum_valid_request(
    enum_query: Optional[Union[str, "_models.UriColor"]] = None, **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/enum/green%20color")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if enum_query is not None:
        query_parameters["enumQuery"] = _SERIALIZER.query("enum_query", enum_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_enum_null_request(
    enum_query: Optional[Union[str, "_models.UriColor"]] = None, **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/enum/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if enum_query is not None:
        query_parameters["enumQuery"] = _SERIALIZER.query("enum_query", enum_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_byte_multi_byte_request(byte_query: Optional[bytearray] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/byte/multibyte")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if byte_query is not None:
        query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_byte_empty_request(**kwargs) -> HttpRequest:
    byte_query = bytearray("", encoding="utf-8")
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/byte/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_byte_null_request(byte_query: Optional[bytearray] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/byte/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if byte_query is not None:
        query_parameters["byteQuery"] = _SERIALIZER.query("byte_query", byte_query, "bytearray")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_date_valid_request(**kwargs) -> HttpRequest:
    date_query = "2012-01-01"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/date/2012-01-01")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["dateQuery"] = _SERIALIZER.query("date_query", date_query, "date")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_date_null_request(date_query: Optional[datetime.date] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/date/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if date_query is not None:
        query_parameters["dateQuery"] = _SERIALIZER.query("date_query", date_query, "date")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_date_time_valid_request(**kwargs) -> HttpRequest:
    date_time_query = "2012-01-01T01:01:01Z"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/datetime/2012-01-01T01%3A01%3A01Z")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters["dateTimeQuery"] = _SERIALIZER.query("date_time_query", date_time_query, "iso-8601")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_date_time_null_request(
    date_time_query: Optional[datetime.datetime] = None, **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/datetime/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if date_time_query is not None:
        query_parameters["dateTimeQuery"] = _SERIALIZER.query("date_time_query", date_time_query, "iso-8601")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_array_string_csv_valid_request(array_query: Optional[List[str]] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/csv/string/valid")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_array_string_csv_null_request(array_query: Optional[List[str]] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/csv/string/null")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_array_string_csv_empty_request(array_query: Optional[List[str]] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/csv/string/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_array_string_no_collection_format_empty_request(
    array_query: Optional[List[str]] = None, **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/none/string/empty")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=",")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_array_string_ssv_valid_request(array_query: Optional[List[str]] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/ssv/string/valid")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div=" ")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_array_string_tsv_valid_request(array_query: Optional[List[str]] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/tsv/string/valid")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div="	")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_queries_array_string_pipes_valid_request(array_query: Optional[List[str]] = None, **kwargs) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", "/queries/array/pipes/string/valid")

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if array_query is not None:
        query_parameters["arrayQuery"] = _SERIALIZER.query("array_query", array_query, "[str]", div="|")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_pathitems_get_all_with_values_request(
    path_item_string_path: str,
    global_string_path: str,
    local_string_path: str,
    path_item_string_query: Optional[str] = None,
    global_string_query: Optional[str] = None,
    local_string_query: Optional[str] = None,
    **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/pathItemStringQuery/localStringQuery",
    )
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_pathitems_get_global_query_null_request(
    path_item_string_path: str,
    global_string_path: str,
    local_string_path: str,
    path_item_string_query: Optional[str] = None,
    global_string_query: Optional[str] = None,
    local_string_query: Optional[str] = None,
    **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/localStringQuery",
    )
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_pathitems_get_global_and_local_query_null_request(
    path_item_string_path: str,
    global_string_path: str,
    local_string_path: str,
    path_item_string_query: Optional[str] = None,
    global_string_query: Optional[str] = None,
    local_string_query: Optional[str] = None,
    **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/null/pathItemStringQuery/null",
    )
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)


def _prepare_pathitems_get_local_path_item_query_null_request(
    path_item_string_path: str,
    global_string_path: str,
    local_string_path: str,
    path_item_string_query: Optional[str] = None,
    global_string_query: Optional[str] = None,
    local_string_query: Optional[str] = None,
    **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop(
        "template_url",
        "/pathitem/nullable/globalStringPath/{globalStringPath}/pathItemStringPath/{pathItemStringPath}/localStringPath/{localStringPath}/globalStringQuery/null/null",
    )
    path_format_arguments = {
        "pathItemStringPath": _SERIALIZER.url("path_item_string_path", path_item_string_path, "str"),
        "globalStringPath": _SERIALIZER.url("global_string_path", global_string_path, "str"),
        "localStringPath": _SERIALIZER.url("local_string_path", local_string_path, "str"),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    if path_item_string_query is not None:
        query_parameters["pathItemStringQuery"] = _SERIALIZER.query(
            "path_item_string_query", path_item_string_query, "str"
        )
    if global_string_query is not None:
        query_parameters["globalStringQuery"] = _SERIALIZER.query("global_string_query", global_string_query, "str")
    if local_string_query is not None:
        query_parameters["localStringQuery"] = _SERIALIZER.query("local_string_query", local_string_query, "str")

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return _request("GET", url, query_parameters, header_parameters)
