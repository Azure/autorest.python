# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace

from .. import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class PetsOperations(object):
    """PetsOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~additionalproperties.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def create_ap_true(
        self,
        create_parameters,  # type: "models.PetApTrue"
        cls=None,  # type: ClsType["models.PetApTrue"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.PetApTrue"
        """Create a Pet which contains more properties than what is defined.

        :param create_parameters:
        :type create_parameters: ~additionalproperties.models.PetApTrue
        :param callable cls: A custom type or function that will be passed the direct response
        :return: PetApTrue or the result of cls(response)
        :rtype: ~additionalproperties.models.PetApTrue
        :raises: ~additionalproperties.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.create_ap_true.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(create_parameters, 'PetApTrue')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('PetApTrue', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ap_true.metadata = {'url': '/additionalProperties/true'}

    @distributed_trace
    def create_cat_ap_true(
        self,
        create_parameters,  # type: "models.CatApTrue"
        cls=None,  # type: ClsType["models.CatApTrue"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.CatApTrue"
        """Create a CatAPTrue which contains more properties than what is defined.

        :param create_parameters:
        :type create_parameters: ~additionalproperties.models.CatApTrue
        :param callable cls: A custom type or function that will be passed the direct response
        :return: CatApTrue or the result of cls(response)
        :rtype: ~additionalproperties.models.CatApTrue
        :raises: ~additionalproperties.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.create_cat_ap_true.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(create_parameters, 'CatApTrue')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('CatApTrue', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    create_cat_ap_true.metadata = {'url': '/additionalProperties/true-subclass'}

    @distributed_trace
    def create_ap_object(
        self,
        create_parameters,  # type: "models.PetApObject"
        cls=None,  # type: ClsType["models.PetApObject"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.PetApObject"
        """Create a Pet which contains more properties than what is defined.

        :param create_parameters:
        :type create_parameters: ~additionalproperties.models.PetApObject
        :param callable cls: A custom type or function that will be passed the direct response
        :return: PetApObject or the result of cls(response)
        :rtype: ~additionalproperties.models.PetApObject
        :raises: ~additionalproperties.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.create_ap_object.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(create_parameters, 'PetApObject')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('PetApObject', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ap_object.metadata = {'url': '/additionalProperties/type/object'}

    @distributed_trace
    def create_ap_string(
        self,
        create_parameters,  # type: "models.PetApString"
        cls=None,  # type: ClsType["models.PetApString"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.PetApString"
        """Create a Pet which contains more properties than what is defined.

        :param create_parameters:
        :type create_parameters: ~additionalproperties.models.PetApString
        :param callable cls: A custom type or function that will be passed the direct response
        :return: PetApString or the result of cls(response)
        :rtype: ~additionalproperties.models.PetApString
        :raises: ~additionalproperties.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.create_ap_string.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(create_parameters, 'PetApString')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('PetApString', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ap_string.metadata = {'url': '/additionalProperties/type/string'}

    @distributed_trace
    def create_ap_in_properties(
        self,
        create_parameters,  # type: "models.PetApInProperties"
        cls=None,  # type: ClsType["models.PetApInProperties"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.PetApInProperties"
        """Create a Pet which contains more properties than what is defined.

        :param create_parameters:
        :type create_parameters: ~additionalproperties.models.PetApInProperties
        :param callable cls: A custom type or function that will be passed the direct response
        :return: PetApInProperties or the result of cls(response)
        :rtype: ~additionalproperties.models.PetApInProperties
        :raises: ~additionalproperties.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.create_ap_in_properties.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(create_parameters, 'PetApInProperties')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('PetApInProperties', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ap_in_properties.metadata = {'url': '/additionalProperties/in/properties'}

    @distributed_trace
    def create_ap_in_properties_with_apstring(
        self,
        create_parameters,  # type: "models.PetApInPropertiesWithApstring"
        cls=None,  # type: ClsType["models.PetApInPropertiesWithApstring"]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.PetApInPropertiesWithApstring"
        """Create a Pet which contains more properties than what is defined.

        :param create_parameters:
        :type create_parameters: ~additionalproperties.models.PetApInPropertiesWithApstring
        :param callable cls: A custom type or function that will be passed the direct response
        :return: PetApInPropertiesWithApstring or the result of cls(response)
        :rtype: ~additionalproperties.models.PetApInPropertiesWithApstring
        :raises: ~additionalproperties.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.create_ap_in_properties_with_apstring.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(create_parameters, 'PetApInPropertiesWithApstring')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('PetApInPropertiesWithApstring', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    create_ap_in_properties_with_apstring.metadata = {'url': '/additionalProperties/in/properties/with/additionalProperties/string'}
