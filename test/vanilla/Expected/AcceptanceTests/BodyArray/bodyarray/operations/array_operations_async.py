# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models
from .array_operations import ArrayOperations as _ArrayOperations


class ArrayOperations(_ArrayOperations):
    """ArrayOperations operations."""

    async def get_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get null array value.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[int]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_null_async.metadata = {'url': '/array/null'}

    async def get_invalid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get invalid array [1, 2, 3.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_invalid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[int]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_invalid_async.metadata = {'url': '/array/invalid'}

    async def get_empty_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get empty array value [].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_empty_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[int]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_empty_async.metadata = {'url': '/array/empty'}

    async def put_empty_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value empty [].

        :param array_body:
        :type array_body: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_empty_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[str]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_empty_async.metadata = {'url': '/array/empty'}

    async def get_boolean_tfft_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get boolean array value [true, false, false, true].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[bool] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_boolean_tfft_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[bool]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_boolean_tfft_async.metadata = {'url': '/array/prim/boolean/tfft'}

    async def put_boolean_tfft_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value empty [true, false, false, true].

        :param array_body:
        :type array_body: list[bool]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_boolean_tfft_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[bool]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_boolean_tfft_async.metadata = {'url': '/array/prim/boolean/tfft'}

    async def get_boolean_invalid_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get boolean array value [true, null, false].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[bool] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_boolean_invalid_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[bool]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_boolean_invalid_null_async.metadata = {'url': '/array/prim/boolean/true.null.false'}

    async def get_boolean_invalid_string_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get boolean array value [true, 'boolean', false].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[bool] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_boolean_invalid_string_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[bool]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_boolean_invalid_string_async.metadata = {'url': '/array/prim/boolean/true.boolean.false'}

    async def get_integer_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get integer array value [1, -1, 3, 300].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_integer_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[int]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_integer_valid_async.metadata = {'url': '/array/prim/integer/1.-1.3.300'}

    async def put_integer_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value empty [1, -1, 3, 300].

        :param array_body:
        :type array_body: list[int]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_integer_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[int]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_integer_valid_async.metadata = {'url': '/array/prim/integer/1.-1.3.300'}

    async def get_int_invalid_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get integer array value [1, null, 0].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_int_invalid_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[int]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_int_invalid_null_async.metadata = {'url': '/array/prim/integer/1.null.zero'}

    async def get_int_invalid_string_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get integer array value [1, 'integer', 0].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[int] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_int_invalid_string_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[int]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_int_invalid_string_async.metadata = {'url': '/array/prim/integer/1.integer.0'}

    async def get_long_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get integer array value [1, -1, 3, 300].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[long] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_long_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[long]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_long_valid_async.metadata = {'url': '/array/prim/long/1.-1.3.300'}

    async def put_long_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value empty [1, -1, 3, 300].

        :param array_body:
        :type array_body: list[long]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_long_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[long]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_long_valid_async.metadata = {'url': '/array/prim/long/1.-1.3.300'}

    async def get_long_invalid_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get long array value [1, null, 0].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[long] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_long_invalid_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[long]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_long_invalid_null_async.metadata = {'url': '/array/prim/long/1.null.zero'}

    async def get_long_invalid_string_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get long array value [1, 'integer', 0].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[long] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_long_invalid_string_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[long]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_long_invalid_string_async.metadata = {'url': '/array/prim/long/1.integer.0'}

    async def get_float_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get float array value [0, -0.01, 1.2e20].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_float_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[float]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_float_valid_async.metadata = {'url': '/array/prim/float/0--0.01-1.2e20'}

    async def put_float_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value [0, -0.01, 1.2e20].

        :param array_body:
        :type array_body: list[float]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_float_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[float]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_float_valid_async.metadata = {'url': '/array/prim/float/0--0.01-1.2e20'}

    async def get_float_invalid_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get float array value [0.0, null, -1.2e20].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_float_invalid_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[float]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_float_invalid_null_async.metadata = {'url': '/array/prim/float/0.0-null-1.2e20'}

    async def get_float_invalid_string_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get boolean array value [1.0, 'number', 0.0].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_float_invalid_string_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[float]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_float_invalid_string_async.metadata = {'url': '/array/prim/float/1.number.0'}

    async def get_double_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get float array value [0, -0.01, 1.2e20].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_double_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[float]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_double_valid_async.metadata = {'url': '/array/prim/double/0--0.01-1.2e20'}

    async def put_double_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value [0, -0.01, 1.2e20].

        :param array_body:
        :type array_body: list[float]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_double_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[float]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_double_valid_async.metadata = {'url': '/array/prim/double/0--0.01-1.2e20'}

    async def get_double_invalid_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get float array value [0.0, null, -1.2e20].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_double_invalid_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[float]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_double_invalid_null_async.metadata = {'url': '/array/prim/double/0.0-null-1.2e20'}

    async def get_double_invalid_string_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get boolean array value [1.0, 'number', 0.0].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[float] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_double_invalid_string_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[float]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_double_invalid_string_async.metadata = {'url': '/array/prim/double/1.number.0'}

    async def get_string_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get string array value ['foo1', 'foo2', 'foo3'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_string_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_string_valid_async.metadata = {'url': '/array/prim/string/foo1.foo2.foo3'}

    async def put_string_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body:
        :type array_body: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_string_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[str]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_string_valid_async.metadata = {'url': '/array/prim/string/foo1.foo2.foo3'}

    async def get_enum_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get enum array value ['foo1', 'foo2', 'foo3'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str or ~bodyarray.models.FooEnum] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_enum_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[FooEnum]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_enum_valid_async.metadata = {'url': '/array/prim/enum/foo1.foo2.foo3'}

    async def put_enum_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body:
        :type array_body: list[str or ~bodyarray.models.FooEnum]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_enum_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[FooEnum]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_enum_valid_async.metadata = {'url': '/array/prim/enum/foo1.foo2.foo3'}

    async def get_string_enum_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get enum array value ['foo1', 'foo2', 'foo3'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_string_enum_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_string_enum_valid_async.metadata = {'url': '/array/prim/string-enum/foo1.foo2.foo3'}

    async def put_string_enum_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value ['foo1', 'foo2', 'foo3'].

        :param array_body:
        :type array_body: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_string_enum_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[str]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_string_enum_valid_async.metadata = {'url': '/array/prim/string-enum/foo1.foo2.foo3'}

    async def get_string_with_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get string array value ['foo', null, 'foo2'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_string_with_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_string_with_null_async.metadata = {'url': '/array/prim/string/foo.null.foo2'}

    async def get_string_with_invalid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get string array value ['foo', 123, 'foo2'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_string_with_invalid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_string_with_invalid_async.metadata = {'url': '/array/prim/string/foo.123.foo2'}

    async def get_uuid_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
        'd1399005-30f7-40d6-8da6-dd7c89ad34db',
        'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_uuid_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_uuid_valid_async.metadata = {'url': '/array/prim/uuid/valid'}

    async def put_uuid_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value  ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652',
        'd1399005-30f7-40d6-8da6-dd7c89ad34db',
        'f42f6aa1-a5bc-4ddf-907e-5f915de43205'].

        :param array_body:
        :type array_body: list[str]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_uuid_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[str]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_uuid_valid_async.metadata = {'url': '/array/prim/uuid/valid'}

    async def get_uuid_invalid_chars_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get uuid array value ['6dcc7237-45fe-45c4-8a6b-3a8a3f625652', 'foo'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[str] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_uuid_invalid_chars_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[str]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_uuid_invalid_chars_async.metadata = {'url': '/array/prim/uuid/invalidchars'}

    async def get_date_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get integer array value ['2000-12-01', '1980-01-02', '1492-10-12'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[date] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[date]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_valid_async.metadata = {'url': '/array/prim/date/valid'}

    async def put_date_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value  ['2000-12-01', '1980-01-02', '1492-10-12'].

        :param array_body:
        :type array_body: list[date]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_date_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[date]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_date_valid_async.metadata = {'url': '/array/prim/date/valid'}

    async def get_date_invalid_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get date array value ['2012-01-01', null, '1776-07-04'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[date] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_invalid_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[date]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_invalid_null_async.metadata = {'url': '/array/prim/date/invalidnull'}

    async def get_date_invalid_chars_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get date array value ['2011-03-22', 'date'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[date] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_invalid_chars_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[date]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_invalid_chars_async.metadata = {'url': '/array/prim/date/invalidchars'}

    async def get_date_time_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get date-time array value ['2000-12-01t00:00:01z',
        '1980-01-02T00:11:35+01:00', '1492-10-12T10:15:01-08:00'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[datetime] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_time_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[iso-8601]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_time_valid_async.metadata = {'url': '/array/prim/date-time/valid'}

    async def put_date_time_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value  ['2000-12-01t00:00:01z', '1980-01-02T00:11:35+01:00',
        '1492-10-12T10:15:01-08:00'].

        :param array_body:
        :type array_body: list[datetime]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_date_time_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[iso-8601]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_date_time_valid_async.metadata = {'url': '/array/prim/date-time/valid'}

    async def get_date_time_invalid_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get date array value ['2000-12-01t00:00:01z', null].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[datetime] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_time_invalid_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[iso-8601]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_time_invalid_null_async.metadata = {'url': '/array/prim/date-time/invalidnull'}

    async def get_date_time_invalid_chars_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get date array value ['2000-12-01t00:00:01z', 'date-time'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[datetime] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_time_invalid_chars_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[iso-8601]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_time_invalid_chars_async.metadata = {'url': '/array/prim/date-time/invalidchars'}

    async def get_date_time_rfc1123_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get date-time array value ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02
        Jan 1980 00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[datetime] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_date_time_rfc1123_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[rfc-1123]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_date_time_rfc1123_valid_async.metadata = {'url': '/array/prim/date-time-rfc1123/valid'}

    async def put_date_time_rfc1123_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value  ['Fri, 01 Dec 2000 00:00:01 GMT', 'Wed, 02 Jan 1980
        00:11:35 GMT', 'Wed, 12 Oct 1492 10:15:01 GMT'].

        :param array_body:
        :type array_body: list[datetime]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_date_time_rfc1123_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[rfc-1123]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_date_time_rfc1123_valid_async.metadata = {'url': '/array/prim/date-time-rfc1123/valid'}

    async def get_duration_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get duration array value ['P123DT22H14M12.011S', 'P5DT1H0M0S'].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[timedelta] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_duration_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[duration]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_duration_valid_async.metadata = {'url': '/array/prim/duration/valid'}

    async def put_duration_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Set array value  ['P123DT22H14M12.011S', 'P5DT1H0M0S'].

        :param array_body:
        :type array_body: list[timedelta]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_duration_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[duration]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_duration_valid_async.metadata = {'url': '/array/prim/duration/valid'}

    async def get_byte_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get byte array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29,
        43)] with each item encoded in base64.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[bytearray] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_byte_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[bytearray]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_byte_valid_async.metadata = {'url': '/array/prim/byte/valid'}

    async def put_byte_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Put the array value [hex(FF FF FF FA), hex(01 02 03), hex (25, 29, 43)]
        with each elementencoded in base 64.

        :param array_body:
        :type array_body: list[bytearray]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_byte_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[bytearray]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_byte_valid_async.metadata = {'url': '/array/prim/byte/valid'}

    async def get_byte_invalid_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get byte array value [hex(AB, AC, AD), null] with the first item base64
        encoded.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[bytearray] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_byte_invalid_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[bytearray]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_byte_invalid_null_async.metadata = {'url': '/array/prim/byte/invalidnull'}

    async def get_base64_url_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get array value ['a string that gets encoded with base64url', 'test
        string' 'Lorem ipsum'] with the items base64url encoded.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[bytes] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_base64_url_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[base64]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_base64_url_async.metadata = {'url': '/array/prim/base64url/valid'}

    async def get_complex_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get array of complex type null value.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~bodyarray.models.Product] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[Product]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_null_async.metadata = {'url': '/array/complex/null'}

    async def get_complex_empty_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get empty array of complex type [].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~bodyarray.models.Product] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_empty_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[Product]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_empty_async.metadata = {'url': '/array/complex/empty'}

    async def get_complex_item_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get array of complex type with null item [{'integer': 1 'string': '2'},
        null, {'integer': 5, 'string': '6'}].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~bodyarray.models.Product] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_item_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[Product]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_item_null_async.metadata = {'url': '/array/complex/itemnull'}

    async def get_complex_item_empty_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get array of complex type with empty item [{'integer': 1 'string':
        '2'}, {}, {'integer': 5, 'string': '6'}].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~bodyarray.models.Product] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_item_empty_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[Product]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_item_empty_async.metadata = {'url': '/array/complex/itemempty'}

    async def get_complex_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get array of complex type with [{'integer': 1 'string': '2'},
        {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~bodyarray.models.Product] or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_complex_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[Product]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_complex_valid_async.metadata = {'url': '/array/complex/valid'}

    async def put_complex_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Put an array of complex type with values [{'integer': 1 'string': '2'},
        {'integer': 3, 'string': '4'}, {'integer': 5, 'string': '6'}].

        :param array_body:
        :type array_body: list[~bodyarray.models.Product]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_complex_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[Product]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_complex_valid_async.metadata = {'url': '/array/complex/valid'}

    async def get_array_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get a null array.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[[str]]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_null_async.metadata = {'url': '/array/array/null'}

    async def get_array_empty_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an empty array [].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_empty_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[[str]]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_empty_async.metadata = {'url': '/array/array/empty'}

    async def get_array_item_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of array of strings [['1', '2', '3'], null, ['7', '8',
        '9']].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_item_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[[str]]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_item_null_async.metadata = {'url': '/array/array/itemnull'}

    async def get_array_item_empty_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of array of strings [['1', '2', '3'], [], ['7', '8',
        '9']].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_item_empty_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[[str]]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_item_empty_async.metadata = {'url': '/array/array/itemempty'}

    async def get_array_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of array of strings [['1', '2', '3'], ['4', '5', '6'],
        ['7', '8', '9']].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[list[str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_array_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[[str]]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_array_valid_async.metadata = {'url': '/array/array/valid'}

    async def put_array_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Put An array of array of strings [['1', '2', '3'], ['4', '5', '6'],
        ['7', '8', '9']].

        :param array_body:
        :type array_body: list[list[str]]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_array_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[[str]]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_array_valid_async.metadata = {'url': '/array/array/valid'}

    async def get_dictionary_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of Dictionaries with value null.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[dict[str, str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[{str}]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_null_async.metadata = {'url': '/array/dictionary/null'}

    async def get_dictionary_empty_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of Dictionaries of type <string, string> with value [].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[dict[str, str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_empty_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[{str}]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_empty_async.metadata = {'url': '/array/dictionary/empty'}

    async def get_dictionary_item_null_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of Dictionaries of type <string, string> with value [{'1':
        'one', '2': 'two', '3': 'three'}, null, {'7': 'seven', '8': 'eight',
        '9': 'nine'}].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[dict[str, str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_item_null_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[{str}]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_item_null_async.metadata = {'url': '/array/dictionary/itemnull'}

    async def get_dictionary_item_empty_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of Dictionaries of type <string, string> with value [{'1':
        'one', '2': 'two', '3': 'three'}, {}, {'7': 'seven', '8': 'eight', '9':
        'nine'}].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[dict[str, str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_item_empty_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[{str}]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_item_empty_async.metadata = {'url': '/array/dictionary/itemempty'}

    async def get_dictionary_valid_async(
            self, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of Dictionaries of type <string, string> with value [{'1':
        'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6':
        'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[dict[str, str]] or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.get_dictionary_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('[{str}]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_dictionary_valid_async.metadata = {'url': '/array/dictionary/valid'}

    async def put_dictionary_valid_async(
            self, array_body, *, custom_headers=None, raw=False, **operation_config):
        """Get an array of Dictionaries of type <string, string> with value [{'1':
        'one', '2': 'two', '3': 'three'}, {'4': 'four', '5': 'five', '6':
        'six'}, {'7': 'seven', '8': 'eight', '9': 'nine'}].

        :param array_body:
        :type array_body: list[dict[str, str]]
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorException<bodyarray.models.ErrorException>`
        """
        # Construct URL
        url = self.put_dictionary_valid_async.metadata['url']

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct body
        body_content = self._serialize.body(array_body, '[{str}]')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = await self._client.async_send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            return client_raw_response
    put_dictionary_valid_async.metadata = {'url': '/array/dictionary/valid'}
