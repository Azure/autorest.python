# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar
import warnings

from azure.core.exceptions import HttpResponseError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class XmlOperations:
    """XmlOperations async operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~xmlservice.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def get_complex_type_ref_no_meta(
        self,
        cls: ClsType["models.RootWithRefAndNoMeta"] = None,
        **kwargs: Any
    ) -> "models.RootWithRefAndNoMeta":
        """Get a complex type that has a ref to a complex type with no XML node.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: RootWithRefAndNoMeta or the result of cls(response)
        :rtype: ~xmlservice.models.RootWithRefAndNoMeta
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_complex_type_ref_no_meta.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('RootWithRefAndNoMeta', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_complex_type_ref_no_meta.metadata = {'url': '/xml/complex-type-ref-no-meta'}

    @distributed_trace_async
    async def put_complex_type_ref_no_meta(
        self,
        model: "models.RootWithRefAndNoMeta",
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts a complex type that has a ref to a complex type with no XML node.

        :param model:
        :type model: ~xmlservice.models.RootWithRefAndNoMeta
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_complex_type_ref_no_meta.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        body_content = self._serialize.body(model, 'RootWithRefAndNoMeta', is_xml=True)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_complex_type_ref_no_meta.metadata = {'url': '/xml/complex-type-ref-no-meta'}

    @distributed_trace_async
    async def get_complex_type_ref_with_meta(
        self,
        cls: ClsType["models.RootWithRefAndMeta"] = None,
        **kwargs: Any
    ) -> "models.RootWithRefAndMeta":
        """Get a complex type that has a ref to a complex type with XML node.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: RootWithRefAndMeta or the result of cls(response)
        :rtype: ~xmlservice.models.RootWithRefAndMeta
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_complex_type_ref_with_meta.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('RootWithRefAndMeta', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_complex_type_ref_with_meta.metadata = {'url': '/xml/complex-type-ref-with-meta'}

    @distributed_trace_async
    async def put_complex_type_ref_with_meta(
        self,
        model: "models.RootWithRefAndMeta",
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts a complex type that has a ref to a complex type with XML node.

        :param model:
        :type model: ~xmlservice.models.RootWithRefAndMeta
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_complex_type_ref_with_meta.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        body_content = self._serialize.body(model, 'RootWithRefAndMeta', is_xml=True)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_complex_type_ref_with_meta.metadata = {'url': '/xml/complex-type-ref-with-meta'}

    @distributed_trace_async
    async def get_simple(
        self,
        cls: ClsType["models.Slideshow"] = None,
        **kwargs: Any
    ) -> "models.Slideshow":
        """Get a simple XML document.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: Slideshow or the result of cls(response)
        :rtype: ~xmlservice.models.Slideshow
        :raises: ~xmlservice.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_simple.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        deserialized = self._deserialize('Slideshow', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_simple.metadata = {'url': '/xml/simple'}

    @distributed_trace_async
    async def put_simple(
        self,
        slideshow: "models.Slideshow",
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Put a simple XML document.

        :param slideshow:
        :type slideshow: ~xmlservice.models.Slideshow
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~xmlservice.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_simple.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        body_content = self._serialize.body(slideshow, 'Slideshow', is_xml=True)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        if cls:
          return cls(pipeline_response, None, {})

    put_simple.metadata = {'url': '/xml/simple'}

    @distributed_trace_async
    async def get_wrapped_lists(
        self,
        cls: ClsType["models.AppleBarrel"] = None,
        **kwargs: Any
    ) -> "models.AppleBarrel":
        """Get an XML document with multiple wrapped lists.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: AppleBarrel or the result of cls(response)
        :rtype: ~xmlservice.models.AppleBarrel
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_wrapped_lists.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AppleBarrel', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_wrapped_lists.metadata = {'url': '/xml/wrapped-lists'}

    @distributed_trace_async
    async def put_wrapped_lists(
        self,
        wrapped_lists: "models.AppleBarrel",
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Put an XML document with multiple wrapped lists.

        :param wrapped_lists:
        :type wrapped_lists: ~xmlservice.models.AppleBarrel
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~xmlservice.models.ErrorException:
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_wrapped_lists.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        body_content = self._serialize.body(wrapped_lists, 'AppleBarrel', is_xml=True)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.ErrorException.from_response(response, self._deserialize)

        if cls:
          return cls(pipeline_response, None, {})

    put_wrapped_lists.metadata = {'url': '/xml/wrapped-lists'}

    @distributed_trace_async
    async def get_headers(
        self,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Get strongly-typed response headers.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_headers.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers['Custom-Header']=self._deserialize('str', response.headers.get('Custom-Header'))

        if cls:
          return cls(pipeline_response, None, response_headers)

    get_headers.metadata = {'url': '/xml/headers'}

    @distributed_trace_async
    async def get_empty_list(
        self,
        cls: ClsType["models.Slideshow"] = None,
        **kwargs: Any
    ) -> "models.Slideshow":
        """Get an empty list.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: Slideshow or the result of cls(response)
        :rtype: ~xmlservice.models.Slideshow
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_empty_list.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('Slideshow', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_empty_list.metadata = {'url': '/xml/empty-list'}

    @distributed_trace_async
    async def put_empty_list(
        self,
        slideshow: "models.Slideshow",
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts an empty list.

        :param slideshow:
        :type slideshow: ~xmlservice.models.Slideshow
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_empty_list.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        body_content = self._serialize.body(slideshow, 'Slideshow', is_xml=True)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_empty_list.metadata = {'url': '/xml/empty-list'}

    @distributed_trace_async
    async def get_empty_wrapped_lists(
        self,
        cls: ClsType["models.AppleBarrel"] = None,
        **kwargs: Any
    ) -> "models.AppleBarrel":
        """Gets some empty wrapped lists.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: AppleBarrel or the result of cls(response)
        :rtype: ~xmlservice.models.AppleBarrel
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_empty_wrapped_lists.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AppleBarrel', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_empty_wrapped_lists.metadata = {'url': '/xml/empty-wrapped-lists'}

    @distributed_trace_async
    async def put_empty_wrapped_lists(
        self,
        apple_barrel: "models.AppleBarrel",
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts some empty wrapped lists.

        :param apple_barrel:
        :type apple_barrel: ~xmlservice.models.AppleBarrel
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_empty_wrapped_lists.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        body_content = self._serialize.body(apple_barrel, 'AppleBarrel', is_xml=True)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_empty_wrapped_lists.metadata = {'url': '/xml/empty-wrapped-lists'}

    @distributed_trace_async
    async def get_root_list(
        self,
        cls: ClsType[List["Banana"]] = None,
        **kwargs: Any
    ) -> List["Banana"]:
        """Gets a list as the root element.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: list or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_root_list.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[Banana]', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_root_list.metadata = {'url': '/xml/root-list'}

    @distributed_trace_async
    async def put_root_list(
        self,
        bananas: List["Banana"],
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts a list as the root element.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_root_list.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        serialization_ctxt = {'xml': {'name': 'bananas', 'wrapped': True, 'itemsName': 'banana'}}
        body_content = self._serialize.body(bananas, '[Banana]', is_xml=True, serialization_ctxt=serialization_ctxt)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_root_list.metadata = {'url': '/xml/root-list'}

    @distributed_trace_async
    async def get_root_list_single_item(
        self,
        cls: ClsType[List["Banana"]] = None,
        **kwargs: Any
    ) -> List["Banana"]:
        """Gets a list with a single item.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: list or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_root_list_single_item.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[Banana]', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_root_list_single_item.metadata = {'url': '/xml/root-list-single-item'}

    @distributed_trace_async
    async def put_root_list_single_item(
        self,
        bananas: List["Banana"],
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts a list with a single item.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_root_list_single_item.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        serialization_ctxt = {'xml': {'name': 'bananas', 'wrapped': True, 'itemsName': 'banana'}}
        body_content = self._serialize.body(bananas, '[Banana]', is_xml=True, serialization_ctxt=serialization_ctxt)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_root_list_single_item.metadata = {'url': '/xml/root-list-single-item'}

    @distributed_trace_async
    async def get_empty_root_list(
        self,
        cls: ClsType[List["Banana"]] = None,
        **kwargs: Any
    ) -> List["Banana"]:
        """Gets an empty list as the root element.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: list or the result of cls(response)
        :rtype: list[~xmlservice.models.Banana]
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_empty_root_list.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[Banana]', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_empty_root_list.metadata = {'url': '/xml/empty-root-list'}

    @distributed_trace_async
    async def put_empty_root_list(
        self,
        bananas: List["Banana"],
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts an empty list as the root element.

        :param bananas:
        :type bananas: list[~xmlservice.models.Banana]
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_empty_root_list.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        serialization_ctxt = {'xml': {'name': 'bananas', 'wrapped': True, 'itemsName': 'banana'}}
        body_content = self._serialize.body(bananas, '[Banana]', is_xml=True, serialization_ctxt=serialization_ctxt)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_empty_root_list.metadata = {'url': '/xml/empty-root-list'}

    @distributed_trace_async
    async def get_empty_child_element(
        self,
        cls: ClsType["models.Banana"] = None,
        **kwargs: Any
    ) -> "models.Banana":
        """Gets an XML document with an empty child element.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: Banana or the result of cls(response)
        :rtype: ~xmlservice.models.Banana
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.get_empty_child_element.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('Banana', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_empty_child_element.metadata = {'url': '/xml/empty-child-element'}

    @distributed_trace_async
    async def put_empty_child_element(
        self,
        banana: "models.Banana",
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts a value with an empty child element.

        :param banana:
        :type banana: ~xmlservice.models.Banana
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.put_empty_child_element.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        body_content = self._serialize.body(banana, 'Banana', is_xml=True)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_empty_child_element.metadata = {'url': '/xml/empty-child-element'}

    @distributed_trace_async
    async def list_containers(
        self,
        cls: ClsType["models.ListContainersResponse"] = None,
        **kwargs: Any
    ) -> "models.ListContainersResponse":
        """Lists containers in a storage account.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: ListContainersResponse or the result of cls(response)
        :rtype: ~xmlservice.models.ListContainersResponse
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})
        comp = "list"

        # Construct URL
        url = self.list_containers.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        query_parameters['comp'] = self._serialize.query("comp", comp, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ListContainersResponse', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    list_containers.metadata = {'url': '/xml/'}

    @distributed_trace_async
    async def get_service_properties(
        self,
        cls: ClsType["models.StorageServiceProperties"] = None,
        **kwargs: Any
    ) -> "models.StorageServiceProperties":
        """Gets storage service properties.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: StorageServiceProperties or the result of cls(response)
        :rtype: ~xmlservice.models.StorageServiceProperties
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})
        comp = "properties"
        restype = "service"

        # Construct URL
        url = self.get_service_properties.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        query_parameters['comp'] = self._serialize.query("comp", comp, 'str')
        query_parameters['restype'] = self._serialize.query("restype", restype, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('StorageServiceProperties', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_service_properties.metadata = {'url': '/xml/'}

    @distributed_trace_async
    async def put_service_properties(
        self,
        properties: "models.StorageServiceProperties",
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts storage service properties.

        :param properties:
        :type properties: ~xmlservice.models.StorageServiceProperties
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})
        comp = "properties"
        restype = "service"

        # Construct URL
        url = self.put_service_properties.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        query_parameters['comp'] = self._serialize.query("comp", comp, 'str')
        query_parameters['restype'] = self._serialize.query("restype", restype, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        body_content = self._serialize.body(properties, 'StorageServiceProperties', is_xml=True)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_service_properties.metadata = {'url': '/xml/'}

    @distributed_trace_async
    async def get_acls(
        self,
        cls: ClsType[List["SignedIdentifier"]] = None,
        **kwargs: Any
    ) -> List["SignedIdentifier"]:
        """Gets storage ACLs for a container.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: list or the result of cls(response)
        :rtype: list[~xmlservice.models.SignedIdentifier]
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})
        comp = "acl"
        restype = "container"

        # Construct URL
        url = self.get_acls.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        query_parameters['comp'] = self._serialize.query("comp", comp, 'str')
        query_parameters['restype'] = self._serialize.query("restype", restype, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[SignedIdentifier]', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_acls.metadata = {'url': '/xml/mycontainer'}

    @distributed_trace_async
    async def put_acls(
        self,
        properties: List["SignedIdentifier"],
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """Puts storage ACLs for a container.

        :param properties:
        :type properties: list[~xmlservice.models.SignedIdentifier]
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})
        comp = "acl"
        restype = "container"

        # Construct URL
        url = self.put_acls.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        query_parameters['comp'] = self._serialize.query("comp", comp, 'str')
        query_parameters['restype'] = self._serialize.query("restype", restype, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/xml'

        # Construct body
        serialization_ctxt = {'xml': {'name': 'SignedIdentifiers', 'wrapped': True, 'itemsName': 'SignedIdentifier'}}
        body_content = self._serialize.body(properties, '[SignedIdentifier]', is_xml=True, serialization_ctxt=serialization_ctxt)

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    put_acls.metadata = {'url': '/xml/mycontainer'}

    @distributed_trace_async
    async def list_blobs(
        self,
        cls: ClsType["models.ListBlobsResponse"] = None,
        **kwargs: Any
    ) -> "models.ListBlobsResponse":
        """Lists blobs in a storage container.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: ListBlobsResponse or the result of cls(response)
        :rtype: ~xmlservice.models.ListBlobsResponse
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})
        comp = "list"
        restype = "container"

        # Construct URL
        url = self.list_blobs.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}
        query_parameters['comp'] = self._serialize.query("comp", comp, 'str')
        query_parameters['restype'] = self._serialize.query("restype", restype, 'str')

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/xml'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ListBlobsResponse', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    list_blobs.metadata = {'url': '/xml/mycontainer'}

    @distributed_trace_async
    async def json_input(
        self,
        id: Optional[int] = None,
        *,
        cls: ClsType[None] = None,
        **kwargs: Any
    ) -> None:
        """A Swagger with XML that has one operation that takes JSON as input. You need to send the ID number 42.

        :param id:
        :type id: int
        :param callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        properties = models.JSONInput(id=id)

        # Construct URL
        url = self.json_input.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Content-Type'] = 'application/json'

        # Construct body
        body_content = self._serialize.body(properties, 'JSONInput')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
          return cls(pipeline_response, None, {})

    json_input.metadata = {'url': '/xml/jsoninput'}

    @distributed_trace_async
    async def json_output(
        self,
        cls: ClsType["models.JSONOutput"] = None,
        **kwargs: Any
    ) -> "models.JSONOutput":
        """A Swagger with XML that has one operation that returns JSON. ID number 42.

        :param callable cls: A custom type or function that will be passed the direct response
        :return: JSONOutput or the result of cls(response)
        :rtype: ~xmlservice.models.JSONOutput
        :raises: ~azure.core.HttpResponseError
        """
        error_map = kwargs.pop('error_map', {})

        # Construct URL
        url = self.json_output.metadata['url']

        # Construct parameters
        query_parameters: Dict[str, Any] = {}

        # Construct headers
        header_parameters: Dict[str, Any] = {}
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('JSONOutput', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    json_output.metadata = {'url': '/xml/jsonoutput'}
