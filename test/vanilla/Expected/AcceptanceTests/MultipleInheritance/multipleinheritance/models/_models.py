# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Feline(msrest.serialization.Model):
    """Feline.

    :param meows:
    :type meows: bool
    :param hisses:
    :type hisses: bool
    """

    _attribute_map = {
        "meows": {"key": "meows", "type": "bool"},
        "hisses": {"key": "hisses", "type": "bool"},
    }

    def __init__(self, **kwargs):
        super(Feline, self).__init__(**kwargs)
        self.meows = kwargs.get("meows", None)
        self.hisses = kwargs.get("hisses", None)


class Pet(msrest.serialization.Model):
    """Pet.

    All required parameters must be populated in order to send to Azure.

    :param name: Required.
    :type name: str
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Pet, self).__init__(**kwargs)
        self.name = kwargs["name"]


class Cat(Pet, Feline):
    """Cat.

    All required parameters must be populated in order to send to Azure.

    :param meows:
    :type meows: bool
    :param hisses:
    :type hisses: bool
    :param name: Required.
    :type name: str
    :param likes_milk:
    :type likes_milk: bool
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "meows": {"key": "meows", "type": "bool"},
        "hisses": {"key": "hisses", "type": "bool"},
        "name": {"key": "name", "type": "str"},
        "likes_milk": {"key": "likesMilk", "type": "bool"},
    }

    def __init__(self, **kwargs):
        super(Cat, self).__init__(**kwargs)
        self.meows = kwargs.get("meows", None)
        self.hisses = kwargs.get("hisses", None)
        self.likes_milk = kwargs.get("likes_milk", None)
        self.name = kwargs["name"]
        self.likes_milk = kwargs.get("likes_milk", None)


class Error(msrest.serialization.Model):
    """Error.

    :param status:
    :type status: int
    :param message:
    :type message: str
    """

    _attribute_map = {
        "status": {"key": "status", "type": "int"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs):
        super(Error, self).__init__(**kwargs)
        self.status = kwargs.get("status", None)
        self.message = kwargs.get("message", None)


class Horse(Pet):
    """Horse.

    All required parameters must be populated in order to send to Azure.

    :param name: Required.
    :type name: str
    :param is_a_show_horse:
    :type is_a_show_horse: bool
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_a_show_horse": {"key": "isAShowHorse", "type": "bool"},
    }

    def __init__(self, **kwargs):
        super(Horse, self).__init__(**kwargs)
        self.is_a_show_horse = kwargs.get("is_a_show_horse", None)


class Kitten(Cat):
    """Kitten.

    All required parameters must be populated in order to send to Azure.

    :param meows:
    :type meows: bool
    :param hisses:
    :type hisses: bool
    :param name: Required.
    :type name: str
    :param likes_milk:
    :type likes_milk: bool
    :param eats_mice_yet:
    :type eats_mice_yet: bool
    """

    _validation = {
        "name": {"required": True},
    }

    _attribute_map = {
        "meows": {"key": "meows", "type": "bool"},
        "hisses": {"key": "hisses", "type": "bool"},
        "name": {"key": "name", "type": "str"},
        "likes_milk": {"key": "likesMilk", "type": "bool"},
        "eats_mice_yet": {"key": "eatsMiceYet", "type": "bool"},
    }

    def __init__(self, **kwargs):
        super(Kitten, self).__init__(**kwargs)
        self.eats_mice_yet = kwargs.get("eats_mice_yet", None)
