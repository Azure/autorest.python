# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Optional

from azure.core.pipeline.transport import HttpRequest


def _test_one_request(
    self,
    id: int,
    message: Optional[str] = None,
    **kwargs
) -> HttpRequest:
    api_version = "1.0.0"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/multiapi/testOneEndpoint')

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters['id'] = self._serialize.query("id", id, 'int')
    if message is not None:
        query_parameters['message'] = self._serialize.query("message", message, 'str')
    query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

    return self._client.put(url, query_parameters, header_parameters)

def _test_lro_initial_request(
    self,
    body: Optional["_models.Product"] = None,
    **kwargs
) -> HttpRequest:
    content_type = kwargs.pop("content_type", "application/json")
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/multiapi/lro')

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
    header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

    body_content_kwargs = {}  # type: Dict[str, Any]
    body_content_kwargs['content'] = body
    return self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

def _test_lro_and_paging_initial_request(
    self,
    client_request_id: Optional[str] = None,
    maxresults: Optional[int] = None,
    timeout: Optional[int] = 30,
    **kwargs
) -> HttpRequest:
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/multiapi/lroAndPaging')

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    if client_request_id is not None:
        header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
    if maxresults is not None:
        header_parameters['maxresults'] = self._serialize.header("maxresults", maxresults, 'int')
    if timeout is not None:
        header_parameters['timeout'] = self._serialize.header("timeout", timeout, 'int')
    header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

    return self._client.post(url, query_parameters, header_parameters)

def _test_different_calls_request(
    self,
    greeting_in_english: str,
    **kwargs
) -> HttpRequest:
    api_version = "1.0.0"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/multiapi/testDifferentCalls')

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters['greetingInEnglish'] = self._serialize.header("greeting_in_english", greeting_in_english, 'str')
    header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

    return self._client.get(url, query_parameters, header_parameters)

def _test_two_request(
    self,
    **kwargs
) -> HttpRequest:
    api_version = "1.0.0"
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/multiapi/one/testTwoEndpoint')

    # Construct parameters
    query_parameters = {}  # type: Dict[str, Any]
    query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = {}  # type: Dict[str, Any]
    header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

    return self._client.get(url, query_parameters, header_parameters)
