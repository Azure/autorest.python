# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._serialization import Serializer
from .._vendor import AutoRestResourceFlatteningTestServiceMixinABC, _convert_request, _format_url_section

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_put_array_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/array")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_get_array_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/array")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_put_wrapped_array_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/wrappedarray")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_get_wrapped_array_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/wrappedarray")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_put_dictionary_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/dictionary")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_get_dictionary_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/dictionary")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_put_resource_collection_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/resourcecollection")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_get_resource_collection_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/resourcecollection")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_put_simple_product_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/customFlattening")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_post_flattened_simple_product_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/customFlattening")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_put_simple_product_with_grouping_request(name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = kwargs.pop("template_url", "/model-flatten/customFlattening/parametergrouping/{name}/")
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str"),
    }

    _url: str = _format_url_section(_url, **path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


class AutoRestResourceFlatteningTestServiceOperationsMixin(AutoRestResourceFlatteningTestServiceMixinABC):
    @overload
    def put_array(  # pylint: disable=inconsistent-return-statements
        self,
        resource_array: Optional[List[_models.Resource]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Put External Resource as an Array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Default value is None.
        :type resource_array: list[~modelflattening.models.Resource]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def put_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put External Resource as an Array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Default value is None.
        :type resource_array: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def put_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[Union[List[_models.Resource], IO]] = None, **kwargs: Any
    ) -> None:
        """Put External Resource as an Array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Is either a [Resource] type or a
         IO type. Default value is None.
        :type resource_array: list[~modelflattening.models.Resource] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource_array, (IO, bytes)):
            _content = resource_array
        else:
            if resource_array is not None:
                _json = self._serialize.body(resource_array, "[Resource]")
            else:
                _json = None

        request = build_put_array_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_array.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_array.metadata = {"url": "/model-flatten/array"}

    @distributed_trace
    def get_array(self, **kwargs: Any) -> List[_models.FlattenedProduct]:
        """Get External Resource as an Array.

        .. seealso::
           - http://tempuri.org

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of FlattenedProduct or the result of cls(response)
        :rtype: list[~modelflattening.models.FlattenedProduct]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.FlattenedProduct]] = kwargs.pop("cls", None)

        request = build_get_array_request(
            template_url=self.get_array.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[FlattenedProduct]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_array.metadata = {"url": "/model-flatten/array"}

    @overload
    def put_wrapped_array(  # pylint: disable=inconsistent-return-statements
        self,
        resource_array: Optional[List[_models.WrappedProduct]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """No need to have a route in Express server for this operation. Used to verify the type flattened
        is not removed if it's referenced in an array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Default value is None.
        :type resource_array: list[~modelflattening.models.WrappedProduct]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def put_wrapped_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """No need to have a route in Express server for this operation. Used to verify the type flattened
        is not removed if it's referenced in an array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Default value is None.
        :type resource_array: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def put_wrapped_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[Union[List[_models.WrappedProduct], IO]] = None, **kwargs: Any
    ) -> None:
        """No need to have a route in Express server for this operation. Used to verify the type flattened
        is not removed if it's referenced in an array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Is either a [WrappedProduct] type
         or a IO type. Default value is None.
        :type resource_array: list[~modelflattening.models.WrappedProduct] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource_array, (IO, bytes)):
            _content = resource_array
        else:
            if resource_array is not None:
                _json = self._serialize.body(resource_array, "[WrappedProduct]")
            else:
                _json = None

        request = build_put_wrapped_array_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_wrapped_array.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_wrapped_array.metadata = {"url": "/model-flatten/wrappedarray"}

    @distributed_trace
    def get_wrapped_array(self, **kwargs: Any) -> List[_models.ProductWrapper]:
        """No need to have a route in Express server for this operation. Used to verify the type flattened
        is not removed if it's referenced in an array.

        .. seealso::
           - http://tempuri.org

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of ProductWrapper or the result of cls(response)
        :rtype: list[~modelflattening.models.ProductWrapper]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.ProductWrapper]] = kwargs.pop("cls", None)

        request = build_get_wrapped_array_request(
            template_url=self.get_wrapped_array.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("[ProductWrapper]", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_wrapped_array.metadata = {"url": "/model-flatten/wrappedarray"}

    @overload
    def put_dictionary(  # pylint: disable=inconsistent-return-statements
        self,
        resource_dictionary: Optional[Dict[str, _models.FlattenedProduct]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Put External Resource as a Dictionary.

        .. seealso::
           - http://tempuri.org

        :param resource_dictionary: External Resource as a Dictionary to put. Default value is None.
        :type resource_dictionary: dict[str, ~modelflattening.models.FlattenedProduct]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def put_dictionary(  # pylint: disable=inconsistent-return-statements
        self, resource_dictionary: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put External Resource as a Dictionary.

        .. seealso::
           - http://tempuri.org

        :param resource_dictionary: External Resource as a Dictionary to put. Default value is None.
        :type resource_dictionary: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def put_dictionary(  # pylint: disable=inconsistent-return-statements
        self, resource_dictionary: Optional[Union[Dict[str, _models.FlattenedProduct], IO]] = None, **kwargs: Any
    ) -> None:
        """Put External Resource as a Dictionary.

        .. seealso::
           - http://tempuri.org

        :param resource_dictionary: External Resource as a Dictionary to put. Is either a {str:
         FlattenedProduct} type or a IO type. Default value is None.
        :type resource_dictionary: dict[str, ~modelflattening.models.FlattenedProduct] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource_dictionary, (IO, bytes)):
            _content = resource_dictionary
        else:
            if resource_dictionary is not None:
                _json = self._serialize.body(resource_dictionary, "{FlattenedProduct}")
            else:
                _json = None

        request = build_put_dictionary_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_dictionary.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_dictionary.metadata = {"url": "/model-flatten/dictionary"}

    @distributed_trace
    def get_dictionary(self, **kwargs: Any) -> Dict[str, _models.FlattenedProduct]:
        """Get External Resource as a Dictionary.

        .. seealso::
           - http://tempuri.org

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: dict mapping str to FlattenedProduct or the result of cls(response)
        :rtype: dict[str, ~modelflattening.models.FlattenedProduct]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Dict[str, _models.FlattenedProduct]] = kwargs.pop("cls", None)

        request = build_get_dictionary_request(
            template_url=self.get_dictionary.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("{FlattenedProduct}", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_dictionary.metadata = {"url": "/model-flatten/dictionary"}

    @overload
    def put_resource_collection(  # pylint: disable=inconsistent-return-statements
        self,
        resource_complex_object: Optional[_models.ResourceCollection] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Put External Resource as a ResourceCollection.

        .. seealso::
           - http://tempuri.org

        :param resource_complex_object: External Resource as a ResourceCollection to put. Default value
         is None.
        :type resource_complex_object: ~modelflattening.models.ResourceCollection
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def put_resource_collection(  # pylint: disable=inconsistent-return-statements
        self, resource_complex_object: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put External Resource as a ResourceCollection.

        .. seealso::
           - http://tempuri.org

        :param resource_complex_object: External Resource as a ResourceCollection to put. Default value
         is None.
        :type resource_complex_object: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def put_resource_collection(  # pylint: disable=inconsistent-return-statements
        self, resource_complex_object: Optional[Union[_models.ResourceCollection, IO]] = None, **kwargs: Any
    ) -> None:
        """Put External Resource as a ResourceCollection.

        .. seealso::
           - http://tempuri.org

        :param resource_complex_object: External Resource as a ResourceCollection to put. Is either a
         ResourceCollection type or a IO type. Default value is None.
        :type resource_complex_object: ~modelflattening.models.ResourceCollection or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource_complex_object, (IO, bytes)):
            _content = resource_complex_object
        else:
            if resource_complex_object is not None:
                _json = self._serialize.body(resource_complex_object, "ResourceCollection")
            else:
                _json = None

        request = build_put_resource_collection_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_resource_collection.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    put_resource_collection.metadata = {"url": "/model-flatten/resourcecollection"}

    @distributed_trace
    def get_resource_collection(self, **kwargs: Any) -> _models.ResourceCollection:
        """Get External Resource as a ResourceCollection.

        .. seealso::
           - http://tempuri.org

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ResourceCollection or the result of cls(response)
        :rtype: ~modelflattening.models.ResourceCollection
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ResourceCollection] = kwargs.pop("cls", None)

        request = build_get_resource_collection_request(
            template_url=self.get_resource_collection.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("ResourceCollection", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_resource_collection.metadata = {"url": "/model-flatten/resourcecollection"}

    @overload
    def put_simple_product(
        self,
        simple_body_product: Optional[_models.SimpleProduct] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimpleProduct:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to put. Default value is None.
        :type simple_body_product: ~modelflattening.models.SimpleProduct
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SimpleProduct or the result of cls(response)
        :rtype: ~modelflattening.models.SimpleProduct
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def put_simple_product(
        self, simple_body_product: Optional[IO] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimpleProduct:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to put. Default value is None.
        :type simple_body_product: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SimpleProduct or the result of cls(response)
        :rtype: ~modelflattening.models.SimpleProduct
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def put_simple_product(
        self, simple_body_product: Optional[Union[_models.SimpleProduct, IO]] = None, **kwargs: Any
    ) -> _models.SimpleProduct:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to put. Is either a SimpleProduct type or a IO
         type. Default value is None.
        :type simple_body_product: ~modelflattening.models.SimpleProduct or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SimpleProduct or the result of cls(response)
        :rtype: ~modelflattening.models.SimpleProduct
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SimpleProduct] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(simple_body_product, (IO, bytes)):
            _content = simple_body_product
        else:
            if simple_body_product is not None:
                _json = self._serialize.body(simple_body_product, "SimpleProduct")
            else:
                _json = None

        request = build_put_simple_product_request(
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.put_simple_product.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("SimpleProduct", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    put_simple_product.metadata = {"url": "/model-flatten/customFlattening"}

    @distributed_trace
    def post_flattened_simple_product(
        self,
        product_id: str,
        description: Optional[str] = None,
        max_product_display_name: Optional[str] = None,
        capacity: Literal["Large"] = "Large",
        generic_value: Optional[str] = None,
        odata_value: Optional[str] = None,
        **kwargs: Any
    ) -> _models.SimpleProduct:
        """Put Flattened Simple Product with client flattening true on the parameter.

        .. seealso::
           - http://tempuri.org

        :param product_id: Unique identifier representing a specific product for a given latitude &
         longitude. For example, uberX in San Francisco will have a different product_id than uberX in
         Los Angeles. Required.
        :type product_id: str
        :param description: Description of product. Default value is None.
        :type description: str
        :param max_product_display_name: Display name of product. Default value is None.
        :type max_product_display_name: str
        :param capacity: Capacity of product. For example, 4 people. Known values are "Large" and None.
         Default value is "Large".
        :type capacity: str
        :param generic_value: Generic URL value. Default value is None.
        :type generic_value: str
        :param odata_value: URL value. Default value is None.
        :type odata_value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SimpleProduct or the result of cls(response)
        :rtype: ~modelflattening.models.SimpleProduct
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[_models.SimpleProduct] = kwargs.pop("cls", None)

        _simple_body_product = _models.SimpleProduct(
            capacity=capacity,
            description=description,
            generic_value=generic_value,
            max_product_display_name=max_product_display_name,
            odata_value=odata_value,
            product_id=product_id,
        )
        if _simple_body_product is not None:
            _json = self._serialize.body(_simple_body_product, "SimpleProduct")
        else:
            _json = None

        request = build_post_flattened_simple_product_request(
            content_type=content_type,
            json=_json,
            template_url=self.post_flattened_simple_product.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("SimpleProduct", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    post_flattened_simple_product.metadata = {"url": "/model-flatten/customFlattening"}

    @distributed_trace
    def put_simple_product_with_grouping(
        self, flatten_parameter_group: _models.FlattenParameterGroup, **kwargs: Any
    ) -> _models.SimpleProduct:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param flatten_parameter_group: Parameter group. Required.
        :type flatten_parameter_group: ~modelflattening.models.FlattenParameterGroup
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SimpleProduct or the result of cls(response)
        :rtype: ~modelflattening.models.SimpleProduct
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[_models.SimpleProduct] = kwargs.pop("cls", None)

        _name = None
        _product_id = None
        _description = None
        _max_product_display_name = None
        _capacity = None
        _generic_value = None
        _odata_value = None
        _simple_body_product = None
        if flatten_parameter_group is not None:
            _capacity = flatten_parameter_group.capacity
            _description = flatten_parameter_group.description
            _generic_value = flatten_parameter_group.generic_value
            _max_product_display_name = flatten_parameter_group.max_product_display_name
            _name = flatten_parameter_group.name
            _odata_value = flatten_parameter_group.odata_value
            _product_id = flatten_parameter_group.product_id
            _simple_body_product = flatten_parameter_group.simple_body_product
        _simple_body_product = _models.SimpleProduct(
            capacity=_capacity,
            description=_description,
            generic_value=_generic_value,
            max_product_display_name=_max_product_display_name,
            odata_value=_odata_value,
            product_id=_product_id,
        )
        if _simple_body_product is not None:
            _json = self._serialize.body(_simple_body_product, "SimpleProduct")
        else:
            _json = None

        request = build_put_simple_product_with_grouping_request(
            name=_name,
            content_type=content_type,
            json=_json,
            template_url=self.put_simple_product_with_grouping.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.Error, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("SimpleProduct", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    put_simple_product_with_grouping.metadata = {"url": "/model-flatten/customFlattening/parametergrouping/{name}/"}
