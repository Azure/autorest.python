# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, List, Optional, Type, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ..._operations._operations import (
    build_auto_rest_resource_flattening_test_service_get_array_request,
    build_auto_rest_resource_flattening_test_service_get_dictionary_request,
    build_auto_rest_resource_flattening_test_service_get_resource_collection_request,
    build_auto_rest_resource_flattening_test_service_get_wrapped_array_request,
    build_auto_rest_resource_flattening_test_service_post_flattened_simple_product_request,
    build_auto_rest_resource_flattening_test_service_put_array_request,
    build_auto_rest_resource_flattening_test_service_put_dictionary_request,
    build_auto_rest_resource_flattening_test_service_put_resource_collection_request,
    build_auto_rest_resource_flattening_test_service_put_simple_product_request,
    build_auto_rest_resource_flattening_test_service_put_simple_product_with_grouping_request,
    build_auto_rest_resource_flattening_test_service_put_wrapped_array_request,
)
from .._vendor import AutoRestResourceFlatteningTestServiceMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class AutoRestResourceFlatteningTestServiceOperationsMixin(  # pylint: disable=name-too-long
    AutoRestResourceFlatteningTestServiceMixinABC
):

    @overload
    async def put_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[List[JSON]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put External Resource as an Array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Default value is None.
        :type resource_array: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource_array = [
                    {
                        "id": "str",
                        "location": "str",
                        "name": "str",
                        "tags": {
                            "str": "str"
                        },
                        "type": "str"
                    }
                ]
        """

    @overload
    async def put_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put External Resource as an Array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Default value is None.
        :type resource_array: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[Union[List[JSON], IO[bytes]]] = None, **kwargs: Any
    ) -> None:
        """Put External Resource as an Array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Is either a [JSON] type or a
         IO[bytes] type. Default value is None.
        :type resource_array: list[JSON] or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource_array, (IOBase, bytes)):
            _content = resource_array
        else:
            if resource_array is not None:
                _json = resource_array
            else:
                _json = None

        _request = build_auto_rest_resource_flattening_test_service_put_array_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def get_array(self, **kwargs: Any) -> List[JSON]:
        """Get External Resource as an Array.

        .. seealso::
           - http://tempuri.org

        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "id": "str",
                        "location": "str",
                        "name": "str",
                        "properties": {
                            "p.name": "str",
                            "provisioningState": "str",
                            "provisioningStateValues": "str",
                            "type": "str"
                        },
                        "tags": {
                            "str": "str"
                        },
                        "type": "str"
                    }
                ]
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_auto_rest_resource_flattening_test_service_get_array_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @overload
    async def put_wrapped_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[List[JSON]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """No need to have a route in Express server for this operation. Used to verify the type flattened
        is not removed if it's referenced in an array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Default value is None.
        :type resource_array: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource_array = [
                    {
                        "value": "str"
                    }
                ]
        """

    @overload
    async def put_wrapped_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """No need to have a route in Express server for this operation. Used to verify the type flattened
        is not removed if it's referenced in an array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Default value is None.
        :type resource_array: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_wrapped_array(  # pylint: disable=inconsistent-return-statements
        self, resource_array: Optional[Union[List[JSON], IO[bytes]]] = None, **kwargs: Any
    ) -> None:
        """No need to have a route in Express server for this operation. Used to verify the type flattened
        is not removed if it's referenced in an array.

        .. seealso::
           - http://tempuri.org

        :param resource_array: External Resource as an Array to put. Is either a [JSON] type or a
         IO[bytes] type. Default value is None.
        :type resource_array: list[JSON] or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource_array, (IOBase, bytes)):
            _content = resource_array
        else:
            if resource_array is not None:
                _json = resource_array
            else:
                _json = None

        _request = build_auto_rest_resource_flattening_test_service_put_wrapped_array_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def get_wrapped_array(self, **kwargs: Any) -> List[JSON]:
        """No need to have a route in Express server for this operation. Used to verify the type flattened
        is not removed if it's referenced in an array.

        .. seealso::
           - http://tempuri.org

        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "property": {
                            "value": "str"
                        }
                    }
                ]
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_auto_rest_resource_flattening_test_service_get_wrapped_array_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @overload
    async def put_dictionary(  # pylint: disable=inconsistent-return-statements
        self,
        resource_dictionary: Optional[Dict[str, JSON]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Put External Resource as a Dictionary.

        .. seealso::
           - http://tempuri.org

        :param resource_dictionary: External Resource as a Dictionary to put. Default value is None.
        :type resource_dictionary: dict[str, JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource_dictionary = {
                    "str": {
                        "id": "str",
                        "location": "str",
                        "name": "str",
                        "properties": {
                            "p.name": "str",
                            "provisioningState": "str",
                            "provisioningStateValues": "str",
                            "type": "str"
                        },
                        "tags": {
                            "str": "str"
                        },
                        "type": "str"
                    }
                }
        """

    @overload
    async def put_dictionary(  # pylint: disable=inconsistent-return-statements
        self, resource_dictionary: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put External Resource as a Dictionary.

        .. seealso::
           - http://tempuri.org

        :param resource_dictionary: External Resource as a Dictionary to put. Default value is None.
        :type resource_dictionary: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_dictionary(  # pylint: disable=inconsistent-return-statements
        self, resource_dictionary: Optional[Union[Dict[str, JSON], IO[bytes]]] = None, **kwargs: Any
    ) -> None:
        """Put External Resource as a Dictionary.

        .. seealso::
           - http://tempuri.org

        :param resource_dictionary: External Resource as a Dictionary to put. Is either a {str: JSON}
         type or a IO[bytes] type. Default value is None.
        :type resource_dictionary: dict[str, JSON] or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource_dictionary, (IOBase, bytes)):
            _content = resource_dictionary
        else:
            if resource_dictionary is not None:
                _json = resource_dictionary
            else:
                _json = None

        _request = build_auto_rest_resource_flattening_test_service_put_dictionary_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def get_dictionary(self, **kwargs: Any) -> Dict[str, JSON]:
        """Get External Resource as a Dictionary.

        .. seealso::
           - http://tempuri.org

        :return: dict mapping str to JSON object
        :rtype: dict[str, JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "str": {
                        "id": "str",
                        "location": "str",
                        "name": "str",
                        "properties": {
                            "p.name": "str",
                            "provisioningState": "str",
                            "provisioningStateValues": "str",
                            "type": "str"
                        },
                        "tags": {
                            "str": "str"
                        },
                        "type": "str"
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Dict[str, JSON]] = kwargs.pop("cls", None)

        _request = build_auto_rest_resource_flattening_test_service_get_dictionary_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(Dict[str, JSON], deserialized), {})  # type: ignore

        return cast(Dict[str, JSON], deserialized)  # type: ignore

    @overload
    async def put_resource_collection(  # pylint: disable=inconsistent-return-statements
        self, resource_complex_object: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Put External Resource as a ResourceCollection.

        .. seealso::
           - http://tempuri.org

        :param resource_complex_object: External Resource as a ResourceCollection to put. Default value
         is None.
        :type resource_complex_object: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource_complex_object = {
                    "arrayofresources": [
                        {
                            "id": "str",
                            "location": "str",
                            "name": "str",
                            "properties": {
                                "p.name": "str",
                                "provisioningState": "str",
                                "provisioningStateValues": "str",
                                "type": "str"
                            },
                            "tags": {
                                "str": "str"
                            },
                            "type": "str"
                        }
                    ],
                    "dictionaryofresources": {
                        "str": {
                            "id": "str",
                            "location": "str",
                            "name": "str",
                            "properties": {
                                "p.name": "str",
                                "provisioningState": "str",
                                "provisioningStateValues": "str",
                                "type": "str"
                            },
                            "tags": {
                                "str": "str"
                            },
                            "type": "str"
                        }
                    },
                    "productresource": {
                        "id": "str",
                        "location": "str",
                        "name": "str",
                        "properties": {
                            "p.name": "str",
                            "provisioningState": "str",
                            "provisioningStateValues": "str",
                            "type": "str"
                        },
                        "tags": {
                            "str": "str"
                        },
                        "type": "str"
                    }
                }
        """

    @overload
    async def put_resource_collection(  # pylint: disable=inconsistent-return-statements
        self,
        resource_complex_object: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Put External Resource as a ResourceCollection.

        .. seealso::
           - http://tempuri.org

        :param resource_complex_object: External Resource as a ResourceCollection to put. Default value
         is None.
        :type resource_complex_object: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_resource_collection(  # pylint: disable=inconsistent-return-statements
        self, resource_complex_object: Optional[Union[JSON, IO[bytes]]] = None, **kwargs: Any
    ) -> None:
        """Put External Resource as a ResourceCollection.

        .. seealso::
           - http://tempuri.org

        :param resource_complex_object: External Resource as a ResourceCollection to put. Is either a
         JSON type or a IO[bytes] type. Default value is None.
        :type resource_complex_object: JSON or IO[bytes]
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource_complex_object = {
                    "arrayofresources": [
                        {
                            "id": "str",
                            "location": "str",
                            "name": "str",
                            "properties": {
                                "p.name": "str",
                                "provisioningState": "str",
                                "provisioningStateValues": "str",
                                "type": "str"
                            },
                            "tags": {
                                "str": "str"
                            },
                            "type": "str"
                        }
                    ],
                    "dictionaryofresources": {
                        "str": {
                            "id": "str",
                            "location": "str",
                            "name": "str",
                            "properties": {
                                "p.name": "str",
                                "provisioningState": "str",
                                "provisioningStateValues": "str",
                                "type": "str"
                            },
                            "tags": {
                                "str": "str"
                            },
                            "type": "str"
                        }
                    },
                    "productresource": {
                        "id": "str",
                        "location": "str",
                        "name": "str",
                        "properties": {
                            "p.name": "str",
                            "provisioningState": "str",
                            "provisioningStateValues": "str",
                            "type": "str"
                        },
                        "tags": {
                            "str": "str"
                        },
                        "type": "str"
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(resource_complex_object, (IOBase, bytes)):
            _content = resource_complex_object
        else:
            if resource_complex_object is not None:
                _json = resource_complex_object
            else:
                _json = None

        _request = build_auto_rest_resource_flattening_test_service_put_resource_collection_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def get_resource_collection(self, **kwargs: Any) -> JSON:
        """Get External Resource as a ResourceCollection.

        .. seealso::
           - http://tempuri.org

        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "arrayofresources": [
                        {
                            "id": "str",
                            "location": "str",
                            "name": "str",
                            "properties": {
                                "p.name": "str",
                                "provisioningState": "str",
                                "provisioningStateValues": "str",
                                "type": "str"
                            },
                            "tags": {
                                "str": "str"
                            },
                            "type": "str"
                        }
                    ],
                    "dictionaryofresources": {
                        "str": {
                            "id": "str",
                            "location": "str",
                            "name": "str",
                            "properties": {
                                "p.name": "str",
                                "provisioningState": "str",
                                "provisioningStateValues": "str",
                                "type": "str"
                            },
                            "tags": {
                                "str": "str"
                            },
                            "type": "str"
                        }
                    },
                    "productresource": {
                        "id": "str",
                        "location": "str",
                        "name": "str",
                        "properties": {
                            "p.name": "str",
                            "provisioningState": "str",
                            "provisioningStateValues": "str",
                            "type": "str"
                        },
                        "tags": {
                            "str": "str"
                        },
                        "type": "str"
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_auto_rest_resource_flattening_test_service_get_resource_collection_request(
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def put_simple_product(
        self, simple_body_product: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to put. Default value is None.
        :type simple_body_product: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                simple_body_product = {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """

    @overload
    async def put_simple_product(
        self, simple_body_product: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to put. Default value is None.
        :type simple_body_product: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """

    @distributed_trace_async
    async def put_simple_product(
        self, simple_body_product: Optional[Union[JSON, IO[bytes]]] = None, **kwargs: Any
    ) -> JSON:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to put. Is either a JSON type or a IO[bytes]
         type. Default value is None.
        :type simple_body_product: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                simple_body_product = {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(simple_body_product, (IOBase, bytes)):
            _content = simple_body_product
        else:
            if simple_body_product is not None:
                _json = simple_body_product
            else:
                _json = None

        _request = build_auto_rest_resource_flattening_test_service_put_simple_product_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def post_flattened_simple_product(
        self, simple_body_product: Optional[JSON] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Put Flattened Simple Product with client flattening true on the parameter.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to post. Default value is None.
        :type simple_body_product: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                simple_body_product = {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """

    @overload
    async def post_flattened_simple_product(
        self, simple_body_product: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Put Flattened Simple Product with client flattening true on the parameter.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to post. Default value is None.
        :type simple_body_product: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """

    @distributed_trace_async
    async def post_flattened_simple_product(
        self, simple_body_product: Optional[Union[JSON, IO[bytes]]] = None, **kwargs: Any
    ) -> JSON:
        """Put Flattened Simple Product with client flattening true on the parameter.

        .. seealso::
           - http://tempuri.org

        :param simple_body_product: Simple body product to post. Is either a JSON type or a IO[bytes]
         type. Default value is None.
        :type simple_body_product: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                simple_body_product = {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(simple_body_product, (IOBase, bytes)):
            _content = simple_body_product
        else:
            if simple_body_product is not None:
                _json = simple_body_product
            else:
                _json = None

        _request = build_auto_rest_resource_flattening_test_service_post_flattened_simple_product_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    async def put_simple_product_with_grouping(
        self,
        name: str,
        simple_body_product: Optional[JSON] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param name: Product name with value 'groupproduct'. Required.
        :type name: str
        :param simple_body_product: Simple body product to put. Default value is None.
        :type simple_body_product: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                simple_body_product = {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """

    @overload
    async def put_simple_product_with_grouping(
        self,
        name: str,
        simple_body_product: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param name: Product name with value 'groupproduct'. Required.
        :type name: str
        :param simple_body_product: Simple body product to put. Default value is None.
        :type simple_body_product: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """

    @distributed_trace_async
    async def put_simple_product_with_grouping(
        self, name: str, simple_body_product: Optional[Union[JSON, IO[bytes]]] = None, **kwargs: Any
    ) -> JSON:
        """Put Simple Product with client flattening true on the model.

        .. seealso::
           - http://tempuri.org

        :param name: Product name with value 'groupproduct'. Required.
        :type name: str
        :param simple_body_product: Simple body product to put. Is either a JSON type or a IO[bytes]
         type. Default value is None.
        :type simple_body_product: JSON or IO[bytes]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                simple_body_product = {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "base_product_id": "str",
                    "base_product_description": "str",
                    "details": {
                        "max_product_capacity": "Large",
                        "max_product_display_name": "str",
                        "max_product_image": {
                            "@odata.value": "str",
                            "generic_value": "str"
                        }
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {  # pylint: disable=unsubscriptable-object
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(simple_body_product, (IOBase, bytes)):
            _content = simple_body_product
        else:
            if simple_body_product is not None:
                _json = simple_body_product
            else:
                _json = None

        _request = build_auto_rest_resource_flattening_test_service_put_simple_product_with_grouping_request(
            name=name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore
