{% import 'keywords.jinja2' as keywords with context %}
{{ code_model.options['license_header'] }}

{{ imports }}

{% if code_model.need_request_converter and not async_mode %}
def _convert_request(request, files=None):
    data = request.content if not files else None
    request = HttpRequest(method=request.method, url=request.url, headers=request.headers, data=data)
    if files:
        request.set_formdata_body(files)
    return request
{% endif %}
{% if code_model.need_mixin_abc %}
    {% for client in clients | selectattr("has_mixin") %}
{% set pylint_disable = "# pylint: disable=name-too-long" if (client.name | length) + ("MixinABC" | length) > 40 else "" %}
class {{ client.name }}MixinABC(  {{ pylint_disable }}
    ABC
):
    """DO NOT use this class. It is for internal typing use only."""
    _client: "{{ keywords.async_class }}PipelineClient"
    _config: {{ client.name }}Configuration
    _serialize: "Serializer"
    _deserialize: "Deserializer"
    {% endfor %}
{% endif %}
{% if code_model.has_abstract_operations %}

def raise_if_not_implemented(cls, abstract_methods):
    not_implemented = [f for f in abstract_methods if not callable(getattr(cls, f, None))]
    if not_implemented:
        raise NotImplementedError("The following methods on operation group '{}' are not implemented: '{}'."
        " Please refer to https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize.".format(
        cls.__name__, '\', \''.join(not_implemented))
        )
{% endif %}

{% if code_model.has_etag %}
def quote_etag(etag: Optional[str]) -> Optional[str]:
    if not etag or etag == "*":
        return etag
    if etag.startswith("W/"):
        return etag
    if etag.startswith('"') and etag.endswith('"'):
        return etag
    if etag.startswith("'") and etag.endswith("'"):
        return etag
    return '"' + etag + '"'


def prep_if_match(etag: Optional[str], match_condition: Optional[MatchConditions]) -> Optional[str]:
    if match_condition == MatchConditions.IfNotModified:
        if_match = quote_etag(etag) if etag else None
        return if_match
    if match_condition == MatchConditions.IfPresent:
        return "*"
    return None


def prep_if_none_match(etag: Optional[str], match_condition: Optional[MatchConditions]) -> Optional[str]:
    if match_condition == MatchConditions.IfModified:
        if_none_match = quote_etag(etag) if etag else None
        return if_none_match
    if match_condition == MatchConditions.IfMissing:
        return "*"
    return None
{% endif %}
{% if code_model.has_form_data %}

# file-like tuple could be `(filename, IO (or bytes))` or `(filename, IO (or bytes), content_type)`
FileType = Union[IOBase, bytes]
FileTuple = Union[Tuple[str, FileType], Tuple[str, FileType, str]]
MultiPartFile = Union[IOBase, bytes, FileTuple]
HandledMultiPartFile = Union[IOBase, FileTuple]

class NamedBytesIO(BytesIO):
    def __init__(self, name: str, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.name = name

def has_file(data: Any) -> bool:
    return isinstance(data, (IOBase, bytes)) or (isinstance(data, (list, tuple)) and any(isinstance(f, (IOBase, bytes, tuple)) for f in data))

def handle_file(file: Union[IOBase, bytes, FileTuple]) -> HandledMultiPartFile:
    if isinstance(file, (IOBase, tuple)):
        return file
    return NamedBytesIO("auto-name-" + str(uuid.uuid4()), file)

def multipart_file(file: Union[MultiPartFile, List[MultiPartFile]]) -> Union[HandledMultiPartFile, List[HandledMultiPartFile]]:
    if isinstance(file, list):
        return [handle_file(f) for f in file]
    return handle_file(file)

def multipart_data(data: Any) -> Any:
    if isinstance(data, (list, tuple, dict, Model)):
        return json.dumps(data, cls=SdkJSONEncoder, exclude_readonly=True)
    return data

def handle_multipart_form_data_model(body: Model) -> MutableMapping[str, Any]:  # pylint: disable=unsubscriptable-object
    """handle first layer of model. 
    If its value is bytes or IO, replace it with raw value instead of serialized value.

    :param body: The model to handle.
    :type body: ~payload.multipart._model_base.Model
    :return: The handled model.
    :rtype: MutableMapping[str, Any]
    """
    result = body.as_dict()
    rest_name_attr = {v._rest_name: k for k, v in body._attr_to_rest_field.items()}  # pylint: disable=protected-access
    for rest_name in result.keys():
        attr = rest_name_attr.get(rest_name)
        if attr is not None:
            raw_value = getattr(body, attr, None)
            if has_file(raw_value):
                result[rest_name] = raw_value
    return result
{% endif %}
