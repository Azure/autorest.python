# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AudioTaskLabel(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines the possible descriptors for available audio operation responses."""

    TRANSCRIBE = "transcribe"
    """Accompanying response data resulted from an audio transcription task."""
    TRANSLATE = "translate"
    """Accompanying response data resulted from an audio translation task."""


class AudioTranscriptionFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines available options for the underlying response format of output transcription
    information.
    """

    JSON = "json"
    """Use a response body that is a JSON object containing a single 'text' field for the
    #: transcription."""
    VERBOSE_JSON = "verbose_json"
    """Use a response body that is a JSON object containing transcription text along with timing,
    #: segments, and other
    #: metadata."""
    TEXT = "text"
    """Use a response body that is plain text containing the raw, unannotated transcription."""
    SRT = "srt"
    """Use a response body that is plain text in SubRip (SRT) format that also includes timing
    #: information."""
    VTT = "vtt"
    """Use a response body that is plain text in Web Video Text Tracks (VTT) format that also includes
    #: timing information."""


class AudioTranslationFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Defines available options for the underlying response format of output translation information."""

    JSON = "json"
    """Use a response body that is a JSON object containing a single 'text' field for the translation."""
    VERBOSE_JSON = "verbose_json"
    """Use a response body that is a JSON object containing translation text along with timing,
    #: segments, and other
    #: metadata."""
    TEXT = "text"
    """Use a response body that is plain text containing the raw, unannotated translation."""
    SRT = "srt"
    """Use a response body that is plain text in SubRip (SRT) format that also includes timing
    #: information."""
    VTT = "vtt"
    """Use a response body that is plain text in Web Video Text Tracks (VTT) format that also includes
    #: timing information."""


class AzureChatExtensionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A representation of configuration data for a single Azure OpenAI chat extension. This will be
    used by a chat
      completions request that should use Azure OpenAI chat extensions to augment the response
    behavior.
      The use of this configuration is compatible only with Azure OpenAI.
    """

    AZURE_COGNITIVE_SEARCH = "AzureCognitiveSearch"
    """Represents the use of Azure Cognitive Search as an Azure OpenAI chat extension."""


class AzureOpenAIOperationState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The state of a job or item."""

    NOT_RUNNING = "notRunning"
    """The operation was created and is queued to be processed in the future."""
    RUNNING = "running"
    """The operation has started to be processed."""
    SUCCEEDED = "succeeded"
    """The operation has successfully be processed and is ready for consumption."""
    CANCELED = "canceled"
    """The operation has been canceled and is incomplete."""
    FAILED = "failed"
    """The operation has completed processing with a failure and cannot be further consumed."""


class ChatRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A description of the intended purpose of a message within a chat completions interaction."""

    SYSTEM = "system"
    """The role that instructs or sets the behavior of the assistant."""
    ASSISTANT = "assistant"
    """The role that provides responses to system-instructed, user-prompted input."""
    USER = "user"
    """The role that provides input for chat completions."""
    FUNCTION = "function"
    """The role that provides function results for chat completions."""
    TOOL = "tool"
    """The role that represents extension tool activity within a chat completions operation."""


class CompletionsFinishReason(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Representation of the manner in which a completions response concluded."""

    STOPPED = "stop"
    """Completions ended normally and reached its end of token generation."""
    TOKEN_LIMIT_REACHED = "length"
    """Completions exhausted available token limits before generation could complete."""
    CONTENT_FILTERED = "content_filter"
    """Completions generated a response that was identified as potentially sensitive per content
    #: moderation policies."""
    FUNCTION_CALL = "function_call"
    """Completion ended normally, with the model requesting a function to be called."""


class ContentFilterSeverity(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Ratings for the intensity and risk level of harmful content."""

    SAFE = "safe"
    """Content may be related to violence, self-harm, sexual, or hate categories but the terms
    #: are used in general, journalistic, scientific, medical, and similar professional contexts,
    #: which are appropriate for most audiences."""
    LOW = "low"
    """Content that expresses prejudiced, judgmental, or opinionated views, includes offensive
    #: use of language, stereotyping, use cases exploring a fictional world (for example, gaming,
    #: literature) and depictions at low intensity."""
    MEDIUM = "medium"
    """Content that uses offensive, insulting, mocking, intimidating, or demeaning language
    #: towards specific identity groups, includes depictions of seeking and executing harmful
    #: instructions, fantasies, glorification, promotion of harm at medium intensity."""
    HIGH = "high"
    """Content that displays explicit and severe harmful instructions, actions,
    #: damage, or abuse; includes endorsement, glorification, or promotion of severe
    #: harmful acts, extreme or illegal forms of harm, radicalization, or non-consensual
    #: power exchange or abuse."""


class FunctionCallPreset(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The collection of predefined behaviors for handling request-provided function information in a
    chat completions
    operation.
    """

    AUTO = "auto"
    """Specifies that the model may either use any of the functions provided in this chat completions
    #: request or
    #: instead return a standard chat completions response as if no functions were provided."""
    NONE = "none"
    """Specifies that the model should not respond with a function call and should instead provide a
    #: standard chat
    #: completions response. Response content may still be influenced by the provided function
    #: information."""


class ImageGenerationResponseFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The format in which the generated images are returned."""

    URL = "url"
    """Image generation response items should provide a URL from which the image may be retrieved."""
    BASE64 = "b64_json"
    """Image generation response items should provide image data as a base64-encoded string."""


class ImageSize(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The desired size of the generated images. Must be one of 256x256, 512x512, or 1024x1024."""

    SIZE256X256 = "256x256"
    """Image size of 256x256."""
    SIZE512X512 = "512x512"
    """Image size of 512x512."""
    SIZE1024X1024 = "1024x1024"
    """Image size of 1024x1024."""
