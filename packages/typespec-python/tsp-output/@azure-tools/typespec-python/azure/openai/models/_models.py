# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AudioTranscription(_model_base.Model):
    """Result information for an operation that transcribed spoken audio into written text.

    All required parameters must be populated in order to send to Azure.

    :ivar text: The transcribed text for the provided audio data. Required.
    :vartype text: str
    :ivar task: The label that describes which operation type generated the accompanying response
     data. Known values are: "transcribe" and "translate".
    :vartype task: str or ~azure.openai.models.AudioTaskLabel
    :ivar language: The spoken language that was detected in the transcribed audio data.
     This is expressed as a two-letter ISO-639-1 language code like 'en' or 'fr'.
    :vartype language: str
    :ivar duration: The total duration of the audio processed to produce accompanying transcription
     information.
    :vartype duration: float
    :ivar segments: A collection of information about the timing, probabilities, and other detail
     of each processed audio segment.
    :vartype segments: list[~azure.openai.models.AudioTranscriptionSegment]
    """

    text: str = rest_field()
    """The transcribed text for the provided audio data. Required."""
    task: Optional[Union[str, "_models.AudioTaskLabel"]] = rest_field()
    """The label that describes which operation type generated the accompanying response data. Known
     values are: \"transcribe\" and \"translate\"."""
    language: Optional[str] = rest_field()
    """The spoken language that was detected in the transcribed audio data.
     This is expressed as a two-letter ISO-639-1 language code like 'en' or 'fr'."""
    duration: Optional[float] = rest_field()
    """The total duration of the audio processed to produce accompanying transcription information."""
    segments: Optional[List["_models.AudioTranscriptionSegment"]] = rest_field()
    """A collection of information about the timing, probabilities, and other detail of each processed
     audio segment."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        task: Optional[Union[str, "_models.AudioTaskLabel"]] = None,
        language: Optional[str] = None,
        duration: Optional[float] = None,
        segments: Optional[List["_models.AudioTranscriptionSegment"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AudioTranscriptionOptions(_model_base.Model):
    """The configuration information for an audio transcription request.

    All required parameters must be populated in order to send to Azure.

    :ivar file: The audio data to transcribe. This must be the binary content of a file in one of
     the supported media formats:
     flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, webm. Required.
    :vartype file: bytes
    :ivar response_format: The requested format of the transcription response data, which will
     influence the content and detail of the result. Known values are: "json", "verbose_json",
     "text", "srt", and "vtt".
    :vartype response_format: str or ~azure.openai.models.AudioTranscriptionFormat
    :ivar language: The primary spoken language of the audio data to be transcribed, supplied as a
     two-letter ISO-639-1 language code
     such as 'en' or 'fr'.
     Providing this known input language is optional but may improve the accuracy and/or latency of
     transcription.
    :vartype language: str
    :ivar prompt: An optional hint to guide the model's style or continue from a prior audio
     segment. The written language of the
     prompt should match the primary spoken language of the audio data.
    :vartype prompt: str
    :ivar temperature: The sampling temperature, between 0 and 1.
     Higher values like 0.8 will make the output more random, while lower values like 0.2 will make
     it more focused and deterministic.
     If set to 0, the model will use log probability to automatically increase the temperature
     until certain thresholds are hit.
    :vartype temperature: float
    :ivar model: The model to use for this transcription request.
    :vartype model: str
    """

    file: bytes = rest_field(format="base64")
    """The audio data to transcribe. This must be the binary content of a file in one of the supported
     media formats:
     flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, webm. Required."""
    response_format: Optional[Union[str, "_models.AudioTranscriptionFormat"]] = rest_field()
    """The requested format of the transcription response data, which will influence the content and
     detail of the result. Known values are: \"json\", \"verbose_json\", \"text\", \"srt\", and
     \"vtt\"."""
    language: Optional[str] = rest_field()
    """The primary spoken language of the audio data to be transcribed, supplied as a two-letter
     ISO-639-1 language code
     such as 'en' or 'fr'.
     Providing this known input language is optional but may improve the accuracy and/or latency of
     transcription."""
    prompt: Optional[str] = rest_field()
    """An optional hint to guide the model's style or continue from a prior audio segment. The written
     language of the
     prompt should match the primary spoken language of the audio data."""
    temperature: Optional[float] = rest_field()
    """The sampling temperature, between 0 and 1.
     Higher values like 0.8 will make the output more random, while lower values like 0.2 will make
     it more focused and deterministic.
     If set to 0, the model will use log probability to automatically increase the temperature until
     certain thresholds are hit."""
    model: Optional[str] = rest_field()
    """The model to use for this transcription request."""

    @overload
    def __init__(
        self,
        *,
        file: bytes,
        response_format: Optional[Union[str, "_models.AudioTranscriptionFormat"]] = None,
        language: Optional[str] = None,
        prompt: Optional[str] = None,
        temperature: Optional[float] = None,
        model: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AudioTranscriptionSegment(_model_base.Model):
    """Extended information about a single segment of transcribed audio data.
    Segments generally represent roughly 5-10 seconds of speech. Segment boundaries typically occur
    between words but not
    necessarily sentences.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The 0-based index of this segment within a transcription. Required.
    :vartype id: int
    :ivar start: The time at which this segment started relative to the beginning of the
     transcribed audio. Required.
    :vartype start: float
    :ivar end: The time at which this segment ended relative to the beginning of the transcribed
     audio. Required.
    :vartype end: float
    :ivar text: The transcribed text that was part of this audio segment. Required.
    :vartype text: str
    :ivar temperature: The temperature score associated with this audio segment. Required.
    :vartype temperature: float
    :ivar avg_logprob: The average log probability associated with this audio segment. Required.
    :vartype avg_logprob: float
    :ivar compression_ratio: The compression ratio of this audio segment. Required.
    :vartype compression_ratio: float
    :ivar no_speech_prob: The probability of no speech detection within this audio segment.
     Required.
    :vartype no_speech_prob: float
    :ivar tokens: The token IDs matching the transcribed text in this audio segment. Required.
    :vartype tokens: list[int]
    :ivar seek: The seek position associated with the processing of this audio segment.
     Seek positions are expressed as hundredths of seconds.
     The model may process several segments from a single seek position, so while the seek position
     will never represent
     a later time than the segment's start, the segment's start may represent a significantly later
     time than the
     segment's associated seek position. Required.
    :vartype seek: int
    """

    id: int = rest_field()
    """The 0-based index of this segment within a transcription. Required."""
    start: float = rest_field()
    """The time at which this segment started relative to the beginning of the transcribed audio.
     Required."""
    end: float = rest_field()
    """The time at which this segment ended relative to the beginning of the transcribed audio.
     Required."""
    text: str = rest_field()
    """The transcribed text that was part of this audio segment. Required."""
    temperature: float = rest_field()
    """The temperature score associated with this audio segment. Required."""
    avg_logprob: float = rest_field()
    """The average log probability associated with this audio segment. Required."""
    compression_ratio: float = rest_field()
    """The compression ratio of this audio segment. Required."""
    no_speech_prob: float = rest_field()
    """The probability of no speech detection within this audio segment. Required."""
    tokens: List[int] = rest_field()
    """The token IDs matching the transcribed text in this audio segment. Required."""
    seek: int = rest_field()
    """The seek position associated with the processing of this audio segment.
     Seek positions are expressed as hundredths of seconds.
     The model may process several segments from a single seek position, so while the seek position
     will never represent
     a later time than the segment's start, the segment's start may represent a significantly later
     time than the
     segment's associated seek position. Required."""

    @overload
    def __init__(
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        start: float,
        end: float,
        text: str,
        temperature: float,
        avg_logprob: float,
        compression_ratio: float,
        no_speech_prob: float,
        tokens: List[int],
        seek: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AudioTranslation(_model_base.Model):
    """Result information for an operation that translated spoken audio into written text.

    All required parameters must be populated in order to send to Azure.

    :ivar text: The translated text for the provided audio data. Required.
    :vartype text: str
    :ivar task: The label that describes which operation type generated the accompanying response
     data. Known values are: "transcribe" and "translate".
    :vartype task: str or ~azure.openai.models.AudioTaskLabel
    :ivar language: The spoken language that was detected in the translated audio data.
     This is expressed as a two-letter ISO-639-1 language code like 'en' or 'fr'.
    :vartype language: str
    :ivar duration: The total duration of the audio processed to produce accompanying translation
     information.
    :vartype duration: float
    :ivar segments: A collection of information about the timing, probabilities, and other detail
     of each processed audio segment.
    :vartype segments: list[~azure.openai.models.AudioTranslationSegment]
    """

    text: str = rest_field()
    """The translated text for the provided audio data. Required."""
    task: Optional[Union[str, "_models.AudioTaskLabel"]] = rest_field()
    """The label that describes which operation type generated the accompanying response data. Known
     values are: \"transcribe\" and \"translate\"."""
    language: Optional[str] = rest_field()
    """The spoken language that was detected in the translated audio data.
     This is expressed as a two-letter ISO-639-1 language code like 'en' or 'fr'."""
    duration: Optional[float] = rest_field()
    """The total duration of the audio processed to produce accompanying translation information."""
    segments: Optional[List["_models.AudioTranslationSegment"]] = rest_field()
    """A collection of information about the timing, probabilities, and other detail of each processed
     audio segment."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        task: Optional[Union[str, "_models.AudioTaskLabel"]] = None,
        language: Optional[str] = None,
        duration: Optional[float] = None,
        segments: Optional[List["_models.AudioTranslationSegment"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AudioTranslationOptions(_model_base.Model):
    """The configuration information for an audio translation request.

    All required parameters must be populated in order to send to Azure.

    :ivar file: The audio data to translate. This must be the binary content of a file in one of
     the supported media formats:
     flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, webm. Required.
    :vartype file: bytes
    :ivar response_format: The requested format of the translation response data, which will
     influence the content and detail of the result. Known values are: "json", "verbose_json",
     "text", "srt", and "vtt".
    :vartype response_format: str or ~azure.openai.models.AudioTranslationFormat
    :ivar prompt: An optional hint to guide the model's style or continue from a prior audio
     segment. The written language of the
     prompt should match the primary spoken language of the audio data.
    :vartype prompt: str
    :ivar temperature: The sampling temperature, between 0 and 1.
     Higher values like 0.8 will make the output more random, while lower values like 0.2 will make
     it more focused and deterministic.
     If set to 0, the model will use log probability to automatically increase the temperature
     until certain thresholds are hit.
    :vartype temperature: float
    :ivar model: The model to use for this translation request.
    :vartype model: str
    """

    file: bytes = rest_field(format="base64")
    """The audio data to translate. This must be the binary content of a file in one of the supported
     media formats:
     flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, webm. Required."""
    response_format: Optional[Union[str, "_models.AudioTranslationFormat"]] = rest_field()
    """The requested format of the translation response data, which will influence the content and
     detail of the result. Known values are: \"json\", \"verbose_json\", \"text\", \"srt\", and
     \"vtt\"."""
    prompt: Optional[str] = rest_field()
    """An optional hint to guide the model's style or continue from a prior audio segment. The written
     language of the
     prompt should match the primary spoken language of the audio data."""
    temperature: Optional[float] = rest_field()
    """The sampling temperature, between 0 and 1.
     Higher values like 0.8 will make the output more random, while lower values like 0.2 will make
     it more focused and deterministic.
     If set to 0, the model will use log probability to automatically increase the temperature until
     certain thresholds are hit."""
    model: Optional[str] = rest_field()
    """The model to use for this translation request."""

    @overload
    def __init__(
        self,
        *,
        file: bytes,
        response_format: Optional[Union[str, "_models.AudioTranslationFormat"]] = None,
        prompt: Optional[str] = None,
        temperature: Optional[float] = None,
        model: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AudioTranslationSegment(_model_base.Model):
    """Extended information about a single segment of translated audio data.
    Segments generally represent roughly 5-10 seconds of speech. Segment boundaries typically occur
    between words but not
    necessarily sentences.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The 0-based index of this segment within a translation. Required.
    :vartype id: int
    :ivar start: The time at which this segment started relative to the beginning of the translated
     audio. Required.
    :vartype start: float
    :ivar end: The time at which this segment ended relative to the beginning of the translated
     audio. Required.
    :vartype end: float
    :ivar text: The translated text that was part of this audio segment. Required.
    :vartype text: str
    :ivar temperature: The temperature score associated with this audio segment. Required.
    :vartype temperature: float
    :ivar avg_logprob: The average log probability associated with this audio segment. Required.
    :vartype avg_logprob: float
    :ivar compression_ratio: The compression ratio of this audio segment. Required.
    :vartype compression_ratio: float
    :ivar no_speech_prob: The probability of no speech detection within this audio segment.
     Required.
    :vartype no_speech_prob: float
    :ivar tokens: The token IDs matching the translated text in this audio segment. Required.
    :vartype tokens: list[int]
    :ivar seek: The seek position associated with the processing of this audio segment.
     Seek positions are expressed as hundredths of seconds.
     The model may process several segments from a single seek position, so while the seek position
     will never represent
     a later time than the segment's start, the segment's start may represent a significantly later
     time than the
     segment's associated seek position. Required.
    :vartype seek: int
    """

    id: int = rest_field()
    """The 0-based index of this segment within a translation. Required."""
    start: float = rest_field()
    """The time at which this segment started relative to the beginning of the translated audio.
     Required."""
    end: float = rest_field()
    """The time at which this segment ended relative to the beginning of the translated audio.
     Required."""
    text: str = rest_field()
    """The translated text that was part of this audio segment. Required."""
    temperature: float = rest_field()
    """The temperature score associated with this audio segment. Required."""
    avg_logprob: float = rest_field()
    """The average log probability associated with this audio segment. Required."""
    compression_ratio: float = rest_field()
    """The compression ratio of this audio segment. Required."""
    no_speech_prob: float = rest_field()
    """The probability of no speech detection within this audio segment. Required."""
    tokens: List[int] = rest_field()
    """The token IDs matching the translated text in this audio segment. Required."""
    seek: int = rest_field()
    """The seek position associated with the processing of this audio segment.
     Seek positions are expressed as hundredths of seconds.
     The model may process several segments from a single seek position, so while the seek position
     will never represent
     a later time than the segment's start, the segment's start may represent a significantly later
     time than the
     segment's associated seek position. Required."""

    @overload
    def __init__(
        self,
        *,
        id: int,  # pylint: disable=redefined-builtin
        start: float,
        end: float,
        text: str,
        temperature: float,
        avg_logprob: float,
        compression_ratio: float,
        no_speech_prob: float,
        tokens: List[int],
        seek: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AzureChatExtensionConfiguration(_model_base.Model):
    """A representation of configuration data for a single Azure OpenAI chat extension. This will be
    used by a chat
      completions request that should use Azure OpenAI chat extensions to augment the response
    behavior.
      The use of this configuration is compatible only with Azure OpenAI.

    All required parameters must be populated in order to send to Azure.

    :ivar type: The label for the type of an Azure chat extension. This typically corresponds to a
     matching Azure resource.
       Azure chat extensions are only compatible with Azure OpenAI. Required.
     "AzureCognitiveSearch"
    :vartype type: str or ~azure.openai.models.AzureChatExtensionType
    :ivar parameters: The configuration payload used for the Azure chat extension. The structure
     payload details are specific to the
       extension being configured.
       Azure chat extensions are only compatible with Azure OpenAI. Required.
    :vartype parameters: any
    """

    type: Union[str, "_models.AzureChatExtensionType"] = rest_field()
    """The label for the type of an Azure chat extension. This typically corresponds to a matching
     Azure resource.
       Azure chat extensions are only compatible with Azure OpenAI. Required.
     \"AzureCognitiveSearch\""""
    parameters: Any = rest_field()
    """The configuration payload used for the Azure chat extension. The structure payload details are
     specific to the
       extension being configured.
       Azure chat extensions are only compatible with Azure OpenAI. Required."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.AzureChatExtensionType"],
        parameters: Any,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AzureChatExtensionsMessageContext(_model_base.Model):
    """A representation of the additional context information available when Azure OpenAI chat
    extensions are involved
      in the generation of a corresponding chat completions response. This context information is
    only populated when
      using an Azure OpenAI request configured to use a matching extension.

    :ivar messages: The contextual message payload associated with the Azure chat extensions used
     for a chat completions request.
       These messages describe the data source retrievals, plugin invocations, and other
     intermediate steps taken in the
       course of generating a chat completions response that was augmented by capabilities from
     Azure OpenAI chat
       extensions.
    :vartype messages: list[~azure.openai.models.ChatMessage]
    """

    messages: Optional[List["_models.ChatMessage"]] = rest_field()
    """The contextual message payload associated with the Azure chat extensions used for a chat
     completions request.
       These messages describe the data source retrievals, plugin invocations, and other
     intermediate steps taken in the
       course of generating a chat completions response that was augmented by capabilities from
     Azure OpenAI chat
       extensions."""

    @overload
    def __init__(
        self,
        *,
        messages: Optional[List["_models.ChatMessage"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class BatchImageGenerationOperationResponse(_model_base.Model):
    """A polling status update or final response payload for an image operation.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The ID of the operation. Required.
    :vartype id: str
    :ivar created: A timestamp when this job or item was created (in unix epochs). Required.
    :vartype created: ~datetime.datetime
    :ivar expires: A timestamp when this operation and its associated images expire and will be
     deleted (in unix epochs).
    :vartype expires: int
    :ivar result: The result of the operation if the operation succeeded.
    :vartype result: ~azure.openai.models.ImageGenerations
    :ivar status: The status of the operation. Required. Known values are: "notRunning", "running",
     "succeeded", "canceled", and "failed".
    :vartype status: str or ~azure.openai.models.AzureOpenAIOperationState
    :ivar error: The error if the operation failed.
    :vartype error: ~azure.openai.models.Error
    """

    id: str = rest_field()
    """The ID of the operation. Required."""
    created: datetime.datetime = rest_field(format="unix-timestamp")
    """A timestamp when this job or item was created (in unix epochs). Required."""
    expires: Optional[int] = rest_field()
    """A timestamp when this operation and its associated images expire and will be deleted (in unix
     epochs)."""
    result: Optional["_models._models.ImageGenerations"] = rest_field()
    """The result of the operation if the operation succeeded."""
    status: Union[str, "_models.AzureOpenAIOperationState"] = rest_field()
    """The status of the operation. Required. Known values are: \"notRunning\", \"running\",
     \"succeeded\", \"canceled\", and \"failed\"."""
    error: Optional["_models.Error"] = rest_field()
    """The error if the operation failed."""


class ChatChoice(_model_base.Model):
    """The representation of a single prompt completion as part of an overall chat completions
    request.
    Generally, ``n`` choices are generated per provided prompt with a default value of 1.
    Token limits and other settings may limit the number of choices generated.

    All required parameters must be populated in order to send to Azure.

    :ivar message: The chat message for a given chat completions prompt.
    :vartype message: ~azure.openai.models.ChatMessage
    :ivar index: The ordered index associated with this chat completions choice. Required.
    :vartype index: int
    :ivar finish_reason: The reason that this chat completions choice completed its generated.
     Required. Known values are: "stop", "length", "content_filter", and "function_call".
    :vartype finish_reason: str or ~azure.openai.models.CompletionsFinishReason
    :ivar delta: The delta message content for a streaming response.
    :vartype delta: ~azure.openai.models.ChatMessage
    :ivar content_filter_results: Information about the content filtering category (hate, sexual,
     violence, self_harm), if it
     has been detected, as well as the severity level (very_low, low, medium, high-scale that
     determines the intensity and risk level of harmful content) and if it has been filtered or
     not.
    :vartype content_filter_results: ~azure.openai.models.ContentFilterResults
    """

    message: Optional["_models.ChatMessage"] = rest_field()
    """The chat message for a given chat completions prompt."""
    index: int = rest_field()
    """The ordered index associated with this chat completions choice. Required."""
    finish_reason: Union[str, "_models.CompletionsFinishReason"] = rest_field()
    """The reason that this chat completions choice completed its generated. Required. Known values
     are: \"stop\", \"length\", \"content_filter\", and \"function_call\"."""
    delta: Optional["_models.ChatMessage"] = rest_field()
    """The delta message content for a streaming response."""
    content_filter_results: Optional["_models.ContentFilterResults"] = rest_field()
    """Information about the content filtering category (hate, sexual, violence, self_harm), if it
     has been detected, as well as the severity level (very_low, low, medium, high-scale that
     determines the intensity and risk level of harmful content) and if it has been filtered or not."""

    @overload
    def __init__(
        self,
        *,
        index: int,
        finish_reason: Union[str, "_models.CompletionsFinishReason"],
        message: Optional["_models.ChatMessage"] = None,
        delta: Optional["_models.ChatMessage"] = None,
        content_filter_results: Optional["_models.ContentFilterResults"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ChatCompletions(_model_base.Model):
    """Representation of the response data from a chat completions request.
    Completions support a wide variety of tasks and generate text that continues from or
    "completes"
    provided prompt data.

    All required parameters must be populated in order to send to Azure.

    :ivar id: A unique identifier associated with this chat completions response. Required.
    :vartype id: str
    :ivar created: The first timestamp associated with generation activity for this completions
     response,
     represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970. Required.
    :vartype created: ~datetime.datetime
    :ivar choices: The collection of completions choices associated with this completions response.
     Generally, ``n`` choices are generated per provided prompt with a default value of 1.
     Token limits and other settings may limit the number of choices generated. Required.
    :vartype choices: list[~azure.openai.models.ChatChoice]
    :ivar prompt_filter_results: Content filtering results for zero or more prompts in the request.
     In a streaming request,
     results for different prompts may arrive at different times or in different orders.
    :vartype prompt_filter_results: list[~azure.openai.models.PromptFilterResult]
    :ivar usage: Usage information for tokens processed and generated as part of this completions
     operation. Required.
    :vartype usage: ~azure.openai.models.CompletionsUsage
    """

    id: str = rest_field()
    """A unique identifier associated with this chat completions response. Required."""
    created: datetime.datetime = rest_field(format="unix-timestamp")
    """The first timestamp associated with generation activity for this completions response,
     represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970. Required."""
    choices: List["_models.ChatChoice"] = rest_field()
    """The collection of completions choices associated with this completions response.
     Generally, ``n`` choices are generated per provided prompt with a default value of 1.
     Token limits and other settings may limit the number of choices generated. Required."""
    prompt_filter_results: Optional[List["_models.PromptFilterResult"]] = rest_field()
    """Content filtering results for zero or more prompts in the request. In a streaming request,
     results for different prompts may arrive at different times or in different orders."""
    usage: "_models.CompletionsUsage" = rest_field()
    """Usage information for tokens processed and generated as part of this completions operation.
     Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        created: datetime.datetime,
        choices: List["_models.ChatChoice"],
        usage: "_models.CompletionsUsage",
        prompt_filter_results: Optional[List["_models.PromptFilterResult"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ChatCompletionsOptions(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """The configuration information for a chat completions request.
    Completions support a wide variety of tasks and generate text that continues from or
    "completes"
    provided prompt data.

    All required parameters must be populated in order to send to Azure.

    :ivar messages: The collection of context messages associated with this chat completions
     request.
     Typical usage begins with a chat message for the System role that provides instructions for
     the behavior of the assistant, followed by alternating messages between the User and
     Assistant roles. Required.
    :vartype messages: list[~azure.openai.models.ChatMessage]
    :ivar functions: A list of functions the model may generate JSON inputs for.
    :vartype functions: list[~azure.openai.models.FunctionDefinition]
    :ivar function_call: Controls how the model responds to function calls. "none" means the model
     does not call a function,
     and responds to the end-user. "auto" means the model can pick between an end-user or calling a
     function.
      Specifying a particular function via ``{"name": "my_function"}`` forces the model to call
     that function.
      "none" is the default when no functions are present. "auto" is the default if functions are
     present. Is either a Union[str, "_models.FunctionCallPreset"] type or a FunctionName type.
    :vartype function_call: str or ~azure.openai.models.FunctionCallPreset or
     ~azure.openai.models.FunctionName
    :ivar max_tokens: The maximum number of tokens to generate.
    :vartype max_tokens: int
    :ivar temperature: The sampling temperature to use that controls the apparent creativity of
     generated completions.
     Higher values will make output more random while lower values will make results more focused
     and deterministic.
     It is not recommended to modify temperature and top_p for the same completions request as the
     interaction of these two settings is difficult to predict.
    :vartype temperature: float
    :ivar top_p: An alternative to sampling with temperature called nucleus sampling. This value
     causes the
     model to consider the results of tokens with the provided probability mass. As an example, a
     value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     considered.
     It is not recommended to modify temperature and top_p for the same completions request as the
     interaction of these two settings is difficult to predict.
    :vartype top_p: float
    :ivar logit_bias: A map between GPT token IDs and bias scores that influences the probability
     of specific tokens
     appearing in a completions response. Token IDs are computed via external tokenizer tools,
     while
     bias scores reside in the range of -100 to 100 with minimum and maximum values corresponding
     to
     a full ban or exclusive selection of a token, respectively. The exact behavior of a given bias
     score varies by model.
    :vartype logit_bias: dict[str, int]
    :ivar user: An identifier for the caller or end user of the operation. This may be used for
     tracking
     or rate-limiting purposes.
    :vartype user: str
    :ivar n: The number of chat completions choices that should be generated for a chat completions
     response.
     Because this setting can generate many completions, it may quickly consume your token quota.
     Use carefully and ensure reasonable settings for max_tokens and stop.
    :vartype n: int
    :ivar stop: A collection of textual sequences that will end completions generation.
    :vartype stop: list[str]
    :ivar presence_penalty: A value that influences the probability of generated tokens appearing
     based on their existing
     presence in generated text.
     Positive values will make tokens less likely to appear when they already exist and increase
     the
     model's likelihood to output new topics.
    :vartype presence_penalty: float
    :ivar frequency_penalty: A value that influences the probability of generated tokens appearing
     based on their cumulative
     frequency in generated text.
     Positive values will make tokens less likely to appear as their frequency increases and
     decrease the likelihood of the model repeating the same statements verbatim.
    :vartype frequency_penalty: float
    :ivar stream: A value indicating whether chat completions should be streamed for this request.
    :vartype stream: bool
    :ivar model: The model name to provide as part of this completions request.
     Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     resource URI that's connected to.
    :vartype model: str
    :ivar data_sources: The configuration entries for Azure OpenAI chat extensions that use them.
       This additional specification is only compatible with Azure OpenAI.
    :vartype data_sources: list[~azure.openai.models.AzureChatExtensionConfiguration]
    """

    messages: List["_models.ChatMessage"] = rest_field()
    """The collection of context messages associated with this chat completions request.
     Typical usage begins with a chat message for the System role that provides instructions for
     the behavior of the assistant, followed by alternating messages between the User and
     Assistant roles. Required."""
    functions: Optional[List["_models.FunctionDefinition"]] = rest_field()
    """A list of functions the model may generate JSON inputs for."""
    function_call: Optional[Union[str, "_models.FunctionCallPreset", "_models.FunctionName"]] = rest_field()
    """Controls how the model responds to function calls. \"none\" means the model does not call a
     function,
     and responds to the end-user. \"auto\" means the model can pick between an end-user or calling
     a function.
      Specifying a particular function via ``{\"name\": \"my_function\"}`` forces the model to call
     that function.
      \"none\" is the default when no functions are present. \"auto\" is the default if functions
     are present. Is either a Union[str, \"_models.FunctionCallPreset\"] type or a FunctionName
     type."""
    max_tokens: Optional[int] = rest_field()
    """The maximum number of tokens to generate."""
    temperature: Optional[float] = rest_field()
    """The sampling temperature to use that controls the apparent creativity of generated completions.
     Higher values will make output more random while lower values will make results more focused
     and deterministic.
     It is not recommended to modify temperature and top_p for the same completions request as the
     interaction of these two settings is difficult to predict."""
    top_p: Optional[float] = rest_field()
    """An alternative to sampling with temperature called nucleus sampling. This value causes the
     model to consider the results of tokens with the provided probability mass. As an example, a
     value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     considered.
     It is not recommended to modify temperature and top_p for the same completions request as the
     interaction of these two settings is difficult to predict."""
    logit_bias: Optional[Dict[str, int]] = rest_field()
    """A map between GPT token IDs and bias scores that influences the probability of specific tokens
     appearing in a completions response. Token IDs are computed via external tokenizer tools, while
     bias scores reside in the range of -100 to 100 with minimum and maximum values corresponding to
     a full ban or exclusive selection of a token, respectively. The exact behavior of a given bias
     score varies by model."""
    user: Optional[str] = rest_field()
    """An identifier for the caller or end user of the operation. This may be used for tracking
     or rate-limiting purposes."""
    n: Optional[int] = rest_field()
    """The number of chat completions choices that should be generated for a chat completions
     response.
     Because this setting can generate many completions, it may quickly consume your token quota.
     Use carefully and ensure reasonable settings for max_tokens and stop."""
    stop: Optional[List[str]] = rest_field()
    """A collection of textual sequences that will end completions generation."""
    presence_penalty: Optional[float] = rest_field()
    """A value that influences the probability of generated tokens appearing based on their existing
     presence in generated text.
     Positive values will make tokens less likely to appear when they already exist and increase the
     model's likelihood to output new topics."""
    frequency_penalty: Optional[float] = rest_field()
    """A value that influences the probability of generated tokens appearing based on their cumulative
     frequency in generated text.
     Positive values will make tokens less likely to appear as their frequency increases and
     decrease the likelihood of the model repeating the same statements verbatim."""
    stream: Optional[bool] = rest_field()
    """A value indicating whether chat completions should be streamed for this request."""
    model: Optional[str] = rest_field()
    """The model name to provide as part of this completions request.
     Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     resource URI that's connected to."""
    data_sources: Optional[List["_models.AzureChatExtensionConfiguration"]] = rest_field(name="dataSources")
    """The configuration entries for Azure OpenAI chat extensions that use them.
       This additional specification is only compatible with Azure OpenAI."""

    @overload
    def __init__(
        self,
        *,
        messages: List["_models.ChatMessage"],
        functions: Optional[List["_models.FunctionDefinition"]] = None,
        function_call: Optional[Union[str, "_models.FunctionCallPreset", "_models.FunctionName"]] = None,
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
        logit_bias: Optional[Dict[str, int]] = None,
        user: Optional[str] = None,
        n: Optional[int] = None,
        stop: Optional[List[str]] = None,
        presence_penalty: Optional[float] = None,
        frequency_penalty: Optional[float] = None,
        stream: Optional[bool] = None,
        model: Optional[str] = None,
        data_sources: Optional[List["_models.AzureChatExtensionConfiguration"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ChatMessage(_model_base.Model):
    """A single, role-attributed message within a chat completion interaction.

    All required parameters must be populated in order to send to Azure.

    :ivar role: The role associated with this message payload. Required. Known values are:
     "system", "assistant", "user", "function", and "tool".
    :vartype role: str or ~azure.openai.models.ChatRole
    :ivar content: The text associated with this message payload. Required.
    :vartype content: str
    :ivar name: The name of the author of this message. ``name`` is required if role is
     ``function``\ , and it should be the name of the
     function whose response is in the ``content``. May contain a-z, A-Z, 0-9, and underscores,
     with a maximum length of
     64 characters.
    :vartype name: str
    :ivar function_call: The name and arguments of a function that should be called, as generated
     by the model.
    :vartype function_call: ~azure.openai.models.FunctionCall
    :ivar context: Additional context data associated with a chat message when requesting chat
     completions using compatible Azure
       OpenAI chat extensions. This includes information like the intermediate data source
     retrievals used to service a
       request.
       This context information is only populated when using Azure OpenAI with chat extensions
     capabilities configured.
    :vartype context: ~azure.openai.models.AzureChatExtensionsMessageContext
    """

    role: Union[str, "_models.ChatRole"] = rest_field()
    """The role associated with this message payload. Required. Known values are: \"system\",
     \"assistant\", \"user\", \"function\", and \"tool\"."""
    content: str = rest_field()
    """The text associated with this message payload. Required."""
    name: Optional[str] = rest_field()
    """The name of the author of this message. ``name`` is required if role is ``function``\ , and it
     should be the name of the
     function whose response is in the ``content``. May contain a-z, A-Z, 0-9, and underscores, with
     a maximum length of
     64 characters."""
    function_call: Optional["_models.FunctionCall"] = rest_field()
    """The name and arguments of a function that should be called, as generated by the model."""
    context: Optional["_models.AzureChatExtensionsMessageContext"] = rest_field()
    """Additional context data associated with a chat message when requesting chat completions using
     compatible Azure
       OpenAI chat extensions. This includes information like the intermediate data source
     retrievals used to service a
       request.
       This context information is only populated when using Azure OpenAI with chat extensions
     capabilities configured."""

    @overload
    def __init__(
        self,
        *,
        role: Union[str, "_models.ChatRole"],
        content: str,
        name: Optional[str] = None,
        function_call: Optional["_models.FunctionCall"] = None,
        context: Optional["_models.AzureChatExtensionsMessageContext"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Choice(_model_base.Model):
    """The representation of a single prompt completion as part of an overall completions request.
    Generally, ``n`` choices are generated per provided prompt with a default value of 1.
    Token limits and other settings may limit the number of choices generated.

    All required parameters must be populated in order to send to Azure.

    :ivar text: The generated text for a given completions prompt. Required.
    :vartype text: str
    :ivar index: The ordered index associated with this completions choice. Required.
    :vartype index: int
    :ivar content_filter_results: Information about the content filtering category (hate, sexual,
     violence, self_harm), if it
     has been detected, as well as the severity level (very_low, low, medium, high-scale that
     determines the intensity and risk level of harmful content) and if it has been filtered or
     not.
    :vartype content_filter_results: ~azure.openai.models.ContentFilterResults
    :ivar logprobs: The log probabilities model for tokens associated with this completions choice.
     Required.
    :vartype logprobs: ~azure.openai.models.CompletionsLogProbabilityModel
    :ivar finish_reason: Reason for finishing. Required. Known values are: "stop", "length",
     "content_filter", and "function_call".
    :vartype finish_reason: str or ~azure.openai.models.CompletionsFinishReason
    """

    text: str = rest_field()
    """The generated text for a given completions prompt. Required."""
    index: int = rest_field()
    """The ordered index associated with this completions choice. Required."""
    content_filter_results: Optional["_models.ContentFilterResults"] = rest_field()
    """Information about the content filtering category (hate, sexual, violence, self_harm), if it
     has been detected, as well as the severity level (very_low, low, medium, high-scale that
     determines the intensity and risk level of harmful content) and if it has been filtered or not."""
    logprobs: "_models.CompletionsLogProbabilityModel" = rest_field()
    """The log probabilities model for tokens associated with this completions choice. Required."""
    finish_reason: Union[str, "_models.CompletionsFinishReason"] = rest_field()
    """Reason for finishing. Required. Known values are: \"stop\", \"length\", \"content_filter\", and
     \"function_call\"."""

    @overload
    def __init__(
        self,
        *,
        text: str,
        index: int,
        logprobs: "_models.CompletionsLogProbabilityModel",
        finish_reason: Union[str, "_models.CompletionsFinishReason"],
        content_filter_results: Optional["_models.ContentFilterResults"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Completions(_model_base.Model):
    """Representation of the response data from a completions request.
    Completions support a wide variety of tasks and generate text that continues from or
    "completes"
    provided prompt data.

    All required parameters must be populated in order to send to Azure.

    :ivar id: A unique identifier associated with this completions response. Required.
    :vartype id: str
    :ivar created: The first timestamp associated with generation activity for this completions
     response,
     represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970. Required.
    :vartype created: ~datetime.datetime
    :ivar prompt_filter_results: Content filtering results for zero or more prompts in the request.
     In a streaming request,
     results for different prompts may arrive at different times or in different orders.
    :vartype prompt_filter_results: list[~azure.openai.models.PromptFilterResult]
    :ivar choices: The collection of completions choices associated with this completions response.
     Generally, ``n`` choices are generated per provided prompt with a default value of 1.
     Token limits and other settings may limit the number of choices generated. Required.
    :vartype choices: list[~azure.openai.models.Choice]
    :ivar usage: Usage information for tokens processed and generated as part of this completions
     operation. Required.
    :vartype usage: ~azure.openai.models.CompletionsUsage
    """

    id: str = rest_field()
    """A unique identifier associated with this completions response. Required."""
    created: datetime.datetime = rest_field(format="unix-timestamp")
    """The first timestamp associated with generation activity for this completions response,
     represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970. Required."""
    prompt_filter_results: Optional[List["_models.PromptFilterResult"]] = rest_field()
    """Content filtering results for zero or more prompts in the request. In a streaming request,
     results for different prompts may arrive at different times or in different orders."""
    choices: List["_models.Choice"] = rest_field()
    """The collection of completions choices associated with this completions response.
     Generally, ``n`` choices are generated per provided prompt with a default value of 1.
     Token limits and other settings may limit the number of choices generated. Required."""
    usage: "_models.CompletionsUsage" = rest_field()
    """Usage information for tokens processed and generated as part of this completions operation.
     Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        created: datetime.datetime,
        choices: List["_models.Choice"],
        usage: "_models.CompletionsUsage",
        prompt_filter_results: Optional[List["_models.PromptFilterResult"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CompletionsLogProbabilityModel(_model_base.Model):
    """Representation of a log probabilities model for a completions generation.

    All required parameters must be populated in order to send to Azure.

    :ivar tokens: The textual forms of tokens evaluated in this probability model. Required.
    :vartype tokens: list[str]
    :ivar token_logprobs: A collection of log probability values for the tokens in this completions
     data. Required.
    :vartype token_logprobs: list[float]
    :ivar top_logprobs: A mapping of tokens to maximum log probability values in this completions
     data. Required.
    :vartype top_logprobs: list[dict[str, float]]
    :ivar text_offset: The text offsets associated with tokens in this completions data. Required.
    :vartype text_offset: list[int]
    """

    tokens: List[str] = rest_field()
    """The textual forms of tokens evaluated in this probability model. Required."""
    token_logprobs: List[float] = rest_field()
    """A collection of log probability values for the tokens in this completions data. Required."""
    top_logprobs: List[Dict[str, float]] = rest_field()
    """A mapping of tokens to maximum log probability values in this completions data. Required."""
    text_offset: List[int] = rest_field()
    """The text offsets associated with tokens in this completions data. Required."""

    @overload
    def __init__(
        self,
        *,
        tokens: List[str],
        token_logprobs: List[float],
        top_logprobs: List[Dict[str, float]],
        text_offset: List[int],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CompletionsOptions(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """The configuration information for a completions request.
    Completions support a wide variety of tasks and generate text that continues from or
    "completes"
    provided prompt data.

    All required parameters must be populated in order to send to Azure.

    :ivar prompt: The prompts to generate completions from. Required.
    :vartype prompt: list[str]
    :ivar max_tokens: The maximum number of tokens to generate.
    :vartype max_tokens: int
    :ivar temperature: The sampling temperature to use that controls the apparent creativity of
     generated completions.
     Higher values will make output more random while lower values will make results more focused
     and deterministic.
     It is not recommended to modify temperature and top_p for the same completions request as the
     interaction of these two settings is difficult to predict.
    :vartype temperature: float
    :ivar top_p: An alternative to sampling with temperature called nucleus sampling. This value
     causes the
     model to consider the results of tokens with the provided probability mass. As an example, a
     value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     considered.
     It is not recommended to modify temperature and top_p for the same completions request as the
     interaction of these two settings is difficult to predict.
    :vartype top_p: float
    :ivar logit_bias: A map between GPT token IDs and bias scores that influences the probability
     of specific tokens
     appearing in a completions response. Token IDs are computed via external tokenizer tools,
     while
     bias scores reside in the range of -100 to 100 with minimum and maximum values corresponding
     to
     a full ban or exclusive selection of a token, respectively. The exact behavior of a given bias
     score varies by model.
    :vartype logit_bias: dict[str, int]
    :ivar user: An identifier for the caller or end user of the operation. This may be used for
     tracking
     or rate-limiting purposes.
    :vartype user: str
    :ivar n: The number of completions choices that should be generated per provided prompt as part
     of an
     overall completions response.
     Because this setting can generate many completions, it may quickly consume your token quota.
     Use carefully and ensure reasonable settings for max_tokens and stop.
    :vartype n: int
    :ivar logprobs: A value that controls the emission of log probabilities for the provided number
     of most likely
     tokens within a completions response.
    :vartype logprobs: int
    :ivar echo: A value specifying whether completions responses should include input prompts as
     prefixes to
     their generated output.
    :vartype echo: bool
    :ivar stop: A collection of textual sequences that will end completions generation.
    :vartype stop: list[str]
    :ivar presence_penalty: A value that influences the probability of generated tokens appearing
     based on their existing
     presence in generated text.
     Positive values will make tokens less likely to appear when they already exist and increase
     the
     model's likelihood to output new topics.
    :vartype presence_penalty: float
    :ivar frequency_penalty: A value that influences the probability of generated tokens appearing
     based on their cumulative
     frequency in generated text.
     Positive values will make tokens less likely to appear as their frequency increases and
     decrease the likelihood of the model repeating the same statements verbatim.
    :vartype frequency_penalty: float
    :ivar best_of: A value that controls how many completions will be internally generated prior to
     response
     formulation.
     When used together with n, best_of controls the number of candidate completions and must be
     greater than n.
     Because this setting can generate many completions, it may quickly consume your token quota.
     Use carefully and ensure reasonable settings for max_tokens and stop.
    :vartype best_of: int
    :ivar stream: A value indicating whether chat completions should be streamed for this request.
    :vartype stream: bool
    :ivar model: The model name to provide as part of this completions request.
     Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     resource URI that's connected to.
    :vartype model: str
    """

    prompt: List[str] = rest_field()
    """The prompts to generate completions from. Required."""
    max_tokens: Optional[int] = rest_field()
    """The maximum number of tokens to generate."""
    temperature: Optional[float] = rest_field()
    """The sampling temperature to use that controls the apparent creativity of generated completions.
     Higher values will make output more random while lower values will make results more focused
     and deterministic.
     It is not recommended to modify temperature and top_p for the same completions request as the
     interaction of these two settings is difficult to predict."""
    top_p: Optional[float] = rest_field()
    """An alternative to sampling with temperature called nucleus sampling. This value causes the
     model to consider the results of tokens with the provided probability mass. As an example, a
     value of 0.15 will cause only the tokens comprising the top 15% of probability mass to be
     considered.
     It is not recommended to modify temperature and top_p for the same completions request as the
     interaction of these two settings is difficult to predict."""
    logit_bias: Optional[Dict[str, int]] = rest_field()
    """A map between GPT token IDs and bias scores that influences the probability of specific tokens
     appearing in a completions response. Token IDs are computed via external tokenizer tools, while
     bias scores reside in the range of -100 to 100 with minimum and maximum values corresponding to
     a full ban or exclusive selection of a token, respectively. The exact behavior of a given bias
     score varies by model."""
    user: Optional[str] = rest_field()
    """An identifier for the caller or end user of the operation. This may be used for tracking
     or rate-limiting purposes."""
    n: Optional[int] = rest_field()
    """The number of completions choices that should be generated per provided prompt as part of an
     overall completions response.
     Because this setting can generate many completions, it may quickly consume your token quota.
     Use carefully and ensure reasonable settings for max_tokens and stop."""
    logprobs: Optional[int] = rest_field()
    """A value that controls the emission of log probabilities for the provided number of most likely
     tokens within a completions response."""
    echo: Optional[bool] = rest_field()
    """A value specifying whether completions responses should include input prompts as prefixes to
     their generated output."""
    stop: Optional[List[str]] = rest_field()
    """A collection of textual sequences that will end completions generation."""
    presence_penalty: Optional[float] = rest_field()
    """A value that influences the probability of generated tokens appearing based on their existing
     presence in generated text.
     Positive values will make tokens less likely to appear when they already exist and increase the
     model's likelihood to output new topics."""
    frequency_penalty: Optional[float] = rest_field()
    """A value that influences the probability of generated tokens appearing based on their cumulative
     frequency in generated text.
     Positive values will make tokens less likely to appear as their frequency increases and
     decrease the likelihood of the model repeating the same statements verbatim."""
    best_of: Optional[int] = rest_field()
    """A value that controls how many completions will be internally generated prior to response
     formulation.
     When used together with n, best_of controls the number of candidate completions and must be
     greater than n.
     Because this setting can generate many completions, it may quickly consume your token quota.
     Use carefully and ensure reasonable settings for max_tokens and stop."""
    stream: Optional[bool] = rest_field()
    """A value indicating whether chat completions should be streamed for this request."""
    model: Optional[str] = rest_field()
    """The model name to provide as part of this completions request.
     Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     resource URI that's connected to."""

    @overload
    def __init__(
        self,
        *,
        prompt: List[str],
        max_tokens: Optional[int] = None,
        temperature: Optional[float] = None,
        top_p: Optional[float] = None,
        logit_bias: Optional[Dict[str, int]] = None,
        user: Optional[str] = None,
        n: Optional[int] = None,
        logprobs: Optional[int] = None,
        echo: Optional[bool] = None,
        stop: Optional[List[str]] = None,
        presence_penalty: Optional[float] = None,
        frequency_penalty: Optional[float] = None,
        best_of: Optional[int] = None,
        stream: Optional[bool] = None,
        model: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CompletionsUsage(_model_base.Model):
    """Representation of the token counts processed for a completions request.
    Counts consider all tokens across prompts, choices, choice alternates, best_of generations, and
    other consumers.

    All required parameters must be populated in order to send to Azure.

    :ivar completion_tokens: The number of tokens generated across all completions emissions.
     Required.
    :vartype completion_tokens: int
    :ivar prompt_tokens: The number of tokens in the provided prompts for the completions request.
     Required.
    :vartype prompt_tokens: int
    :ivar total_tokens: The total number of tokens processed for the completions request and
     response. Required.
    :vartype total_tokens: int
    """

    completion_tokens: int = rest_field()
    """The number of tokens generated across all completions emissions. Required."""
    prompt_tokens: int = rest_field()
    """The number of tokens in the provided prompts for the completions request. Required."""
    total_tokens: int = rest_field()
    """The total number of tokens processed for the completions request and response. Required."""

    @overload
    def __init__(
        self,
        *,
        completion_tokens: int,
        prompt_tokens: int,
        total_tokens: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContentFilterResult(_model_base.Model):
    """Information about filtered content severity level and if it has been filtered or not.

    All required parameters must be populated in order to send to Azure.

    :ivar severity: Ratings for the intensity and risk level of filtered content. Required. Known
     values are: "safe", "low", "medium", and "high".
    :vartype severity: str or ~azure.openai.models.ContentFilterSeverity
    :ivar filtered: A value indicating whether or not the content has been filtered. Required.
    :vartype filtered: bool
    """

    severity: Union[str, "_models.ContentFilterSeverity"] = rest_field()
    """Ratings for the intensity and risk level of filtered content. Required. Known values are:
     \"safe\", \"low\", \"medium\", and \"high\"."""
    filtered: bool = rest_field()
    """A value indicating whether or not the content has been filtered. Required."""

    @overload
    def __init__(
        self,
        *,
        severity: Union[str, "_models.ContentFilterSeverity"],
        filtered: bool,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ContentFilterResults(_model_base.Model):
    """Information about the content filtering category, if it has been detected.

    :ivar sexual: Describes language related to anatomical organs and genitals, romantic
     relationships,
      acts portrayed in erotic or affectionate terms, physical sexual acts, including
      those portrayed as an assault or a forced sexual violent act against one’s will,
      prostitution, pornography, and abuse.
    :vartype sexual: ~azure.openai.models.ContentFilterResult
    :ivar violence: Describes language related to physical actions intended to hurt, injure,
     damage, or
     kill someone or something; describes weapons, etc.
    :vartype violence: ~azure.openai.models.ContentFilterResult
    :ivar hate: Describes language attacks or uses that include pejorative or discriminatory
     language
     with reference to a person or identity group on the basis of certain differentiating
     attributes of these groups including but not limited to race, ethnicity, nationality,
     gender identity and expression, sexual orientation, religion, immigration status, ability
     status, personal appearance, and body size.
    :vartype hate: ~azure.openai.models.ContentFilterResult
    :ivar self_harm: Describes language related to physical actions intended to purposely hurt,
     injure,
     or damage one’s body, or kill oneself.
    :vartype self_harm: ~azure.openai.models.ContentFilterResult
    :ivar error: Describes an error returned if the content filtering system is
     down or otherwise unable to complete the operation in time.
    :vartype error: ~azure.openai.models.Error
    """

    sexual: Optional["_models.ContentFilterResult"] = rest_field()
    """Describes language related to anatomical organs and genitals, romantic relationships,
      acts portrayed in erotic or affectionate terms, physical sexual acts, including
      those portrayed as an assault or a forced sexual violent act against one’s will,
      prostitution, pornography, and abuse."""
    violence: Optional["_models.ContentFilterResult"] = rest_field()
    """Describes language related to physical actions intended to hurt, injure, damage, or
     kill someone or something; describes weapons, etc."""
    hate: Optional["_models.ContentFilterResult"] = rest_field()
    """Describes language attacks or uses that include pejorative or discriminatory language
     with reference to a person or identity group on the basis of certain differentiating
     attributes of these groups including but not limited to race, ethnicity, nationality,
     gender identity and expression, sexual orientation, religion, immigration status, ability
     status, personal appearance, and body size."""
    self_harm: Optional["_models.ContentFilterResult"] = rest_field()
    """Describes language related to physical actions intended to purposely hurt, injure,
     or damage one’s body, or kill oneself."""
    error: Optional["_models.Error"] = rest_field()
    """Describes an error returned if the content filtering system is
     down or otherwise unable to complete the operation in time."""

    @overload
    def __init__(
        self,
        *,
        sexual: Optional["_models.ContentFilterResult"] = None,
        violence: Optional["_models.ContentFilterResult"] = None,
        hate: Optional["_models.ContentFilterResult"] = None,
        self_harm: Optional["_models.ContentFilterResult"] = None,
        error: Optional["_models.Error"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EmbeddingItem(_model_base.Model):
    """Representation of a single embeddings relatedness comparison.

    All required parameters must be populated in order to send to Azure.

    :ivar embedding: List of embeddings value for the input prompt. These represent a measurement
     of the
     vector-based relatedness of the provided input. Required.
    :vartype embedding: list[float]
    :ivar index: Index of the prompt to which the EmbeddingItem corresponds. Required.
    :vartype index: int
    """

    embedding: List[float] = rest_field()
    """List of embeddings value for the input prompt. These represent a measurement of the
     vector-based relatedness of the provided input. Required."""
    index: int = rest_field()
    """Index of the prompt to which the EmbeddingItem corresponds. Required."""

    @overload
    def __init__(
        self,
        *,
        embedding: List[float],
        index: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Embeddings(_model_base.Model):
    """Representation of the response data from an embeddings request.
    Embeddings measure the relatedness of text strings and are commonly used for search,
    clustering,
    recommendations, and other similar scenarios.

    All required parameters must be populated in order to send to Azure.

    :ivar data: Embedding values for the prompts submitted in the request. Required.
    :vartype data: list[~azure.openai.models.EmbeddingItem]
    :ivar usage: Usage counts for tokens input using the embeddings API. Required.
    :vartype usage: ~azure.openai.models.EmbeddingsUsage
    """

    data: List["_models.EmbeddingItem"] = rest_field()
    """Embedding values for the prompts submitted in the request. Required."""
    usage: "_models.EmbeddingsUsage" = rest_field()
    """Usage counts for tokens input using the embeddings API. Required."""

    @overload
    def __init__(
        self,
        *,
        data: List["_models.EmbeddingItem"],
        usage: "_models.EmbeddingsUsage",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EmbeddingsOptions(_model_base.Model):
    """The configuration information for an embeddings request.
    Embeddings measure the relatedness of text strings and are commonly used for search,
    clustering,
    recommendations, and other similar scenarios.

    All required parameters must be populated in order to send to Azure.

    :ivar user: An identifier for the caller or end user of the operation. This may be used for
     tracking
     or rate-limiting purposes.
    :vartype user: str
    :ivar model: The model name to provide as part of this embeddings request.
     Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     resource URI that's connected to.
    :vartype model: str
    :ivar input: Input texts to get embeddings for, encoded as a an array of strings.
     Each input must not exceed 2048 tokens in length.

     Unless you are embedding code, we suggest replacing newlines (\n) in your input with a single
     space,
     as we have observed inferior results when newlines are present. Required.
    :vartype input: list[str]
    """

    user: Optional[str] = rest_field()
    """An identifier for the caller or end user of the operation. This may be used for tracking
     or rate-limiting purposes."""
    model: Optional[str] = rest_field()
    """The model name to provide as part of this embeddings request.
     Not applicable to Azure OpenAI, where deployment information should be included in the Azure
     resource URI that's connected to."""
    input: List[str] = rest_field()
    """Input texts to get embeddings for, encoded as a an array of strings.
     Each input must not exceed 2048 tokens in length.
     
     Unless you are embedding code, we suggest replacing newlines (\n) in your input with a single
     space,
     as we have observed inferior results when newlines are present. Required."""

    @overload
    def __init__(
        self,
        *,
        input: List[str],
        user: Optional[str] = None,
        model: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class EmbeddingsUsage(_model_base.Model):
    """Measurement of the amount of tokens used in this request and response.

    All required parameters must be populated in order to send to Azure.

    :ivar prompt_tokens: Number of tokens sent in the original request. Required.
    :vartype prompt_tokens: int
    :ivar total_tokens: Total number of tokens transacted in this request/response. Required.
    :vartype total_tokens: int
    """

    prompt_tokens: int = rest_field()
    """Number of tokens sent in the original request. Required."""
    total_tokens: int = rest_field()
    """Total number of tokens transacted in this request/response. Required."""

    @overload
    def __init__(
        self,
        *,
        prompt_tokens: int,
        total_tokens: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Error(_model_base.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
    :vartype details: list[~azure.openai.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~azure.openai.models.InnerError
    """

    code: str = rest_field()
    """One of a server-defined set of error codes. Required."""
    message: str = rest_field()
    """A human-readable representation of the error. Required."""
    target: Optional[str] = rest_field()
    """The target of the error."""
    details: Optional[List["_models.Error"]] = rest_field()
    """An array of details about specific errors that led to this reported error."""
    innererror: Optional["_models.InnerError"] = rest_field()
    """An object containing more specific information than the current object about the error."""

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["_models.Error"]] = None,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FunctionCall(_model_base.Model):
    """The name and arguments of a function that should be called, as generated by the model.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the function to call. Required.
    :vartype name: str
    :ivar arguments: The arguments to call the function with, as generated by the model in JSON
     format.
     Note that the model does not always generate valid JSON, and may hallucinate parameters
     not defined by your function schema. Validate the arguments in your code before calling
     your function. Required.
    :vartype arguments: str
    """

    name: str = rest_field()
    """The name of the function to call. Required."""
    arguments: str = rest_field()
    """The arguments to call the function with, as generated by the model in JSON format.
     Note that the model does not always generate valid JSON, and may hallucinate parameters
     not defined by your function schema. Validate the arguments in your code before calling
     your function. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        arguments: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FunctionDefinition(_model_base.Model):
    """The definition of a caller-specified function that chat completions may invoke in response to
    matching user input.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the function to be called. Required.
    :vartype name: str
    :ivar description: A description of what the function does. The model will use this description
     when selecting the function and
     interpreting its parameters.
    :vartype description: str
    :ivar parameters: The parameters the functions accepts, described as a JSON Schema object.
    :vartype parameters: any
    """

    name: str = rest_field()
    """The name of the function to be called. Required."""
    description: Optional[str] = rest_field()
    """A description of what the function does. The model will use this description when selecting the
     function and
     interpreting its parameters."""
    parameters: Optional[Any] = rest_field()
    """The parameters the functions accepts, described as a JSON Schema object."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        description: Optional[str] = None,
        parameters: Optional[Any] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FunctionName(_model_base.Model):
    """A structure that specifies the exact name of a specific, request-provided function to use when
    processing a chat
    completions operation.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the function to call. Required.
    :vartype name: str
    """

    name: str = rest_field()
    """The name of the function to call. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageGenerationOptions(_model_base.Model):
    """Represents the request data used to generate images.

    All required parameters must be populated in order to send to Azure.

    :ivar prompt: A description of the desired images. Required.
    :vartype prompt: str
    :ivar n: The number of images to generate (defaults to 1).
    :vartype n: int
    :ivar size: The desired size of the generated images. Must be one of 256x256, 512x512, or
     1024x1024 (defaults to 1024x1024). Known values are: "256x256", "512x512", and "1024x1024".
    :vartype size: str or ~azure.openai.models.ImageSize
    :ivar response_format: The format in which image generation response items should be presented.
       Azure OpenAI only supports URL response items. Known values are: "url" and "b64_json".
    :vartype response_format: str or ~azure.openai.models.ImageGenerationResponseFormat
    :ivar user: A unique identifier representing your end-user, which can help to monitor and
     detect abuse.
    :vartype user: str
    """

    prompt: str = rest_field()
    """A description of the desired images. Required."""
    n: Optional[int] = rest_field()
    """The number of images to generate (defaults to 1)."""
    size: Optional[Union[str, "_models.ImageSize"]] = rest_field()
    """The desired size of the generated images. Must be one of 256x256, 512x512, or 1024x1024
     (defaults to 1024x1024). Known values are: \"256x256\", \"512x512\", and \"1024x1024\"."""
    response_format: Optional[Union[str, "_models.ImageGenerationResponseFormat"]] = rest_field()
    """The format in which image generation response items should be presented.
       Azure OpenAI only supports URL response items. Known values are: \"url\" and \"b64_json\"."""
    user: Optional[str] = rest_field()
    """A unique identifier representing your end-user, which can help to monitor and detect abuse."""


class ImageGenerations(_model_base.Model):
    """The result of the operation if the operation succeeded.

    All required parameters must be populated in order to send to Azure.

    :ivar created: A timestamp when this job or item was created (in unix epochs). Required.
    :vartype created: ~datetime.datetime
    :ivar data: The images generated by the operator. Required. Is either a [ImageLocation] type or
     a [ImagePayload] type.
    :vartype data: list[~azure.openai.models.ImageLocation] or
     list[~azure.openai.models.ImagePayload]
    """

    created: datetime.datetime = rest_field(format="unix-timestamp")
    """A timestamp when this job or item was created (in unix epochs). Required."""
    data: Union[List["_models.ImageLocation"], List["_models.ImagePayload"]] = rest_field()
    """The images generated by the operator. Required. Is either a [ImageLocation] type or a
     [ImagePayload] type."""


class ImageLocation(_model_base.Model):
    """An image response item that provides a URL from which an image may be accessed.

    All required parameters must be populated in order to send to Azure.

    :ivar url: The URL that provides temporary access to download the generated image. Required.
    :vartype url: str
    """

    url: str = rest_field()
    """The URL that provides temporary access to download the generated image. Required."""

    @overload
    def __init__(
        self,
        *,
        url: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImagePayload(_model_base.Model):
    """An image response item that directly represents the image data as a base64-encoded string.

    All required parameters must be populated in order to send to Azure.

    :ivar base64_data: The complete data for an image represented as a base64-encoded string.
     Required.
    :vartype base64_data: str
    """

    base64_data: str = rest_field(name="b64_json")
    """The complete data for an image represented as a base64-encoded string. Required."""

    @overload
    def __init__(
        self,
        *,
        base64_data: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InnerError(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API
    guidelines -
    https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    :ivar code: One of a server-defined set of error codes.
    :vartype code: str
    :ivar innererror: Inner error.
    :vartype innererror: ~azure.openai.models.InnerError
    """

    code: Optional[str] = rest_field()
    """One of a server-defined set of error codes."""
    innererror: Optional["_models.InnerError"] = rest_field()
    """Inner error."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PromptFilterResult(_model_base.Model):
    """Content filtering results for a single prompt in the request.

    All required parameters must be populated in order to send to Azure.

    :ivar prompt_index: The index of this prompt in the set of prompt results. Required.
    :vartype prompt_index: int
    :ivar content_filter_results: Content filtering results for this prompt.
    :vartype content_filter_results: ~azure.openai.models.ContentFilterResults
    """

    prompt_index: int = rest_field()
    """The index of this prompt in the set of prompt results. Required."""
    content_filter_results: Optional["_models.ContentFilterResults"] = rest_field()
    """Content filtering results for this prompt."""

    @overload
    def __init__(
        self,
        *,
        prompt_index: int,
        content_filter_results: Optional["_models.ContentFilterResults"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
