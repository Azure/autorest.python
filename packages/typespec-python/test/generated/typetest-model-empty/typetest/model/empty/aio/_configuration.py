# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, cast

from azure.core.configuration import Configuration
from azure.core.pipeline import policies
from azure.core.rest import HttpRequest, HttpResponse

from .._version import VERSION


class EmptyClientConfiguration(  # pylint: disable=too-many-instance-attributes
    Configuration[HttpRequest, HttpResponse]
):
    """Configuration for EmptyClient.

    Note that all parameters used to create this instance are saved as instance
    attributes.
    """

    def __init__(self, **kwargs: Any) -> None:
        super(EmptyClientConfiguration, self).__init__(**kwargs)

        kwargs.setdefault("sdk_moniker", "typetest-model-empty/{}".format(VERSION))
        self._configure(**kwargs)

    def _configure(self, **kwargs: Any) -> None:
        self.user_agent_policy = kwargs.get("user_agent_policy") or cast(
            policies.SansIOHTTPPolicy[HttpRequest, HttpResponse], policies.UserAgentPolicy(**kwargs)
        )
        self.headers_policy = kwargs.get("headers_policy") or cast(
            policies.SansIOHTTPPolicy[HttpRequest, HttpResponse], policies.HeadersPolicy(**kwargs)
        )
        self.proxy_policy = kwargs.get("proxy_policy") or cast(
            policies.SansIOHTTPPolicy[HttpRequest, HttpResponse], policies.ProxyPolicy(**kwargs)
        )
        self.logging_policy = kwargs.get("logging_policy") or cast(
            policies.SansIOHTTPPolicy[HttpRequest, HttpResponse], policies.NetworkTraceLoggingPolicy(**kwargs)
        )
        self.http_logging_policy = kwargs.get("http_logging_policy") or cast(
            policies.SansIOHTTPPolicy[HttpRequest, HttpResponse], policies.HttpLoggingPolicy(**kwargs)
        )
        self.retry_policy = kwargs.get("retry_policy") or cast(
            policies.AsyncHTTPPolicy[HttpRequest, HttpResponse], policies.AsyncRetryPolicy(**kwargs)
        )
        self.custom_hook_policy = kwargs.get("custom_hook_policy") or cast(
            policies.SansIOHTTPPolicy[HttpRequest, HttpResponse], policies.CustomHookPolicy(**kwargs)
        )
        self.redirect_policy = kwargs.get("redirect_policy") or cast(
            policies.AsyncHTTPPolicy[HttpRequest, HttpResponse], policies.AsyncRedirectPolicy(**kwargs)
        )
        self.authentication_policy = kwargs.get("authentication_policy")
