# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# coding: utf-8
from setuptools import setup, find_packages


PACKAGE_NAME = "resiliency-srv-driven2"
version = "1.0.0b1"
setup(
    name=PACKAGE_NAME,
    version=version,
    description="resiliency-srv-driven2",
    author_email="",
    url="",
    keywords="azure, azure sdk",
    packages=find_packages(),
    include_package_data=True,
    install_requires=[
        "isodate<1.0.0,>=0.6.1",
        "azure-core<2.0.0,>=1.24.0",
        "typing-extensions>=4.3.0; python_version<'3.8.0'",
    ],
    long_description="""\
    Test that we can grow up a service spec and service deployment into a multi-versioned service with full client support.

There are three concepts that should be clarified:


#. Client spec version: refers to the spec that the client is generated from. 'v1' is a client generated from old.tsp and 'v2' is a client generated from main.tsp.
#. Service deployment version: refers to a deployment version of the service. 'v1' represents the initial deployment of the service with a single api version. 'v2' represents the new deployment of a service with multiple api versions
#. Api version: The initial deployment of the service only supports api version 'v1'. The new deployment of the service supports api versions 'v1' and 'v2'.

We test the following configurations from this service spec:


* A client generated from the second service spec can call the second deployment of a service with api version v1
* A client generated from the second service spec can call the second deployment of a service with api version v2.
    """,
)
