# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import RepeatabilityClientMixinABC

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_repeatability_immediate_success_request(
    *, repeatability_request_i_d: str, repeatability_first_sent: datetime.datetime, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/special-headers/repeatability/immediateSuccess"

    # Construct headers
    _headers["Repeatability-Request-ID"] = _SERIALIZER.header(
        "repeatability_request_i_d", repeatability_request_i_d, "str"
    )
    _headers["Repeatability-First-Sent"] = _SERIALIZER.header(
        "repeatability_first_sent", repeatability_first_sent, "rfc-1123"
    )

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


class RepeatabilityClientOperationsMixin(RepeatabilityClientMixinABC):
    @distributed_trace
    def immediate_success(  # pylint: disable=inconsistent-return-statements
        self, *, repeatability_request_i_d: str, repeatability_first_sent: datetime.datetime, **kwargs: Any
    ) -> None:
        """Check we recognize Repeatability-Request-ID and Repeatability-First-Sent.

        :keyword repeatability_request_i_d: Required.
        :paramtype repeatability_request_i_d: str
        :keyword repeatability_first_sent: Required.
        :paramtype repeatability_first_sent: ~datetime.datetime
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_repeatability_immediate_success_request(
            repeatability_request_i_d=repeatability_request_i_d,
            repeatability_first_sent=repeatability_first_sent,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Repeatability-Result"] = self._deserialize(
            "str", response.headers.get("Repeatability-Result")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)
