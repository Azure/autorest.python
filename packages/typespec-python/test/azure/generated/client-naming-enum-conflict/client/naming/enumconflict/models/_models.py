# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Any, Mapping, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class FirstModel(_Model):
    """FirstModel.

    :ivar status: Status from first namespace. Required. Known values are: "active" and "inactive".
    :vartype status: str or ~client.naming.enumconflict.models.Status
    :ivar name: Name of the item. Required.
    :vartype name: str
    """

    status: Union[str, "_models.Status"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status from first namespace. Required. Known values are: \"active\" and \"inactive\"."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the item. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.Status"],
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecondModel(_Model):
    """SecondModel.

    :ivar status: Status from second namespace. Required. Known values are: "running" and
     "stopped".
    :vartype status: str or ~client.naming.enumconflict.models.SecondStatus
    :ivar description: Description of the item. Required.
    :vartype description: str
    """

    status: Union[str, "_models.SecondStatus"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status from second namespace. Required. Known values are: \"running\" and \"stopped\"."""
    description: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the item. Required."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.SecondStatus"],
        description: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
