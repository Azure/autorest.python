# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, List, Optional, Type, TypeVar, Union, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import SdkJSONEncoder, _deserialize
from ...operations._operations import (
    build_basic_create_or_replace_request,
    build_basic_create_or_update_request,
    build_basic_delete_request,
    build_basic_export_request,
    build_basic_get_request,
    build_basic_list_request,
    build_basic_list_with_custom_page_model_request,
    build_basic_list_with_page_request,
    build_basic_list_with_parameters_request,
    build_two_models_as_page_item_list_first_item_request,
    build_two_models_as_page_item_list_second_item_request,
)
from .._vendor import BasicClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class TwoModelsAsPageItemOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~specs.azure.core.basic.aio.BasicClient`'s
        :attr:`two_models_as_page_item` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_first_item(self, **kwargs: Any) -> AsyncIterable["_models.FirstItem"]:
        """Two operations with two different page item types should be successfully generated. Should
        generate model for FirstItem.

        :return: An iterator like instance of FirstItem
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.FirstItem]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": 0  # The id of the item. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.FirstItem]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_two_models_as_page_item_list_first_item_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.FirstItem], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_second_item(self, **kwargs: Any) -> AsyncIterable["_models.SecondItem"]:
        """Two operations with two different page item types should be successfully generated. Should
        generate model for SecondItem.

        :return: An iterator like instance of SecondItem
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.SecondItem]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "name": "str"  # The name of the item. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.SecondItem]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_two_models_as_page_item_list_second_item_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.SecondItem], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)


class BasicClientOperationsMixin(BasicClientMixinABC):

    @overload
    async def create_or_update(
        self, id: int, resource: _models.User, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.User:
        """Adds a user or updates a user's fields.

        Creates or updates a User.

        :param id: The user's id. Required.
        :type id: int
        :param resource: The resource instance. Required.
        :type resource: ~specs.azure.core.basic.models.User
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }

                # response body for status code(s): 201, 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @overload
    async def create_or_update(
        self, id: int, resource: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.User:
        """Adds a user or updates a user's fields.

        Creates or updates a User.

        :param id: The user's id. Required.
        :type id: int
        :param resource: The resource instance. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @overload
    async def create_or_update(
        self, id: int, resource: IO[bytes], *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> _models.User:
        """Adds a user or updates a user's fields.

        Creates or updates a User.

        :param id: The user's id. Required.
        :type id: int
        :param resource: The resource instance. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def create_or_update(
        self, id: int, resource: Union[_models.User, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.User:
        """Adds a user or updates a user's fields.

        Creates or updates a User.

        :param id: The user's id. Required.
        :type id: int
        :param resource: The resource instance. Is one of the following types: User, JSON, IO[bytes]
         Required.
        :type resource: ~specs.azure.core.basic.models.User or JSON or IO[bytes]
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }

                # response body for status code(s): 201, 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.User] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_basic_create_or_update_request(
            id=id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.User, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.User, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def create_or_replace(
        self, id: int, resource: _models.User, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.User:
        """Adds a user or replaces a user's fields.

        Creates or replaces a User.

        :param id: The user's id. Required.
        :type id: int
        :param resource: The resource instance. Required.
        :type resource: ~specs.azure.core.basic.models.User
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }

                # response body for status code(s): 201, 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @overload
    async def create_or_replace(
        self, id: int, resource: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.User:
        """Adds a user or replaces a user's fields.

        Creates or replaces a User.

        :param id: The user's id. Required.
        :type id: int
        :param resource: The resource instance. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @overload
    async def create_or_replace(
        self, id: int, resource: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.User:
        """Adds a user or replaces a user's fields.

        Creates or replaces a User.

        :param id: The user's id. Required.
        :type id: int
        :param resource: The resource instance. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @distributed_trace_async
    async def create_or_replace(
        self, id: int, resource: Union[_models.User, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.User:
        """Adds a user or replaces a user's fields.

        Creates or replaces a User.

        :param id: The user's id. Required.
        :type id: int
        :param resource: The resource instance. Is one of the following types: User, JSON, IO[bytes]
         Required.
        :type resource: ~specs.azure.core.basic.models.User or JSON or IO[bytes]
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }

                # response body for status code(s): 201, 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.User] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_basic_create_or_replace_request(
            id=id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.User, response.json())

        if response.status_code == 201:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.User, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def get(self, id: int, **kwargs: Any) -> _models.User:
        """Gets a user.

        Gets a User.

        :param id: The user's id. Required.
        :type id: int
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.User] = kwargs.pop("cls", None)

        _request = build_basic_get_request(
            id=id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.User, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def list(
        self,
        *,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        orderby: Optional[List[str]] = None,
        filter: Optional[str] = None,
        select: Optional[List[str]] = None,
        expand: Optional[List[str]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.User"]:
        """Lists all users.

        Lists all Users.

        :keyword top: The number of result items to return. Default value is None.
        :paramtype top: int
        :keyword skip: The number of result items to skip. Default value is None.
        :paramtype skip: int
        :keyword orderby: Expressions that specify the order of returned results. Default value is
         None.
        :paramtype orderby: list[str]
        :keyword filter: Filter the result list using the given expression. Default value is None.
        :paramtype filter: str
        :keyword select: Select the specified fields to be included in the response. Default value is
         None.
        :paramtype select: list[str]
        :keyword expand: Expand the indicated resources into the response. Default value is None.
        :paramtype expand: list[str]
        :return: An iterator like instance of User
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.User]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.User]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_basic_list_request(
                    top=top,
                    skip=skip,
                    maxpagesize=maxpagesize,
                    orderby=orderby,
                    filter=filter,
                    select=select,
                    expand=expand,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.User], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_with_page(self, **kwargs: Any) -> AsyncIterable["_models.User"]:
        """List with Azure.Core.Page<>.

        :return: An iterator like instance of User
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.User]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.User]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_basic_list_with_page_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.User], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @overload
    def list_with_parameters(
        self,
        body_input: _models.ListItemInputBody,
        *,
        another: Optional[Union[str, _models.ListItemInputExtensibleEnum]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.User"]:
        """List with extensible enum parameter Azure.Core.Page<>.

        :param body_input: The body of the input. Required.
        :type body_input: ~specs.azure.core.basic.models.ListItemInputBody
        :keyword another: Another query parameter. Known values are: "First" and "Second". Default
         value is None.
        :paramtype another: str or ~specs.azure.core.basic.models.ListItemInputExtensibleEnum
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An iterator like instance of User
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.User]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_input = {
                    "inputName": "str"  # The name of the input. Required.
                }

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @overload
    def list_with_parameters(
        self,
        body_input: JSON,
        *,
        another: Optional[Union[str, _models.ListItemInputExtensibleEnum]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.User"]:
        """List with extensible enum parameter Azure.Core.Page<>.

        :param body_input: The body of the input. Required.
        :type body_input: JSON
        :keyword another: Another query parameter. Known values are: "First" and "Second". Default
         value is None.
        :paramtype another: str or ~specs.azure.core.basic.models.ListItemInputExtensibleEnum
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An iterator like instance of User
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.User]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @overload
    def list_with_parameters(
        self,
        body_input: IO[bytes],
        *,
        another: Optional[Union[str, _models.ListItemInputExtensibleEnum]] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.User"]:
        """List with extensible enum parameter Azure.Core.Page<>.

        :param body_input: The body of the input. Required.
        :type body_input: IO[bytes]
        :keyword another: Another query parameter. Known values are: "First" and "Second". Default
         value is None.
        :paramtype another: str or ~specs.azure.core.basic.models.ListItemInputExtensibleEnum
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An iterator like instance of User
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.User]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """

    @distributed_trace
    def list_with_parameters(
        self,
        body_input: Union[_models.ListItemInputBody, JSON, IO[bytes]],
        *,
        another: Optional[Union[str, _models.ListItemInputExtensibleEnum]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.User"]:
        """List with extensible enum parameter Azure.Core.Page<>.

        :param body_input: The body of the input. Is one of the following types: ListItemInputBody,
         JSON, IO[bytes] Required.
        :type body_input: ~specs.azure.core.basic.models.ListItemInputBody or JSON or IO[bytes]
        :keyword another: Another query parameter. Known values are: "First" and "Second". Default
         value is None.
        :paramtype another: str or ~specs.azure.core.basic.models.ListItemInputExtensibleEnum
        :return: An iterator like instance of User
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.User]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body_input = {
                    "inputName": "str"  # The name of the input. Required.
                }

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[List[_models.User]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})
        content_type = content_type or "application/json"
        _content = None
        if isinstance(body_input, (IOBase, bytes)):
            _content = body_input
        else:
            _content = json.dumps(body_input, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_basic_list_with_parameters_request(
                    another=another,
                    content_type=content_type,
                    api_version=self._config.api_version,
                    content=_content,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.User], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_with_custom_page_model(self, **kwargs: Any) -> AsyncIterable["_models.User"]:
        """List with custom page model.

        :return: An iterator like instance of User
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~specs.azure.core.basic.models.User]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[_models.User]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_basic_list_with_custom_page_model_request(
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                _request.url = self._client.format_url(_request.url)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                _request.url = self._client.format_url(_request.url)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.User], deserialized["items"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def delete(self, id: int, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Deletes a user.

        Deletes a User.

        :param id: The user's id. Required.
        :type id: int
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_basic_delete_request(
            id=id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace_async
    async def export(self, id: int, *, format: str, **kwargs: Any) -> _models.User:
        """Exports a user.

        Exports a User.

        :param id: The user's id. Required.
        :type id: int
        :keyword format: The format of the data. Required.
        :paramtype format: str
        :return: User. The User is compatible with MutableMapping
        :rtype: ~specs.azure.core.basic.models.User
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "etag": "str",  # The entity tag for this resource. Required.
                    "id": 0,  # The user's id. Required.
                    "name": "str",  # The user's name. Required.
                    "orders": [
                        {
                            "detail": "str",  # The user's order detail. Required.
                            "id": 0,  # The user's id. Required.
                            "userId": 0  # The user's id. Required.
                        }
                    ]
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.User] = kwargs.pop("cls", None)

        _request = build_basic_export_request(
            id=id,
            format=format,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        _request.url = self._client.format_url(_request.url)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.User, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
