# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AlternateTypePreparer
from testpreparer_async import AlternateTypeClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAlternateTypeExternalTypeOperationsAsync(AlternateTypeClientTestBaseAsync):
    @AlternateTypePreparer()
    @recorded_by_proxy_async
    async def test_external_type_get_model(self, alternatetype_endpoint):
        client = self.create_async_client(endpoint=alternatetype_endpoint)
        response = await client.external_type.get_model()

        # please add some check logic here by yourself
        # ...

    @AlternateTypePreparer()
    @recorded_by_proxy_async
    async def test_external_type_put_model(self, alternatetype_endpoint):
        client = self.create_async_client(endpoint=alternatetype_endpoint)
        response = await client.external_type.put_model(
            body="geojson.Feature(...)",
            content_type="str",
        )

        # please add some check logic here by yourself
        # ...

    @AlternateTypePreparer()
    @recorded_by_proxy_async
    async def test_external_type_get_property(self, alternatetype_endpoint):
        client = self.create_async_client(endpoint=alternatetype_endpoint)
        response = await client.external_type.get_property()

        # please add some check logic here by yourself
        # ...

    @AlternateTypePreparer()
    @recorded_by_proxy_async
    async def test_external_type_put_property(self, alternatetype_endpoint):
        client = self.create_async_client(endpoint=alternatetype_endpoint)
        response = await client.external_type.put_property(
            body={"additionalProperty": "str", "feature": "geojson.Feature(...)"},
        )

        # please add some check logic here by yourself
        # ...
