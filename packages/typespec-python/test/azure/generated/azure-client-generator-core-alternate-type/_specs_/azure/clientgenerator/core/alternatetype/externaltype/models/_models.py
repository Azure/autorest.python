# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Any, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from ..._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class Feature(_Model):
    """Feature.

    :ivar type: Required. Default value is "Feature".
    :vartype type: str
    :ivar geometry: Required.
    :vartype geometry:
     ~_specs_.azure.clientgenerator.core.alternatetype.externaltype.models.Geometry
    :ivar properties: Required.
    :vartype properties: dict[str, any]
    :ivar id: Is either a str type or a int type.
    :vartype id: str or int
    """

    type: Literal["Feature"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required. Default value is \"Feature\"."""
    geometry: "_models.Geometry" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    properties: dict[str, Any] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    id: Optional[Union[str, int]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Is either a str type or a int type."""

    @overload
    def __init__(
        self,
        *,
        geometry: "_models.Geometry",
        properties: dict[str, Any],
        id: Optional[Union[str, int]] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.type: Literal["Feature"] = "Feature"


class Geometry(_Model):
    """Geometry.

    :ivar type: Required.
    :vartype type: str
    :ivar coordinates: Required.
    :vartype coordinates: list[int]
    """

    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    coordinates: list[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        coordinates: list[int],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ModelWithFeatureProperty(_Model):
    """ModelWithFeatureProperty.

    :ivar feature: Required.
    :vartype feature: ~_specs_.azure.clientgenerator.core.alternatetype.externaltype.models.Feature
    :ivar additional_property: Required.
    :vartype additional_property: str
    """

    feature: "_models.Feature" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    additional_property: str = rest_field(
        name="additionalProperty", visibility=["read", "create", "update", "delete", "query"]
    )
    """Required."""

    @overload
    def __init__(
        self,
        *,
        feature: "_models.Feature",
        additional_property: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
