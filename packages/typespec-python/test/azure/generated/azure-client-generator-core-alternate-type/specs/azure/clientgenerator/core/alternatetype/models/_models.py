# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

from typing import Any, Mapping, overload

import geojson

from .._utils.model_base import Model as _Model, rest_field


class Geometry(_Model):
    """Geometry.

    :ivar type: Required.
    :vartype type: str
    :ivar coordinates: Required.
    :vartype coordinates: list[int]
    """

    type: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    coordinates: list[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        coordinates: list[int],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ModelWithFeatureProperty(_Model):
    """ModelWithFeatureProperty.

    :ivar feature: Required.
    :vartype feature: ~geojson.Feature
    :ivar additional_property: Required.
    :vartype additional_property: str
    """

    feature: geojson.Feature = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    additional_property: str = rest_field(
        name="additionalProperty", visibility=["read", "create", "update", "delete", "query"]
    )
    """Required."""

    @overload
    def __init__(
        self,
        *,
        feature: geojson.Feature,
        additional_property: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
