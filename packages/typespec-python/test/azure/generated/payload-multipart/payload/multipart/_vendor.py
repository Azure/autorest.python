# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from io import IOBase
import json
import sys
from typing import Any, List, Tuple, Union
import uuid

from ._model_base import Model, SdkJSONEncoder

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports


JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object

# file-like tuple could be `(filename, IO (or bytes))` or `(filename, IO (or bytes), content_type)`
FileType = Union[IOBase, bytes]
FileTuple = Union[Tuple[str, FileType], Tuple[str, FileType, str]]
MultiPartFile = Union[IOBase, bytes, FileTuple]
HandledMultiPartFile = Union[IOBase, FileTuple]


def multipart_file(file: MultiPartFile) -> HandledMultiPartFile:
    if isinstance(file, (IOBase, tuple)):
        return file
    return ("auto-name-" + str(uuid.uuid4()), file)


def multipart_data(data: Any) -> Any:
    if isinstance(data, (list, tuple, dict, Model)):
        return json.dumps(data, cls=SdkJSONEncoder, exclude_readonly=True)
    return data


def handle_multipart_form_data_model(
    body: Model, file_properties: List[str]
) -> JSON:  # pylint: disable=unsubscriptable-object
    """handle first layer of model.
    If its value is bytes or IO, replace it with raw value instead of serialized value.

    :param body: The model to handle.
    :type body: ._model_base.Model
    :param file_properties: The properties of the model that are file type.
    :type file_properties: list[str]
    :return: The handled model.
    :rtype: MutableMapping[str, Any]
    """
    result = body.as_dict()
    rest_name_attr = {v._rest_name: k for k, v in body._attr_to_rest_field.items()}  # pylint: disable=protected-access
    for rest_name in result.keys():
        attr = rest_name_attr.get(rest_name)
        if attr is not None and rest_name in file_properties:
            result[rest_name] = getattr(body, attr, None)
    return result


def handle_multipart_form_data_body(
    body: Union[Model, JSON], file_properties: List[str]
) -> List[Tuple[str, HandledMultiPartFile]]:
    """handle multipart form data body.

    :param body: The body to handle.
    :type body: ._model_base.Model or dict[str, Any]
    :param file_properties: The properties of the model that are file type.
    :type file_properties: list[str]
    :return: The handled body.
    :rtype: list[tuple[str, HandledMultiPartFile]]
    """
    _body = handle_multipart_form_data_model(body, file_properties) if isinstance(body, Model) else body
    files = []
    for filed_name, value in _body.items():
        if filed_name in file_properties:
            if isinstance(value, list):
                files.extend([(filed_name, multipart_file(i)) for i in value])
            files.append((filed_name, multipart_file(value)))
        else:
            files.append((filed_name, multipart_data(value)))
    return files
