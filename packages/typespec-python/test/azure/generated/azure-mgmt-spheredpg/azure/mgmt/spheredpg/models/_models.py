# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class ArmOperationStatus(_model_base.Model):
    """Standard ARM operation status response.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar status: The operation status. Required. Known values are: "Succeeded", "Failed", and
     "Canceled".
    :vartype status: str or ~azure.mgmt.spheredpg.models.ResourceProvisioningState
    :ivar name: The name of the  operationStatus resource.
    :vartype name: str
    :ivar start_time: Operation start time.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Operation complete time.
    :vartype end_time: ~datetime.datetime
    :ivar percent_complete: The progress made toward completing the operation.
    :vartype percent_complete: float
    :ivar error: Errors that occurred if the operation ended with Canceled or Failed status.
    :vartype error: ~azure.mgmt.spheredpg.models.ErrorDetail
    """

    status: Union[str, "_models.ResourceProvisioningState"] = rest_field()
    """The operation status. Required. Known values are: \"Succeeded\", \"Failed\", and \"Canceled\"."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the  operationStatus resource."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """Operation start time."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", visibility=["read"], format="rfc3339")
    """Operation complete time."""
    percent_complete: Optional[float] = rest_field(name="percentComplete", visibility=["read"])
    """The progress made toward completing the operation."""
    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read"])
    """Errors that occurred if the operation ended with Canceled or Failed status."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.ResourceProvisioningState"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ArmResourceBase(_model_base.Model):
    """Base class used for type definitions."""


class ArmResource(ArmResourceBase):
    """Common properties for all ARM resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    """

    id: str = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required."""
    type: str = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\". Required."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResourceBase(ArmResource):
    """The resource model definition for an Azure Resource Manager tracked top level resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Catalog(TrackedResourceBase):
    """An Azure Sphere catalog.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.spheredpg.models.CatalogProperties
    """

    properties: Optional["_models.CatalogProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    _flatten_items = ["provisioning_state"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CatalogProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        flatten_map = {k: kwargs.pop(k, None) for k in self._flatten_items}
        super().__init__(*args, **kwargs)
        for k, v in flatten_map.items():
            if v is not None:
                setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self._flatten_items:
            if self.properties:
                return getattr(self.properties, name)
            return None
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")


    def __setattr__(self, key: str, value: Any) -> None:
        if key in self._flatten_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)

class CatalogProperties(_model_base.Model):
    """Catalog properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.spheredpg.models.ProvisioningState
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""


class CatalogUpdate(_model_base.Model):
    """The type used for update operations of the Catalog.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProxyResourceBase(ArmResource):
    """The base proxy resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    """


class Certificate(ProxyResourceBase):
    """An certificate resource belonging to a catalog resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.spheredpg.models.CertificateProperties
    """

    properties: Optional["_models.CertificateProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.CertificateProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CertificateChainResponse(_model_base.Model):
    """The certificate chain response.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar certificate_chain: The certificate chain.
    :vartype certificate_chain: str
    """

    certificate_chain: Optional[str] = rest_field(name="certificateChain", visibility=["read"])
    """The certificate chain."""


class CertificateProperties(_model_base.Model):
    """The properties of certificate.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar certificate: The certificate as a UTF-8 encoded base 64 string.
    :vartype certificate: str
    :ivar status: The certificate status. Known values are: "Active", "Inactive", "Expired", and
     "Revoked".
    :vartype status: str or ~azure.mgmt.spheredpg.models.CertificateStatus
    :ivar subject: The certificate subject.
    :vartype subject: str
    :ivar thumbprint: The certificate thumbprint.
    :vartype thumbprint: str
    :ivar expiry_utc: The certificate expiry date.
    :vartype expiry_utc: ~datetime.datetime
    :ivar not_before_utc: The certificate not before date.
    :vartype not_before_utc: ~datetime.datetime
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.spheredpg.models.ProvisioningState
    """

    certificate: Optional[str] = rest_field(visibility=["read"])
    """The certificate as a UTF-8 encoded base 64 string."""
    status: Optional[Union[str, "_models.CertificateStatus"]] = rest_field(visibility=["read"])
    """The certificate status. Known values are: \"Active\", \"Inactive\", \"Expired\", and
     \"Revoked\"."""
    subject: Optional[str] = rest_field(visibility=["read"])
    """The certificate subject."""
    thumbprint: Optional[str] = rest_field(visibility=["read"])
    """The certificate thumbprint."""
    expiry_utc: Optional[datetime.datetime] = rest_field(name="expiryUtc", visibility=["read"], format="rfc3339")
    """The certificate expiry date."""
    not_before_utc: Optional[datetime.datetime] = rest_field(name="notBeforeUtc", visibility=["read"], format="rfc3339")
    """The certificate not before date."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""


class ClaimDevicesRequest(_model_base.Model):
    """Request to the action call to bulk claim devices.

    All required parameters must be populated in order to send to server.

    :ivar device_identifiers: Device identifiers of the devices to be claimed. Required.
    :vartype device_identifiers: list[str]
    """

    device_identifiers: List[str] = rest_field(name="deviceIdentifiers")
    """Device identifiers of the devices to be claimed. Required."""

    @overload
    def __init__(
        self,
        *,
        device_identifiers: List[str],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CountElementsResponse(_model_base.Model):
    """Response of the count for elements.

    All required parameters must be populated in order to send to server.

    :ivar value: Number of children resources in parent resource. Required.
    :vartype value: int
    """

    value: int = rest_field()
    """Number of children resources in parent resource. Required."""

    @overload
    def __init__(
        self,
        *,
        value: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CountDeviceResponse(CountElementsResponse):
    """Response to the action call for count devices in a catalog.

    All required parameters must be populated in order to send to server.

    :ivar value: Number of children resources in parent resource. Required.
    :vartype value: int
    """

    @overload
    def __init__(
        self,
        *,
        value: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Deployment(ProxyResourceBase):
    """An deployment resource belonging to a device group resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.spheredpg.models.DeploymentProperties
    """

    properties: Optional["_models.DeploymentProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DeploymentProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeploymentProperties(_model_base.Model):
    """The properties of deployment.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar deployment_id: Deployment ID.
    :vartype deployment_id: str
    :ivar deployed_images: Images deployed.
    :vartype deployed_images: list[~azure.mgmt.spheredpg.models.Image]
    :ivar deployment_date_utc: Deployment date UTC.
    :vartype deployment_date_utc: ~datetime.datetime
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.spheredpg.models.ProvisioningState
    """

    deployment_id: Optional[str] = rest_field(name="deploymentId", visibility=["read", "create"])
    """Deployment ID."""
    deployed_images: Optional[List["_models.Image"]] = rest_field(name="deployedImages", visibility=["read", "create"])
    """Images deployed."""
    deployment_date_utc: Optional[datetime.datetime] = rest_field(
        name="deploymentDateUtc", visibility=["read"], format="rfc3339"
    )
    """Deployment date UTC."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        deployment_id: Optional[str] = None,
        deployed_images: Optional[List["_models.Image"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Device(ProxyResourceBase):
    """An device resource belonging to a device group resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.spheredpg.models.DeviceProperties
    """

    properties: Optional["_models.DeviceProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DeviceProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceGroup(ProxyResourceBase):
    """An device group resource belonging to a product resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.spheredpg.models.DeviceGroupProperties
    """

    properties: Optional["_models.DeviceGroupProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DeviceGroupProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceGroupProperties(_model_base.Model):
    """The properties of deviceGroup.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar description: Description of the device group.
    :vartype description: str
    :ivar os_feed_type: Operating system feed type of the device group. Known values are: "Retail"
     and "RetailEval".
    :vartype os_feed_type: str or ~azure.mgmt.spheredpg.models.OSFeedType
    :ivar update_policy: Update policy of the device group. Known values are: "UpdateAll" and
     "No3rdPartyAppUpdates".
    :vartype update_policy: str or ~azure.mgmt.spheredpg.models.UpdatePolicy
    :ivar allow_crash_dumps_collection: Flag to define if the user allows for crash dump
     collection. Known values are: "Enabled" and "Disabled".
    :vartype allow_crash_dumps_collection: str or
     ~azure.mgmt.spheredpg.models.AllowCrashDumpCollection
    :ivar regional_data_boundary: Regional data boundary for the device group. Known values are:
     "None" and "EU".
    :vartype regional_data_boundary: str or ~azure.mgmt.spheredpg.models.RegionalDataBoundary
    :ivar has_deployment: Deployment status for the device group.
    :vartype has_deployment: bool
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.spheredpg.models.ProvisioningState
    """

    description: Optional[str] = rest_field()
    """Description of the device group."""
    os_feed_type: Optional[Union[str, "_models.OSFeedType"]] = rest_field(name="osFeedType")
    """Operating system feed type of the device group. Known values are: \"Retail\" and
     \"RetailEval\"."""
    update_policy: Optional[Union[str, "_models.UpdatePolicy"]] = rest_field(name="updatePolicy")
    """Update policy of the device group. Known values are: \"UpdateAll\" and
     \"No3rdPartyAppUpdates\"."""
    allow_crash_dumps_collection: Optional[Union[str, "_models.AllowCrashDumpCollection"]] = rest_field(
        name="allowCrashDumpsCollection"
    )
    """Flag to define if the user allows for crash dump collection. Known values are: \"Enabled\" and
     \"Disabled\"."""
    regional_data_boundary: Optional[Union[str, "_models.RegionalDataBoundary"]] = rest_field(
        name="regionalDataBoundary"
    )
    """Regional data boundary for the device group. Known values are: \"None\" and \"EU\"."""
    has_deployment: Optional[bool] = rest_field(name="hasDeployment", visibility=["read"])
    """Deployment status for the device group."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        os_feed_type: Optional[Union[str, "_models.OSFeedType"]] = None,
        update_policy: Optional[Union[str, "_models.UpdatePolicy"]] = None,
        allow_crash_dumps_collection: Optional[Union[str, "_models.AllowCrashDumpCollection"]] = None,
        regional_data_boundary: Optional[Union[str, "_models.RegionalDataBoundary"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceGroupUpdate(_model_base.Model):
    """The type used for update operations of the DeviceGroup.

    :ivar properties:
    :vartype properties: ~azure.mgmt.spheredpg.models.DeviceGroupUpdateProperties
    """

    properties: Optional["_models.DeviceGroupUpdateProperties"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DeviceGroupUpdateProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceGroupUpdateProperties(_model_base.Model):
    """The updatable properties of the DeviceGroup.

    :ivar description: Description of the device group.
    :vartype description: str
    :ivar os_feed_type: Operating system feed type of the device group. Known values are: "Retail"
     and "RetailEval".
    :vartype os_feed_type: str or ~azure.mgmt.spheredpg.models.OSFeedType
    :ivar update_policy: Update policy of the device group. Known values are: "UpdateAll" and
     "No3rdPartyAppUpdates".
    :vartype update_policy: str or ~azure.mgmt.spheredpg.models.UpdatePolicy
    :ivar allow_crash_dumps_collection: Flag to define if the user allows for crash dump
     collection. Known values are: "Enabled" and "Disabled".
    :vartype allow_crash_dumps_collection: str or
     ~azure.mgmt.spheredpg.models.AllowCrashDumpCollection
    :ivar regional_data_boundary: Regional data boundary for the device group. Known values are:
     "None" and "EU".
    :vartype regional_data_boundary: str or ~azure.mgmt.spheredpg.models.RegionalDataBoundary
    """

    description: Optional[str] = rest_field()
    """Description of the device group."""
    os_feed_type: Optional[Union[str, "_models.OSFeedType"]] = rest_field(name="osFeedType")
    """Operating system feed type of the device group. Known values are: \"Retail\" and
     \"RetailEval\"."""
    update_policy: Optional[Union[str, "_models.UpdatePolicy"]] = rest_field(name="updatePolicy")
    """Update policy of the device group. Known values are: \"UpdateAll\" and
     \"No3rdPartyAppUpdates\"."""
    allow_crash_dumps_collection: Optional[Union[str, "_models.AllowCrashDumpCollection"]] = rest_field(
        name="allowCrashDumpsCollection"
    )
    """Flag to define if the user allows for crash dump collection. Known values are: \"Enabled\" and
     \"Disabled\"."""
    regional_data_boundary: Optional[Union[str, "_models.RegionalDataBoundary"]] = rest_field(
        name="regionalDataBoundary"
    )
    """Regional data boundary for the device group. Known values are: \"None\" and \"EU\"."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        os_feed_type: Optional[Union[str, "_models.OSFeedType"]] = None,
        update_policy: Optional[Union[str, "_models.UpdatePolicy"]] = None,
        allow_crash_dumps_collection: Optional[Union[str, "_models.AllowCrashDumpCollection"]] = None,
        regional_data_boundary: Optional[Union[str, "_models.RegionalDataBoundary"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceInsight(_model_base.Model):
    """Device insight report.

    All required parameters must be populated in order to send to server.

    :ivar device_id: Device ID. Required.
    :vartype device_id: str
    :ivar description: Event description. Required.
    :vartype description: str
    :ivar start_timestamp_utc: Event start timestamp. Required.
    :vartype start_timestamp_utc: ~datetime.datetime
    :ivar end_timestamp_utc: Event end timestamp. Required.
    :vartype end_timestamp_utc: ~datetime.datetime
    :ivar event_category: Event category. Required.
    :vartype event_category: str
    :ivar event_class: Event class. Required.
    :vartype event_class: str
    :ivar event_type: Event type. Required.
    :vartype event_type: str
    :ivar event_count: Event count. Required.
    :vartype event_count: int
    """

    device_id: str = rest_field(name="deviceId")
    """Device ID. Required."""
    description: str = rest_field()
    """Event description. Required."""
    start_timestamp_utc: datetime.datetime = rest_field(name="startTimestampUtc", format="rfc3339")
    """Event start timestamp. Required."""
    end_timestamp_utc: datetime.datetime = rest_field(name="endTimestampUtc", format="rfc3339")
    """Event end timestamp. Required."""
    event_category: str = rest_field(name="eventCategory")
    """Event category. Required."""
    event_class: str = rest_field(name="eventClass")
    """Event class. Required."""
    event_type: str = rest_field(name="eventType")
    """Event type. Required."""
    event_count: int = rest_field(name="eventCount")
    """Event count. Required."""

    @overload
    def __init__(
        self,
        *,
        device_id: str,
        description: str,
        start_timestamp_utc: datetime.datetime,
        end_timestamp_utc: datetime.datetime,
        event_category: str,
        event_class: str,
        event_type: str,
        event_count: int,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceProperties(_model_base.Model):
    """The properties of device.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar device_id: Device ID.
    :vartype device_id: str
    :ivar chip_sku: SKU of the chip.
    :vartype chip_sku: str
    :ivar last_available_os_version: OS version available for installation when update requested.
    :vartype last_available_os_version: str
    :ivar last_installed_os_version: OS version running on device when update requested.
    :vartype last_installed_os_version: str
    :ivar last_os_update_utc: Time when update requested and new OS version available.
    :vartype last_os_update_utc: ~datetime.datetime
    :ivar last_update_request_utc: Time when update was last requested.
    :vartype last_update_request_utc: ~datetime.datetime
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.spheredpg.models.ProvisioningState
    """

    device_id: Optional[str] = rest_field(name="deviceId", visibility=["read", "create"])
    """Device ID."""
    chip_sku: Optional[str] = rest_field(name="chipSku", visibility=["read"])
    """SKU of the chip."""
    last_available_os_version: Optional[str] = rest_field(name="lastAvailableOsVersion", visibility=["read"])
    """OS version available for installation when update requested."""
    last_installed_os_version: Optional[str] = rest_field(name="lastInstalledOsVersion", visibility=["read"])
    """OS version running on device when update requested."""
    last_os_update_utc: Optional[datetime.datetime] = rest_field(
        name="lastOsUpdateUtc", visibility=["read"], format="rfc3339"
    )
    """Time when update requested and new OS version available."""
    last_update_request_utc: Optional[datetime.datetime] = rest_field(
        name="lastUpdateRequestUtc", visibility=["read"], format="rfc3339"
    )
    """Time when update was last requested."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        device_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceUpdate(_model_base.Model):
    """The type used for update operations of the Device.

    :ivar properties:
    :vartype properties: ~azure.mgmt.spheredpg.models.DeviceUpdateProperties
    """

    properties: Optional["_models.DeviceUpdateProperties"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.DeviceUpdateProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DeviceUpdateProperties(_model_base.Model):
    """The updatable properties of the Device.

    :ivar device_group_id: Device group id.
    :vartype device_group_id: str
    """

    device_group_id: Optional[str] = rest_field(name="deviceGroupId")
    """Device group id."""

    @overload
    def __init__(
        self,
        *,
        device_group_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.spheredpg.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.spheredpg.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.spheredpg.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GenerateCapabilityImageRequest(_model_base.Model):
    """Request of the action to create a signed device capability image.

    All required parameters must be populated in order to send to server.

    :ivar capabilities: List of capabilities to create. Required.
    :vartype capabilities: list[str or ~azure.mgmt.spheredpg.models.CapabilityType]
    """

    capabilities: List[Union[str, "_models.CapabilityType"]] = rest_field()
    """List of capabilities to create. Required."""

    @overload
    def __init__(
        self,
        *,
        capabilities: List[Union[str, "_models.CapabilityType"]],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Image(ProxyResourceBase):
    """An image resource belonging to a catalog resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.spheredpg.models.ImageProperties
    """

    properties: Optional["_models.ImageProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ImageProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageProperties(_model_base.Model):
    """The properties of image.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar image: Image as a UTF-8 encoded base 64 string on image create. This field contains the
     image URI on image reads.
    :vartype image: str
    :ivar image_id: Image ID.
    :vartype image_id: str
    :ivar image_name: Image name.
    :vartype image_name: str
    :ivar regional_data_boundary: Regional data boundary for an image. Known values are: "None" and
     "EU".
    :vartype regional_data_boundary: str or ~azure.mgmt.spheredpg.models.RegionalDataBoundary
    :ivar uri: Location the image.
    :vartype uri: str
    :ivar description: The image description.
    :vartype description: str
    :ivar component_id: The image component id.
    :vartype component_id: str
    :ivar image_type: The image type. Known values are: "InvalidImageType", "OneBl",
     "PlutonRuntime", "WifiFirmware", "SecurityMonitor", "NormalWorldLoader", "NormalWorldDtb",
     "NormalWorldKernel", "RootFs", "Services", "Applications", "FwConfig", "BootManifest", "Nwfs",
     "TrustedKeystore", "Policy", "CustomerBoardConfig", "UpdateCertStore",
     "BaseSystemUpdateManifest", "FirmwareUpdateManifest", "CustomerUpdateManifest",
     "RecoveryManifest", "ManifestSet", and "Other".
    :vartype image_type: str or ~azure.mgmt.spheredpg.models.ImageType
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.spheredpg.models.ProvisioningState
    """

    image: Optional[str] = rest_field(visibility=["read", "create"])
    """Image as a UTF-8 encoded base 64 string on image create. This field contains the image URI on
     image reads."""
    image_id: Optional[str] = rest_field(name="imageId", visibility=["read", "create"])
    """Image ID."""
    image_name: Optional[str] = rest_field(name="imageName", visibility=["read"])
    """Image name."""
    regional_data_boundary: Optional[Union[str, "_models.RegionalDataBoundary"]] = rest_field(
        name="regionalDataBoundary", visibility=["read", "create"]
    )
    """Regional data boundary for an image. Known values are: \"None\" and \"EU\"."""
    uri: Optional[str] = rest_field(visibility=["read"])
    """Location the image."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The image description."""
    component_id: Optional[str] = rest_field(name="componentId", visibility=["read"])
    """The image component id."""
    image_type: Optional[Union[str, "_models.ImageType"]] = rest_field(name="imageType", visibility=["read"])
    """The image type. Known values are: \"InvalidImageType\", \"OneBl\", \"PlutonRuntime\",
     \"WifiFirmware\", \"SecurityMonitor\", \"NormalWorldLoader\", \"NormalWorldDtb\",
     \"NormalWorldKernel\", \"RootFs\", \"Services\", \"Applications\", \"FwConfig\",
     \"BootManifest\", \"Nwfs\", \"TrustedKeystore\", \"Policy\", \"CustomerBoardConfig\",
     \"UpdateCertStore\", \"BaseSystemUpdateManifest\", \"FirmwareUpdateManifest\",
     \"CustomerUpdateManifest\", \"RecoveryManifest\", \"ManifestSet\", and \"Other\"."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        image: Optional[str] = None,
        image_id: Optional[str] = None,
        regional_data_boundary: Optional[Union[str, "_models.RegionalDataBoundary"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ListDeviceGroupsRequest(_model_base.Model):
    """Request of the action to list device groups for a catalog.

    :ivar device_group_name: Device Group name.
    :vartype device_group_name: str
    """

    device_group_name: Optional[str] = rest_field(name="deviceGroupName")
    """Device Group name."""

    @overload
    def __init__(
        self,
        *,
        device_group_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.spheredpg.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.spheredpg.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.spheredpg.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for ARM/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field()
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType")
    """Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only
     APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
        action_type: Optional[Union[str, "_models.ActionType"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field()
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field()
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field()
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field()
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Product(ProxyResourceBase):
    """An product resource belonging to a catalog resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.spheredpg.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.spheredpg.models.ProductProperties
    """

    properties: Optional["_models.ProductProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ProductProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProductProperties(_model_base.Model):
    """The properties of product.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar description: Description of the product. Required.
    :vartype description: str
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.spheredpg.models.ProvisioningState
    """

    description: str = rest_field()
    """Description of the product. Required."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The status of the last operation. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        description: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProductUpdate(_model_base.Model):
    """The type used for update operations of the Product.

    :ivar properties:
    :vartype properties: ~azure.mgmt.spheredpg.models.ProductUpdateProperties
    """

    properties: Optional["_models.ProductUpdateProperties"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ProductUpdateProperties"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProductUpdateProperties(_model_base.Model):
    """The updatable properties of the Product.

    :ivar description: Description of the product.
    :vartype description: str
    """

    description: Optional[str] = rest_field()
    """Description of the product."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProofOfPossessionNonceRequest(_model_base.Model):
    """Request for the proof of possession nonce.

    All required parameters must be populated in order to send to server.

    :ivar proof_of_possession_nonce: The proof of possession nonce. Required.
    :vartype proof_of_possession_nonce: str
    """

    proof_of_possession_nonce: str = rest_field(name="proofOfPossessionNonce")
    """The proof of possession nonce. Required."""

    @overload
    def __init__(
        self,
        *,
        proof_of_possession_nonce: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ProofOfPossessionNonceResponse(CertificateProperties):
    """Result of the action to generate a proof of possession nonce.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar certificate: The certificate as a UTF-8 encoded base 64 string.
    :vartype certificate: str
    :ivar status: The certificate status. Known values are: "Active", "Inactive", "Expired", and
     "Revoked".
    :vartype status: str or ~azure.mgmt.spheredpg.models.CertificateStatus
    :ivar subject: The certificate subject.
    :vartype subject: str
    :ivar thumbprint: The certificate thumbprint.
    :vartype thumbprint: str
    :ivar expiry_utc: The certificate expiry date.
    :vartype expiry_utc: ~datetime.datetime
    :ivar not_before_utc: The certificate not before date.
    :vartype not_before_utc: ~datetime.datetime
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.spheredpg.models.ProvisioningState
    """


class SignedCapabilityImageResponse(_model_base.Model):
    """Signed device capability image response.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar image: The signed device capability image as a UTF-8 encoded base 64 string.
    :vartype image: str
    """

    image: Optional[str] = rest_field(visibility=["read"])
    """The signed device capability image as a UTF-8 encoded base 64 string."""


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.spheredpg.models.CreatedByType
    :ivar created_at: The type of identity that created the resource.
    :vartype created_at: ~datetime.date
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.spheredpg.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.date
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.date] = rest_field(name="createdAt", visibility=["read"])
    """The type of identity that created the resource."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy", visibility=["read"])
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.date] = rest_field(name="lastModifiedAt", visibility=["read"])
    """The timestamp of resource last modification (UTC)."""
