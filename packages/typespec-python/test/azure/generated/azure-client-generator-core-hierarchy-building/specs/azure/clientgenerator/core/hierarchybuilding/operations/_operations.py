# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
from io import IOBase
import json
from typing import Any, Callable, IO, Optional, TypeVar, Union, overload

from azure.core import PipelineClient
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._configuration import HierarchyBuildingClientConfiguration
from .._utils.model_base import SdkJSONEncoder, _deserialize
from .._utils.serialization import Deserializer, Serializer

JSON = MutableMapping[str, Any]
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_animal_operations_update_pet_as_animal_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/azure/client-generator-core/hierarchy-building/pet/as-animal"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_animal_operations_update_dog_as_animal_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/azure/client-generator-core/hierarchy-building/dog/as-animal"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_pet_operations_update_pet_as_pet_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/azure/client-generator-core/hierarchy-building/pet/as-pet"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_pet_operations_update_dog_as_pet_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/azure/client-generator-core/hierarchy-building/dog/as-pet"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_dog_operations_update_dog_as_dog_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/azure/client-generator-core/hierarchy-building/dog/as-dog"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


class AnimalOperationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~specs.azure.clientgenerator.core.hierarchybuilding.HierarchyBuildingClient`'s
        :attr:`animal_operations` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: PipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: HierarchyBuildingClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def update_pet_as_animal(
        self, animal: _models.Animal, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Animal:
        """Update a pet as an animal.

        :param animal: Required.
        :type animal: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Animal. The Animal is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_pet_as_animal(
        self, animal: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Animal:
        """Update a pet as an animal.

        :param animal: Required.
        :type animal: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Animal. The Animal is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_pet_as_animal(
        self, animal: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Animal:
        """Update a pet as an animal.

        :param animal: Required.
        :type animal: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Animal. The Animal is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_pet_as_animal(self, animal: Union[_models.Animal, JSON, IO[bytes]], **kwargs: Any) -> _models.Animal:
        """Update a pet as an animal.

        :param animal: Is one of the following types: Animal, JSON, IO[bytes] Required.
        :type animal: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal or JSON or
         IO[bytes]
        :return: Animal. The Animal is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Animal] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(animal, (IOBase, bytes)):
            _content = animal
        else:
            _content = json.dumps(animal, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_animal_operations_update_pet_as_animal_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Animal, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def update_dog_as_animal(
        self, animal: _models.Animal, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Animal:
        """Update a dog as an animal.

        :param animal: Required.
        :type animal: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Animal. The Animal is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_dog_as_animal(
        self, animal: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Animal:
        """Update a dog as an animal.

        :param animal: Required.
        :type animal: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Animal. The Animal is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_dog_as_animal(
        self, animal: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Animal:
        """Update a dog as an animal.

        :param animal: Required.
        :type animal: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Animal. The Animal is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_dog_as_animal(self, animal: Union[_models.Animal, JSON, IO[bytes]], **kwargs: Any) -> _models.Animal:
        """Update a dog as an animal.

        :param animal: Is one of the following types: Animal, JSON, IO[bytes] Required.
        :type animal: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal or JSON or
         IO[bytes]
        :return: Animal. The Animal is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Animal
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Animal] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(animal, (IOBase, bytes)):
            _content = animal
        else:
            _content = json.dumps(animal, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_animal_operations_update_dog_as_animal_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Animal, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class PetOperationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~specs.azure.clientgenerator.core.hierarchybuilding.HierarchyBuildingClient`'s
        :attr:`pet_operations` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: PipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: HierarchyBuildingClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def update_pet_as_pet(
        self, pet: _models.Pet, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Pet:
        """Update a pet as a pet.

        :param pet: Required.
        :type pet: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Pet. The Pet is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_pet_as_pet(self, pet: JSON, *, content_type: str = "application/json", **kwargs: Any) -> _models.Pet:
        """Update a pet as a pet.

        :param pet: Required.
        :type pet: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Pet. The Pet is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_pet_as_pet(
        self, pet: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Pet:
        """Update a pet as a pet.

        :param pet: Required.
        :type pet: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Pet. The Pet is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_pet_as_pet(self, pet: Union[_models.Pet, JSON, IO[bytes]], **kwargs: Any) -> _models.Pet:
        """Update a pet as a pet.

        :param pet: Is one of the following types: Pet, JSON, IO[bytes] Required.
        :type pet: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet or JSON or IO[bytes]
        :return: Pet. The Pet is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Pet] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(pet, (IOBase, bytes)):
            _content = pet
        else:
            _content = json.dumps(pet, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_pet_operations_update_pet_as_pet_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Pet, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    def update_dog_as_pet(
        self, pet: _models.Pet, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Pet:
        """Update a dog as a pet.

        :param pet: Required.
        :type pet: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Pet. The Pet is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_dog_as_pet(self, pet: JSON, *, content_type: str = "application/json", **kwargs: Any) -> _models.Pet:
        """Update a dog as a pet.

        :param pet: Required.
        :type pet: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Pet. The Pet is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_dog_as_pet(
        self, pet: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Pet:
        """Update a dog as a pet.

        :param pet: Required.
        :type pet: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Pet. The Pet is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_dog_as_pet(self, pet: Union[_models.Pet, JSON, IO[bytes]], **kwargs: Any) -> _models.Pet:
        """Update a dog as a pet.

        :param pet: Is one of the following types: Pet, JSON, IO[bytes] Required.
        :type pet: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet or JSON or IO[bytes]
        :return: Pet. The Pet is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Pet
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Pet] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(pet, (IOBase, bytes)):
            _content = pet
        else:
            _content = json.dumps(pet, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_pet_operations_update_dog_as_pet_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Pet, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore


class DogOperationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~specs.azure.clientgenerator.core.hierarchybuilding.HierarchyBuildingClient`'s
        :attr:`dog_operations` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client: PipelineClient = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config: HierarchyBuildingClientConfiguration = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize: Serializer = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize: Deserializer = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def update_dog_as_dog(
        self, dog: _models.Dog, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Dog:
        """Update a dog as a dog.

        :param dog: Required.
        :type dog: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Dog
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Dog. The Dog is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Dog
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_dog_as_dog(self, dog: JSON, *, content_type: str = "application/json", **kwargs: Any) -> _models.Dog:
        """Update a dog as a dog.

        :param dog: Required.
        :type dog: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Dog. The Dog is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Dog
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update_dog_as_dog(
        self, dog: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.Dog:
        """Update a dog as a dog.

        :param dog: Required.
        :type dog: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: Dog. The Dog is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Dog
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_dog_as_dog(self, dog: Union[_models.Dog, JSON, IO[bytes]], **kwargs: Any) -> _models.Dog:
        """Update a dog as a dog.

        :param dog: Is one of the following types: Dog, JSON, IO[bytes] Required.
        :type dog: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Dog or JSON or IO[bytes]
        :return: Dog. The Dog is compatible with MutableMapping
        :rtype: ~specs.azure.clientgenerator.core.hierarchybuilding.models.Dog
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Dog] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(dog, (IOBase, bytes)):
            _content = dog
        else:
            _content = json.dumps(dog, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_dog_operations_update_dog_as_dog_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.Dog, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
,line-too-long,useless-suppression