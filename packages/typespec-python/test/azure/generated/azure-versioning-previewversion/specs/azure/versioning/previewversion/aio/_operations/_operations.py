# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
from io import IOBase
import json
from typing import Any, Callable, IO, Optional, TypeVar, Union, overload

from azure.core import AsyncPipelineClient
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._operations._operations import (
    build_preview_version_get_widget_request,
    build_preview_version_list_widgets_request,
    build_preview_version_update_widget_color_request,
)
from ..._utils.model_base import SdkJSONEncoder, _deserialize
from ..._utils.utils import ClientMixinABC
from ..._validation import api_version_validation
from .._configuration import PreviewVersionClientConfiguration

JSON = MutableMapping[str, Any]
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, dict[str, Any]], Any]]


class _PreviewVersionClientOperationsMixin(
    ClientMixinABC[AsyncPipelineClient[HttpRequest, AsyncHttpResponse], PreviewVersionClientConfiguration]
):

    @distributed_trace_async
    async def get_widget(self, id: str, **kwargs: Any) -> Optional[_models.Widget]:
        """Get widget by id (available in all versions).

        :param id: Required.
        :type id: str
        :return: Widget or None. The Widget is compatible with MutableMapping
        :rtype: ~specs.azure.versioning.previewversion.models.Widget or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[_models.Widget]] = kwargs.pop("cls", None)

        _request = build_preview_version_get_widget_request(
            id=id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.Widget, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def update_widget_color(
        self,
        id: str,
        color_update: _models.UpdateWidgetColorRequest,
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> Optional[_models.Widget]:
        """Update widget color (preview only).

        :param id: Required.
        :type id: str
        :param color_update: Required.
        :type color_update: ~specs.azure.versioning.previewversion.models.UpdateWidgetColorRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: Widget or None. The Widget is compatible with MutableMapping
        :rtype: ~specs.azure.versioning.previewversion.models.Widget or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_widget_color(
        self, id: str, color_update: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> Optional[_models.Widget]:
        """Update widget color (preview only).

        :param id: Required.
        :type id: str
        :param color_update: Required.
        :type color_update: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: Widget or None. The Widget is compatible with MutableMapping
        :rtype: ~specs.azure.versioning.previewversion.models.Widget or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def update_widget_color(
        self, id: str, color_update: IO[bytes], *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> Optional[_models.Widget]:
        """Update widget color (preview only).

        :param id: Required.
        :type id: str
        :param color_update: Required.
        :type color_update: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: Widget or None. The Widget is compatible with MutableMapping
        :rtype: ~specs.azure.versioning.previewversion.models.Widget or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    @api_version_validation(
        method_added_on="2024-12-01-preview",
        params_added_on={"2024-12-01-preview": ["id", "content_type", "accept"]},
        api_versions_list=["2024-12-01-preview"],
    )
    async def update_widget_color(
        self, id: str, color_update: Union[_models.UpdateWidgetColorRequest, JSON, IO[bytes]], **kwargs: Any
    ) -> Optional[_models.Widget]:
        """Update widget color (preview only).

        :param id: Required.
        :type id: str
        :param color_update: Is one of the following types: UpdateWidgetColorRequest, JSON, IO[bytes]
         Required.
        :type color_update: ~specs.azure.versioning.previewversion.models.UpdateWidgetColorRequest or
         JSON or IO[bytes]
        :return: Widget or None. The Widget is compatible with MutableMapping
        :rtype: ~specs.azure.versioning.previewversion.models.Widget or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[Optional[_models.Widget]] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _content = None
        if isinstance(color_update, (IOBase, bytes)):
            _content = color_update
        else:
            _content = json.dumps(color_update, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_preview_version_update_widget_color_request(
            id=id,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 404]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 200:
            if _stream:
                deserialized = response.iter_bytes()
            else:
                deserialized = _deserialize(_models.Widget, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    @api_version_validation(
        params_added_on={"2024-12-01-preview": ["color"]},
        api_versions_list=["2024-01-01", "2024-06-01", "2024-12-01-preview"],
    )
    async def list_widgets(
        self, *, name: Optional[str] = None, color: Optional[str] = None, **kwargs: Any
    ) -> _models.ListWidgetsResponse:
        """List widgets with optional color filtering.

        :keyword name: Default value is None.
        :paramtype name: str
        :keyword color: Default value is None.
        :paramtype color: str
        :return: ListWidgetsResponse. The ListWidgetsResponse is compatible with MutableMapping
        :rtype: ~specs.azure.versioning.previewversion.models.ListWidgetsResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ListWidgetsResponse] = kwargs.pop("cls", None)

        _request = build_preview_version_list_widgets_request(
            name=name,
            color=color,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                try:
                    await response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.ListWidgetsResponse, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
