# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=wrong-import-position

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ._patch import *  # pylint: disable=unused-wildcard-import

from ._operations import StringOperations  # type: ignore
from ._operations import BytesOperations  # type: ignore
from ._operations import DatetimeOperations  # type: ignore
from ._operations import DurationOperations  # type: ignore
from ._operations import PlainDateOperations  # type: ignore
from ._operations import PlainTimeOperations  # type: ignore
from ._operations import CollectionsByteOperations  # type: ignore
from ._operations import CollectionsModelOperations  # type: ignore
from ._operations import StringLiteralOperations  # type: ignore
from ._operations import IntLiteralOperations  # type: ignore
from ._operations import FloatLiteralOperations  # type: ignore
from ._operations import BooleanLiteralOperations  # type: ignore
from ._operations import UnionStringLiteralOperations  # type: ignore
from ._operations import UnionIntLiteralOperations  # type: ignore
from ._operations import UnionFloatLiteralOperations  # type: ignore
from ._operations import RequiredAndOptionalOperations  # type: ignore

from ._patch import __all__ as _patch_all
from ._patch import *
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "StringOperations",
    "BytesOperations",
    "DatetimeOperations",
    "DurationOperations",
    "PlainDateOperations",
    "PlainTimeOperations",
    "CollectionsByteOperations",
    "CollectionsModelOperations",
    "StringLiteralOperations",
    "IntLiteralOperations",
    "FloatLiteralOperations",
    "BooleanLiteralOperations",
    "UnionStringLiteralOperations",
    "UnionIntLiteralOperations",
    "UnionFloatLiteralOperations",
    "RequiredAndOptionalOperations",
]
__all__.extend([p for p in _patch_all if p not in __all__])  # pyright: ignore
_patch_sdk()
