# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Unbranded Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Unbranded (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import SpecialWordsPreparer
from testpreparer_async import SpecialWordsClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSpecialWordsOperationsAsync(SpecialWordsClientTestBaseAsync):
    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_and_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.and_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_as_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.as_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_assert_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.assert_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_async_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.async_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_await_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.await_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_break_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.break_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_class_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.class_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_constructor(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.constructor()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_continue_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.continue_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_def_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.def_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_del_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.del_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_elif_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.elif_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_else_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.else_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_except_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.except_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_exec_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.exec_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_finally_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.finally_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_for_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.for_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_from_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.from_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_global_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.global_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_if_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.if_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_import_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.import_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_in_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.in_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_is_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.is_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_lambda_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.lambda_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_not_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.not_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_or_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.or_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_pass_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.pass_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_raise_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.raise_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_return_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.return_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_try_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.try_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_while_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.while_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_with_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.with_method()

        # please add some check logic here by yourself
        # ...

    @SpecialWordsPreparer()
    @recorded_by_proxy_async
    async def test_yield_method(self, specialwords_endpoint):
        client = self.create_async_client(endpoint=specialwords_endpoint)
        response = await client.operations.yield_method()

        # please add some check logic here by yourself
        # ...
