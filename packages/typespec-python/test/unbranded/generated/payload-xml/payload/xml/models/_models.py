# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Unbranded Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Unbranded (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, List, Mapping, Optional, TYPE_CHECKING, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class ModelWithArrayOfModel(_model_base.Model):
    """Contains an array of models.

    All required parameters must be populated in order to send to server.

    :ivar items_property: Required.
    :vartype items_property: list[~payload.xml.models.SimpleModel]
    """

    items_property: List["_models.SimpleModel"] = rest_field(name="items")
    """Required."""

    @overload
    def __init__(
        self,
        *,
        items_property: List["_models.SimpleModel"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ModelWithOptionalField(_model_base.Model):
    """Contains an optional field.

    All required parameters must be populated in order to send to server.

    :ivar item: Required.
    :vartype item: str
    :ivar value:
    :vartype value: int
    """

    item: str = rest_field()
    """Required."""
    value: Optional[int] = rest_field()

    @overload
    def __init__(
        self,
        *,
        item: str,
        value: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ModelWithSimpleArrays(_model_base.Model):
    """Contains fields of arrays of primitive types.

    All required parameters must be populated in order to send to server.

    :ivar colors: Required.
    :vartype colors: list[str]
    :ivar counts: Required.
    :vartype counts: list[int]
    """

    colors: List[str] = rest_field()
    """Required."""
    counts: List[int] = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        colors: List[str],
        counts: List[int],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SimpleModel(_model_base.Model):
    """Contains fields of primitive types.

    All required parameters must be populated in order to send to server.

    :ivar name: Required.
    :vartype name: str
    :ivar age: Required.
    :vartype age: int
    """

    name: str = rest_field()
    """Required."""
    age: int = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        age: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
