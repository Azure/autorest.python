# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import AzureJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import MixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_set_value_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/polymorphic/model"

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_set_value_with_polymorphic_property_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/polymorphic/property"

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


class BasicPolymorphicModelsOperationsMixin(MixinABC):
    @overload
    def set_value(
        self, input: Union[_models.BaseClass, JSON], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.BaseClass:
        """set_value.

        :param input: Required.
        :type input: ~basicpolymorphicmodels.models.BaseClass or JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: BaseClass. The BaseClass is compatible with MutableMapping
        :rtype: ~basicpolymorphicmodels.models.BaseClass
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_value(self, input: IO, *, content_type: str = "application/json", **kwargs: Any) -> _models.BaseClass:
        """set_value.

        :param input: Required.
        :type input: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: BaseClass. The BaseClass is compatible with MutableMapping
        :rtype: ~basicpolymorphicmodels.models.BaseClass
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def set_value(self, input: Union[_models.BaseClass, JSON, IO], **kwargs: Any) -> _models.BaseClass:
        """set_value.

        :param input: Is either a model type or a IO type. Required.
        :type input: ~basicpolymorphicmodels.models.BaseClass or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: BaseClass. The BaseClass is compatible with MutableMapping
        :rtype: ~basicpolymorphicmodels.models.BaseClass
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.BaseClass]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(input, (IO, bytes)):
            _content = input
        else:
            _content = json.dumps(input, cls=AzureJSONEncoder)

        request = build_set_value_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = _deserialize(_models.BaseClass, response.json())
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @overload
    def set_value_with_polymorphic_property(
        self,
        input: Union[_models.ModelWithPolymorphicProperty, JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ModelWithPolymorphicProperty:
        """set_value_with_polymorphic_property.

        :param input: Required.
        :type input: ~basicpolymorphicmodels.models.ModelWithPolymorphicProperty or JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ModelWithPolymorphicProperty. The ModelWithPolymorphicProperty is compatible with
         MutableMapping
        :rtype: ~basicpolymorphicmodels.models.ModelWithPolymorphicProperty
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def set_value_with_polymorphic_property(
        self, input: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.ModelWithPolymorphicProperty:
        """set_value_with_polymorphic_property.

        :param input: Required.
        :type input: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: ModelWithPolymorphicProperty. The ModelWithPolymorphicProperty is compatible with
         MutableMapping
        :rtype: ~basicpolymorphicmodels.models.ModelWithPolymorphicProperty
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def set_value_with_polymorphic_property(
        self, input: Union[_models.ModelWithPolymorphicProperty, JSON, IO], **kwargs: Any
    ) -> _models.ModelWithPolymorphicProperty:
        """set_value_with_polymorphic_property.

        :param input: Is either a model type or a IO type. Required.
        :type input: ~basicpolymorphicmodels.models.ModelWithPolymorphicProperty or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: ModelWithPolymorphicProperty. The ModelWithPolymorphicProperty is compatible with
         MutableMapping
        :rtype: ~basicpolymorphicmodels.models.ModelWithPolymorphicProperty
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.ModelWithPolymorphicProperty]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(input, (IO, bytes)):
            _content = input
        else:
            _content = json.dumps(input, cls=AzureJSONEncoder)

        request = build_set_value_with_polymorphic_property_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = _deserialize(_models.ModelWithPolymorphicProperty, response.json())
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
