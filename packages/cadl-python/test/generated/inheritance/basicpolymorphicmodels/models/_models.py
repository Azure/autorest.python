# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, Mapping, TYPE_CHECKING, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class BaseClass(_model_base.Model):
    """Example base type.

    All required parameters must be populated in order to send to Azure.

    :ivar base_class_property: An example property. Required.
    :vartype base_class_property: str
    """

    base_class_property: str = rest_field()
    """An example property. Required. """

    @overload
    def __init__(
        self,
        *,
        base_class_property: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class BaseClassWithDiscriminator(BaseClass):
    """Example base class that has a discriminator property.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DerivedFromBaseClassWithDiscriminatorA, DerivedFromBaseClassWithDiscriminatorB

    All required parameters must be populated in order to send to Azure.

    :ivar base_class_property: An example property. Required.
    :vartype base_class_property: str
    :ivar discriminator_property: Required. Default value is "B".
    :vartype discriminator_property: str
    """

    __mapping__ = {}
    discriminator_property: str = rest_discriminator()
    """Required. Default value is \"B\"."""

    @overload
    def __init__(
        self,
        *,
        base_class_property: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DerivedFromBaseClassWithDiscriminatorA(BaseClassWithDiscriminator, discriminator="A"):
    """DerivedFromBaseClassWithDiscriminatorA.

    All required parameters must be populated in order to send to Azure.

    :ivar base_class_property: An example property. Required.
    :vartype base_class_property: str
    :ivar discriminator_property: Required. Default value is "A".
    :vartype discriminator_property: str
    """

    @overload
    def __init__(
        self,
        *,
        base_class_property: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.discriminator_property = "A"  # type: str


class DerivedFromBaseClassWithDiscriminatorB(BaseClassWithDiscriminator, discriminator="B"):
    """DerivedFromBaseClassWithDiscriminatorB.

    All required parameters must be populated in order to send to Azure.

    :ivar base_class_property: An example property. Required.
    :vartype base_class_property: str
    :ivar discriminator_property: Required. Default value is "B".
    :vartype discriminator_property: str
    """

    @overload
    def __init__(
        self,
        *,
        base_class_property: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.discriminator_property = "B"  # type: str


class ModelWithPolymorphicProperty(_model_base.Model):
    """Illustrates case where a basic model has polymorphic properties.

    All required parameters must be populated in order to send to Azure.

    :ivar polymorphic_property: Example polymorphic type property. Required.
    :vartype polymorphic_property: ~basicpolymorphicmodels.models.BaseClassWithDiscriminator
    """

    polymorphic_property: "_models.BaseClassWithDiscriminator" = rest_field()
    """Example polymorphic type property. Required. """

    @overload
    def __init__(
        self,
        *,
        polymorphic_property: "_models.BaseClassWithDiscriminator",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
