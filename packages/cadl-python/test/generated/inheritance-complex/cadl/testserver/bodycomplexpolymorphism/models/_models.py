# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class basic(_model_base.Model):
    """basic.

    :ivar id: Basic Id.
    :vartype id: int
    :ivar name: Name property with a very long description that does not fit on a single line and a
     line break.
    :vartype name: str
    :ivar color: Known values are: "cyan", "Magenta", "YELLOW", and "blacK".
    :vartype color: str or ~cadl.testserver.bodycomplexpolymorphism.models.CMYKColors
    """

    id: Optional[int] = rest_field(name="id")
    """Basic Id. """
    name: Optional[str] = rest_field(name="name")
    """Name property with a very long description that does not fit on a single line and a line break. """
    color: Optional[Union[str, "CMYKColors"]] = rest_field(name="color")
    """Known values are: \"cyan\", \"Magenta\", \"YELLOW\", and \"blacK\"."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        color: Optional[Union[str, "_models.CMYKColors"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class pet(_model_base.Model):
    """pet.

    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    """

    id: Optional[int] = rest_field(name="id")
    name: Optional[str] = rest_field(name="name")

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class cat(pet):
    """cat.

    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    :ivar color:
    :vartype color: str
    :ivar hates:
    :vartype hates: list[~cadl.testserver.bodycomplexpolymorphism.models.dog]
    """

    color: Optional[str] = rest_field(name="color")
    hates: Optional[List["dog"]] = rest_field(name="hates")

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        color: Optional[str] = None,
        hates: Optional[List["_models.dog"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Fish(_model_base.Model):
    """Fish.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    salmon, shark, smart_salmon

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplexpolymorphism.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    """

    __mapping__ = {}
    species: Optional[str] = rest_field(name="species")
    length: float = rest_field(name="length")
    """Required. """
    siblings: Optional[List["Fish"]] = rest_field(name="siblings")
    fishtype: str = rest_discriminator(name="fishtype")
    """Required. Default value is \"shark\"."""

    @overload
    def __init__(
        self,
        *,
        length: float,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class shark(Fish, discriminator="shark"):
    """shark.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    cookiecuttershark, goblinshark, sawshark

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplexpolymorphism.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    :ivar age:
    :vartype age: int
    :ivar birthday: Required.
    :vartype birthday: ~datetime.datetime
    :ivar sharktype: Required. Default value is "cookiecuttershark".
    :vartype sharktype: str
    """

    __mapping__ = {}
    age: Optional[int] = rest_field(name="age")
    birthday: datetime.datetime = rest_field(name="birthday")
    """Required. """
    sharktype: str = rest_discriminator(name="sharktype")
    """Required. Default value is \"cookiecuttershark\"."""

    @overload
    def __init__(
        self,
        *,
        length: float,
        birthday: datetime.datetime,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        age: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fishtype = "shark"  # type: str


class cookiecuttershark(shark, discriminator="cookiecuttershark"):
    """cookiecuttershark.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplexpolymorphism.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    :ivar age:
    :vartype age: int
    :ivar birthday: Required.
    :vartype birthday: ~datetime.datetime
    :ivar sharktype: Required. Default value is "cookiecuttershark".
    :vartype sharktype: str
    """

    @overload
    def __init__(
        self,
        *,
        length: float,
        birthday: datetime.datetime,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        age: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.sharktype = "cookiecuttershark"  # type: str


class dog(pet):
    """dog.

    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    :ivar food:
    :vartype food: str
    """

    food: Optional[str] = rest_field(name="food")

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        food: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DotFish(_model_base.Model):
    """DotFish.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DotSalmon

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar fish_type: Required. Default value is "DotSalmon".
    :vartype fish_type: str
    """

    __mapping__ = {}
    species: Optional[str] = rest_field(name="species")
    fish_type: str = rest_discriminator(name="fish_type")
    """Required. Default value is \"DotSalmon\"."""

    @overload
    def __init__(
        self,
        *,
        species: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DotFishMarket(_model_base.Model):
    """DotFishMarket.

    All required parameters must be populated in order to send to Azure.

    :ivar sample_salmon:
    :vartype sample_salmon: ~cadl.testserver.bodycomplexpolymorphism.models.DotSalmon
    :ivar salmons:
    :vartype salmons: list[~cadl.testserver.bodycomplexpolymorphism.models.DotSalmon]
    :ivar sample_fish:
    :vartype sample_fish: ~cadl.testserver.bodycomplexpolymorphism.models.DotFish
    :ivar fishes: Required.
    :vartype fishes: list[~cadl.testserver.bodycomplexpolymorphism.models.DotFish]
    """

    sample_salmon: Optional["DotSalmon"] = rest_field(name="sampleSalmon")
    salmons: Optional[List["DotSalmon"]] = rest_field(name="salmons")
    sample_fish: Optional["DotFish"] = rest_field(name="sampleFish")
    fishes: List["DotFish"] = rest_field(name="fishes")
    """Required. """

    @overload
    def __init__(
        self,
        *,
        fishes: List["_models.DotFish"],
        sample_salmon: Optional["_models.DotSalmon"] = None,
        salmons: Optional[List["_models.DotSalmon"]] = None,
        sample_fish: Optional["_models.DotFish"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DotSalmon(DotFish, discriminator="DotSalmon"):
    """DotSalmon.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar fish_type: Required. Default value is "DotSalmon".
    :vartype fish_type: str
    :ivar location:
    :vartype location: str
    :ivar iswild:
    :vartype iswild: bool
    """

    location: Optional[str] = rest_field(name="location")
    iswild: Optional[bool] = rest_field(name="iswild")

    @overload
    def __init__(
        self,
        *,
        species: Optional[str] = None,
        location: Optional[str] = None,
        iswild: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fish_type = "DotSalmon"  # type: str


class Error(_model_base.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
     Required.
    :vartype details: list[~cadl.testserver.bodycomplexpolymorphism.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~cadl.testserver.bodycomplexpolymorphism.models.InnerError
    """

    code: str = rest_field(name="code")
    """One of a server-defined set of error codes. Required. """
    message: str = rest_field(name="message")
    """A human-readable representation of the error. Required. """
    target: Optional[str] = rest_field(name="target")
    """The target of the error. """
    details: List["Error"] = rest_field(name="details")
    """An array of details about specific errors that led to this reported error. Required. """
    innererror: Optional["InnerError"] = rest_field(name="innererror")
    """An object containing more specific information than the current object about the error. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        details: List["_models.Error"],
        target: Optional[str] = None,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """A response containing error details.

    All required parameters must be populated in order to send to Azure.

    :ivar error: The error object. Required.
    :vartype error: ~cadl.testserver.bodycomplexpolymorphism.models.Error
    """

    error: "Error" = rest_field(name="error")
    """The error object. Required. """

    @overload
    def __init__(
        self,
        *,
        error: "_models.Error",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class goblinshark(shark, discriminator="goblin"):
    """goblinshark.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplexpolymorphism.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    :ivar age:
    :vartype age: int
    :ivar birthday: Required.
    :vartype birthday: ~datetime.datetime
    :ivar sharktype: Required. Default value is "goblin".
    :vartype sharktype: str
    :ivar jawsize:
    :vartype jawsize: int
    :ivar color: Known values are: "pink", "gray", "brown", "RED", and "red".
    :vartype color: str or ~cadl.testserver.bodycomplexpolymorphism.models.GoblinSharkColor
    """

    jawsize: Optional[int] = rest_field(name="jawsize")
    color: Union[str, "GoblinSharkColor"] = rest_field(name="color", default="gray")
    """Known values are: \"pink\", \"gray\", \"brown\", \"RED\", and \"red\"."""

    @overload
    def __init__(
        self,
        *,
        length: float,
        birthday: datetime.datetime,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        age: Optional[int] = None,
        jawsize: Optional[int] = None,
        color: Union[str, "_models.GoblinSharkColor"] = "gray",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.sharktype = "goblin"  # type: str


class InnerError(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar innererror: Inner error.
    :vartype innererror: ~cadl.testserver.bodycomplexpolymorphism.models.InnerError
    """

    code: str = rest_field(name="code")
    """One of a server-defined set of error codes. Required. """
    innererror: Optional["InnerError"] = rest_field(name="innererror")
    """Inner error. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class salmon(Fish, discriminator="salmon"):
    """salmon.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplexpolymorphism.models.Fish]
    :ivar fishtype: Required. Default value is "salmon".
    :vartype fishtype: str
    :ivar location:
    :vartype location: str
    :ivar iswild:
    :vartype iswild: bool
    """

    location: Optional[str] = rest_field(name="location")
    iswild: Optional[bool] = rest_field(name="iswild")

    @overload
    def __init__(
        self,
        *,
        length: float,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        location: Optional[str] = None,
        iswild: Optional[bool] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fishtype = "salmon"  # type: str


class sawshark(shark, discriminator="sawshark"):
    """sawshark.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplexpolymorphism.models.Fish]
    :ivar fishtype: Required. Default value is "shark".
    :vartype fishtype: str
    :ivar age:
    :vartype age: int
    :ivar birthday: Required.
    :vartype birthday: ~datetime.datetime
    :ivar sharktype: Required. Default value is "sawshark".
    :vartype sharktype: str
    :ivar picture:
    :vartype picture: bytes
    """

    picture: Optional[bytes] = rest_field(name="picture")

    @overload
    def __init__(
        self,
        *,
        length: float,
        birthday: datetime.datetime,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        age: Optional[int] = None,
        picture: Optional[bytes] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.sharktype = "sawshark"  # type: str


class siamese(cat):
    """siamese.

    :ivar id:
    :vartype id: int
    :ivar name:
    :vartype name: str
    :ivar color:
    :vartype color: str
    :ivar hates:
    :vartype hates: list[~cadl.testserver.bodycomplexpolymorphism.models.dog]
    :ivar breed:
    :vartype breed: str
    """

    breed: Optional[str] = rest_field(name="breed")

    @overload
    def __init__(
        self,
        *,
        id: Optional[int] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        color: Optional[str] = None,
        hates: Optional[List["_models.dog"]] = None,
        breed: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class smart_salmon(Fish, discriminator="smart_salmon"):
    """smart_salmon.

    All required parameters must be populated in order to send to Azure.

    :ivar species:
    :vartype species: str
    :ivar length: Required.
    :vartype length: float
    :ivar siblings:
    :vartype siblings: list[~cadl.testserver.bodycomplexpolymorphism.models.Fish]
    :ivar fishtype: Required. Default value is "smart_salmon".
    :vartype fishtype: str
    :ivar college_degree:
    :vartype college_degree: str
    """

    college_degree: Optional[str] = rest_field(name="college_degree")

    @overload
    def __init__(
        self,
        *,
        length: float,
        species: Optional[str] = None,
        siblings: Optional[List["_models.Fish"]] = None,
        college_degree: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fishtype = "smart_salmon"  # type: str
