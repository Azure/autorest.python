# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import AzureJSONEncoder, _deserialize
from ...operations._operations import (
    build_dictionary_get_empty_request,
    build_dictionary_get_not_provided_request,
    build_dictionary_get_null_request,
    build_dictionary_get_valid_request,
    build_dictionary_put_empty_request,
    build_dictionary_put_valid_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class DictionaryOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~cadl.testserver.bodycomplexdictionary.aio.DictionaryinComplexTestService`'s
        :attr:`dictionary` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def put_valid(  # pylint: disable=inconsistent-return-statements
        self,
        complex_body: Union[_models.dictionaryWrapper, JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """put_valid.

        :param complex_body: Please put a dictionary with 5 key-value pairs: "txt":"notepad",
         "bmp":"mspaint", "xls":"excel", "exe":"", "":null. Required.
        :type complex_body: ~cadl.testserver.bodycomplexdictionary.models.dictionaryWrapper or JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None. This object is MutableMapping-compatible.
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_valid(  # pylint: disable=inconsistent-return-statements
        self, complex_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """put_valid.

        :param complex_body: Please put a dictionary with 5 key-value pairs: "txt":"notepad",
         "bmp":"mspaint", "xls":"excel", "exe":"", "":null. Required.
        :type complex_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None. This object is MutableMapping-compatible.
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_valid(  # pylint: disable=inconsistent-return-statements
        self, complex_body: Union[_models.dictionaryWrapper, JSON, IO], **kwargs: Any
    ) -> None:
        """put_valid.

        :param complex_body: Please put a dictionary with 5 key-value pairs: "txt":"notepad",
         "bmp":"mspaint", "xls":"excel", "exe":"", "":null. Is either a model type or a IO type.
         Required.
        :type complex_body: ~cadl.testserver.bodycomplexdictionary.models.dictionaryWrapper or JSON or
         IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None. This object is MutableMapping-compatible.
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(complex_body, (IO, bytes)):
            _content = complex_body
        else:
            _content = json.dumps(complex_body, cls=AzureJSONEncoder)

        request = build_dictionary_put_valid_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self,
        complex_body: Union[_models.dictionaryWrapper, JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """put_empty.

        :param complex_body: Please put an empty dictionary. Required.
        :type complex_body: ~cadl.testserver.bodycomplexdictionary.models.dictionaryWrapper or JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None. This object is MutableMapping-compatible.
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self, complex_body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """put_empty.

        :param complex_body: Please put an empty dictionary. Required.
        :type complex_body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None. This object is MutableMapping-compatible.
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def put_empty(  # pylint: disable=inconsistent-return-statements
        self, complex_body: Union[_models.dictionaryWrapper, JSON, IO], **kwargs: Any
    ) -> None:
        """put_empty.

        :param complex_body: Please put an empty dictionary. Is either a model type or a IO type.
         Required.
        :type complex_body: ~cadl.testserver.bodycomplexdictionary.models.dictionaryWrapper or JSON or
         IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None. This object is MutableMapping-compatible.
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(complex_body, (IO, bytes)):
            _content = complex_body
        else:
            _content = json.dumps(complex_body, cls=AzureJSONEncoder)

        request = build_dictionary_put_empty_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def get_valid(self, **kwargs: Any) -> _models.dictionaryWrapper:
        """get_valid.

        :return: dictionaryWrapper. This object is MutableMapping-compatible.
        :rtype: ~cadl.testserver.bodycomplexdictionary.models.dictionaryWrapper
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.dictionaryWrapper]

        request = build_dictionary_get_valid_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.dictionaryWrapper, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_empty(self, **kwargs: Any) -> _models.dictionaryWrapper:
        """get_empty.

        :return: dictionaryWrapper. This object is MutableMapping-compatible.
        :rtype: ~cadl.testserver.bodycomplexdictionary.models.dictionaryWrapper
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.dictionaryWrapper]

        request = build_dictionary_get_empty_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.dictionaryWrapper, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_null(self, **kwargs: Any) -> _models.dictionaryWrapper:
        """get_null.

        :return: dictionaryWrapper. This object is MutableMapping-compatible.
        :rtype: ~cadl.testserver.bodycomplexdictionary.models.dictionaryWrapper
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.dictionaryWrapper]

        request = build_dictionary_get_null_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.dictionaryWrapper, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace_async
    async def get_not_provided(self, **kwargs: Any) -> _models.dictionaryWrapper:
        """get_not_provided.

        :return: dictionaryWrapper. This object is MutableMapping-compatible.
        :rtype: ~cadl.testserver.bodycomplexdictionary.models.dictionaryWrapper
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.dictionaryWrapper]

        request = build_dictionary_get_not_provided_request(
            headers=_headers,
            params=_params,
        )
        request.url = self._client.format_url(request.url)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.dictionaryWrapper, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
