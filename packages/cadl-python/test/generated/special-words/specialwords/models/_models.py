# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, Dict, Mapping, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports


class BaseModel(_model_base.Model):
    """This is a base model has discriminator name containing dot.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DerivedModel

    All required parameters must be populated in order to send to Azure.

    :ivar model_kind: Required. Default value is None.
    :vartype model_kind: str
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    model_kind: Literal[None] = rest_discriminator(name="model.kind")
    """Required. Default value is None."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.model_kind: Literal[None] = None


class DerivedModel(BaseModel, discriminator="derived"):
    """This is a model has property names of special words or characters.

    All required parameters must be populated in order to send to Azure.

    :ivar model_kind: Required. Default value is "derived".
    :vartype model_kind: str
    :ivar derived_name: Required.
    :vartype derived_name: str
    :ivar for_property: Required.
    :vartype for_property: str
    """

    model_kind: Literal["derived"] = rest_discriminator(name="model.kind")  # type: ignore
    """Required. Default value is \"derived\"."""
    derived_name: str = rest_field(name="derived.name")
    """Required. """
    for_property: str = rest_field(name="for")
    """Required. """

    @overload
    def __init__(
        self,
        *,
        derived_name: str,
        for_property: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.model_kind: Literal["derived"] = "derived"
