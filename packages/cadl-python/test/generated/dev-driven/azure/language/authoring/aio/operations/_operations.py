# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, Optional, TypeVar, Union, cast, overload

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ...operations._operations import (
    build_deployments_delete_deployment_request,
    build_deployments_deploy_project_request,
    build_deployments_get_deployment_request,
    build_deployments_list_request,
    build_deployments_swap_deployments_request,
    build_global_operations_get_supported_languages_request,
    build_global_operations_list_training_config_versions_request,
    build_jobs_get_deployment_status_request,
    build_jobs_get_swap_deployments_status_request,
    build_projects_create_or_update_request,
    build_projects_delete_request,
    build_projects_export_request,
    build_projects_get_request,
    build_projects_importx_request,
    build_projects_list_request,
    build_projects_train_request,
)

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ProjectsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.language.authoring.aio.MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoring`'s
        :attr:`projects` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def create_or_update(
        self,
        project_name: str,
        body: JSON,
        *,
        api_version: str,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> JSON:
        """Creates a new project or updates an existing one.

        :param project_name: Required.
        :type project_name: str
        :param body: Required.
        :type body: JSON
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "description": "str",  # Optional. The project description.
                    "language": "str",  # Optional. The project language. This is BCP-47
                      representation of a language. For example, use "en" for English, "en-gb" for
                      English (UK), "es" for Spanish etc.
                    "multilingual": bool,  # Optional. Whether the project would be used for
                      multiple languages or not.
                    "projectKind": "str",  # Optional. The project kind. Known values are:
                      "CustomSingleLabelClassification", "CustomMultiLabelClassification", and
                      "CustomEntityRecognition".
                    "settings": {
                        "str": "str"  # Optional. The project settings.
                    },
                    "storageInputContainerName": "str"  # Optional. The storage container name.
                }

                # response body for status code(s): 200, 201
                response == {
                    "createdDateTime": "str",  # Represents the project creation datetime.
                      Required.
                    "language": "str",  # The project language. This is BCP-47 representation of
                      a language. For example, use "en" for English, "en-gb" for English (UK), "es" for
                      Spanish etc. Required.
                    "lastDeployedDateTime": "str",  # Represents the project last deployment
                      datetime. Required.
                    "lastModifiedDateTime": "str",  # Represents the project last modification
                      datetime. Required.
                    "lastTrainedDateTime": "str",  # Represents the project last training
                      datetime. Required.
                    "projectKind": "str",  # The project kind. Required. Known values are:
                      "CustomSingleLabelClassification", "CustomMultiLabelClassification", and
                      "CustomEntityRecognition".
                    "projectName": "str",  # Required.
                    "storageInputContainerName": "str",  # The storage container name. Required.
                    "description": "str",  # Optional. The project description.
                    "multilingual": bool,  # Optional. Whether the project would be used for
                      multiple languages or not.
                    "settings": {
                        "str": "str"  # Optional. The project settings.
                    }
                }
        """

    @overload
    async def create_or_update(
        self,
        project_name: str,
        body: IO,
        *,
        api_version: str,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> JSON:
        """Creates a new project or updates an existing one.

        :param project_name: Required.
        :type project_name: str
        :param body: Required.
        :type body: IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "createdDateTime": "str",  # Represents the project creation datetime.
                      Required.
                    "language": "str",  # The project language. This is BCP-47 representation of
                      a language. For example, use "en" for English, "en-gb" for English (UK), "es" for
                      Spanish etc. Required.
                    "lastDeployedDateTime": "str",  # Represents the project last deployment
                      datetime. Required.
                    "lastModifiedDateTime": "str",  # Represents the project last modification
                      datetime. Required.
                    "lastTrainedDateTime": "str",  # Represents the project last training
                      datetime. Required.
                    "projectKind": "str",  # The project kind. Required. Known values are:
                      "CustomSingleLabelClassification", "CustomMultiLabelClassification", and
                      "CustomEntityRecognition".
                    "projectName": "str",  # Required.
                    "storageInputContainerName": "str",  # The storage container name. Required.
                    "description": "str",  # Optional. The project description.
                    "multilingual": bool,  # Optional. Whether the project would be used for
                      multiple languages or not.
                    "settings": {
                        "str": "str"  # Optional. The project settings.
                    }
                }
        """

    @distributed_trace_async
    async def create_or_update(
        self, project_name: str, body: Union[JSON, IO], *, api_version: str, **kwargs: Any
    ) -> JSON:
        """Creates a new project or updates an existing one.

        :param project_name: Required.
        :type project_name: str
        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "createdDateTime": "str",  # Represents the project creation datetime.
                      Required.
                    "language": "str",  # The project language. This is BCP-47 representation of
                      a language. For example, use "en" for English, "en-gb" for English (UK), "es" for
                      Spanish etc. Required.
                    "lastDeployedDateTime": "str",  # Represents the project last deployment
                      datetime. Required.
                    "lastModifiedDateTime": "str",  # Represents the project last modification
                      datetime. Required.
                    "lastTrainedDateTime": "str",  # Represents the project last training
                      datetime. Required.
                    "projectKind": "str",  # The project kind. Required. Known values are:
                      "CustomSingleLabelClassification", "CustomMultiLabelClassification", and
                      "CustomEntityRecognition".
                    "projectName": "str",  # Required.
                    "storageInputContainerName": "str",  # The storage container name. Required.
                    "description": "str",  # Optional. The project description.
                    "multilingual": bool,  # Optional. Whether the project would be used for
                      multiple languages or not.
                    "settings": {
                        "str": "str"  # Optional. The project settings.
                    }
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("content-type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_projects_create_or_update_request(
            project_name=project_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def get(self, project_name: str, *, api_version: str, **kwargs: Any) -> JSON:
        """Gets the details of a project.

        :param project_name: Required.
        :type project_name: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdDateTime": "str",  # Represents the project creation datetime.
                      Required.
                    "language": "str",  # The project language. This is BCP-47 representation of
                      a language. For example, use "en" for English, "en-gb" for English (UK), "es" for
                      Spanish etc. Required.
                    "lastDeployedDateTime": "str",  # Represents the project last deployment
                      datetime. Required.
                    "lastModifiedDateTime": "str",  # Represents the project last modification
                      datetime. Required.
                    "lastTrainedDateTime": "str",  # Represents the project last training
                      datetime. Required.
                    "projectKind": "str",  # The project kind. Required. Known values are:
                      "CustomSingleLabelClassification", "CustomMultiLabelClassification", and
                      "CustomEntityRecognition".
                    "projectName": "str",  # Required.
                    "storageInputContainerName": "str",  # The storage container name. Required.
                    "description": "str",  # Optional. The project description.
                    "multilingual": bool,  # Optional. Whether the project would be used for
                      multiple languages or not.
                    "settings": {
                        "str": "str"  # Optional. The project settings.
                    }
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_projects_get_request(
            project_name=project_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def delete(self, project_name: str, *, api_version: str, **kwargs: Any) -> JSON:
        """Deletes a project.

        :param project_name: Required.
        :type project_name: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "id": "str",  # The unique ID of the operation. Required.
                    "status": "str",  # The status of the operation. Required. Known values are:
                      "InProgress", "Succeeded", "Failed", and "Canceled".
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "details": [
                            ...
                        ],
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "innererror": {
                            "code": "str",  # One of a server-defined set of error codes.
                              Required.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    }
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_projects_delete_request(
            project_name=project_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def list(
        self,
        *,
        api_version: str,
        top: Optional[int] = None,
        skip: Optional[int] = None,
        maxpagesize: Optional[int] = None,
        **kwargs: Any
    ) -> JSON:
        """Lists the existing projects.

        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword top: Default value is None.
        :paramtype top: int
        :keyword skip: Default value is None.
        :paramtype skip: int
        :keyword maxpagesize: Default value is None.
        :paramtype maxpagesize: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "createdDateTime": "str",  # Represents the project creation
                              datetime. Required.
                            "language": "str",  # The project language. This is BCP-47
                              representation of a language. For example, use "en" for English, "en-gb"
                              for English (UK), "es" for Spanish etc. Required.
                            "lastDeployedDateTime": "str",  # Represents the project last
                              deployment datetime. Required.
                            "lastModifiedDateTime": "str",  # Represents the project last
                              modification datetime. Required.
                            "lastTrainedDateTime": "str",  # Represents the project last
                              training datetime. Required.
                            "projectKind": "str",  # The project kind. Required. Known
                              values are: "CustomSingleLabelClassification",
                              "CustomMultiLabelClassification", and "CustomEntityRecognition".
                            "projectName": "str",  # Required.
                            "storageInputContainerName": "str",  # The storage container
                              name. Required.
                            "description": "str",  # Optional. The project description.
                            "multilingual": bool,  # Optional. Whether the project would
                              be used for multiple languages or not.
                            "settings": {
                                "str": "str"  # Optional. The project settings.
                            }
                        }
                    ],
                    "nextLink": "str"  # Optional. The link to the next page of items.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_projects_list_request(
            api_version=api_version,
            top=top,
            skip=skip,
            maxpagesize=maxpagesize,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def export(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, *, project_file_version: str, api_version: str, **kwargs: Any
    ) -> None:
        """Triggers a job to export a project's data.

        :param project_name: Required.
        :type project_name: str
        :keyword project_file_version: Required.
        :paramtype project_file_version: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_projects_export_request(
            project_name=project_name,
            project_file_version=project_file_version,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace_async
    async def importx(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, *, api_version: str, **kwargs: Any
    ) -> None:
        """Triggers a job to export a project's data.

        :param project_name: Required.
        :type project_name: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_projects_importx_request(
            project_name=project_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if cls:
            return cls(pipeline_response, None, response_headers)

    @overload
    async def train(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, body: JSON, *, api_version: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Triggers a training job for a project.

        :param project_name: Required.
        :type project_name: str
        :param body: Required.
        :type body: JSON
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "modelLabel": "str"  # Required.
                }
        """

    @overload
    async def train(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, body: IO, *, api_version: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Triggers a training job for a project.

        :param project_name: Required.
        :type project_name: str
        :param body: Required.
        :type body: IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def train(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, body: Union[JSON, IO], *, api_version: str, **kwargs: Any
    ) -> None:
        """Triggers a training job for a project.

        :param project_name: Required.
        :type project_name: str
        :param body: Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_projects_train_request(
            project_name=project_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if cls:
            return cls(pipeline_response, None, response_headers)


class DeploymentsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.language.authoring.aio.MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoring`'s
        :attr:`deployments` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_deployment(self, project_name: str, deployment_name: str, *, api_version: str, **kwargs: Any) -> JSON:
        """Gets the details of a deployment.

        :param project_name: Required.
        :type project_name: str
        :param deployment_name: Required.
        :type deployment_name: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "name": "str"  # Required.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_deployments_get_deployment_request(
            project_name=project_name,
            deployment_name=deployment_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def deploy_project(self, project_name: str, deployment_name: str, *, api_version: str, **kwargs: Any) -> JSON:
        """Creates a new deployment or replaces an existing one.

        :param project_name: Required.
        :type project_name: str
        :param deployment_name: Required.
        :type deployment_name: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "name": "str"  # Required.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_deployments_deploy_project_request(
            project_name=project_name,
            deployment_name=deployment_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def delete_deployment(
        self, project_name: str, deployment_name: str, *, api_version: str, **kwargs: Any
    ) -> JSON:
        """Deletes a project deployment.

        :param project_name: Required.
        :type project_name: str
        :param deployment_name: Required.
        :type deployment_name: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "id": "str",  # The unique ID of the operation. Required.
                    "status": "str",  # The status of the operation. Required. Known values are:
                      "InProgress", "Succeeded", "Failed", and "Canceled".
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "details": [
                            ...
                        ],
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "innererror": {
                            "code": "str",  # One of a server-defined set of error codes.
                              Required.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    }
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_deployments_delete_deployment_request(
            project_name=project_name,
            deployment_name=deployment_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def list(self, project_name: str, *, api_version: str, **kwargs: Any) -> JSON:
        """Lists the existing deployments.

        :param project_name: Required.
        :type project_name: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "name": "str"  # Required.
                        }
                    ],
                    "nextLink": "str"  # Optional. The link to the next page of items.
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_deployments_list_request(
            project_name=project_name,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    async def swap_deployments(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, body: JSON, *, api_version: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Swaps two existing deployments with each other.

        :param project_name: Required.
        :type project_name: str
        :param body: The body schema of the operation. Required.
        :type body: JSON
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "firstDeploymentName": "str",  # Represents the first deployment name.
                      Required.
                    "secondDeploymentName": "str"  # Represents the second deployment name.
                      Required.
                }
        """

    @overload
    async def swap_deployments(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, body: IO, *, api_version: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Swaps two existing deployments with each other.

        :param project_name: Required.
        :type project_name: str
        :param body: The body schema of the operation. Required.
        :type body: IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def swap_deployments(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, body: Union[JSON, IO], *, api_version: str, **kwargs: Any
    ) -> None:
        """Swaps two existing deployments with each other.

        :param project_name: Required.
        :type project_name: str
        :param body: The body schema of the operation. Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_deployments_swap_deployments_request(
            project_name=project_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if cls:
            return cls(pipeline_response, None, response_headers)


class JobsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.language.authoring.aio.MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoring`'s
        :attr:`jobs` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace_async
    async def get_deployment_status(
        self, project_name: str, deployment_name: str, job_id: str, *, api_version: str, **kwargs: Any
    ) -> JSON:
        """Gets the status of an existing deployment job.

        :param project_name: Required.
        :type project_name: str
        :param deployment_name: Required.
        :type deployment_name: str
        :param job_id: Required.
        :type job_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdDateTime": "str",  # The creation date time of the job. Required.
                    "errors": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "details": [
                            ...
                        ],
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "innererror": {
                            "code": "str",  # One of a server-defined set of error codes.
                              Required.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "expirationDateTime": "str",  # The expiration date time of the job.
                      Required.
                    "id": "str",  # Required.
                    "jobId": "str",  # The job ID. Required.
                    "lastUpdatedDateTime": "str",  # The the last date time the job was updated.
                      Required.
                    "status": "str",  # The job status. Required. Known values are: "notStarted",
                      "running", "succeeded", "failed", "cancelled", "cancelling", and
                      "partiallyCompleted".
                    "warnings": [
                        {
                            "code": "str",  # The warning code. Required.
                            "message": "str"  # The warning message. Required.
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_jobs_get_deployment_status_request(
            project_name=project_name,
            deployment_name=deployment_name,
            job_id=job_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace_async
    async def get_swap_deployments_status(
        self, project_name: str, deployment_name: str, job_id: str, *, api_version: str, **kwargs: Any
    ) -> JSON:
        """Gets the status of an existing swap deployment job.

        :param project_name: Required.
        :type project_name: str
        :param deployment_name: Required.
        :type deployment_name: str
        :param job_id: Required.
        :type job_id: str
        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdDateTime": "str",  # The creation date time of the job. Required.
                    "errors": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "details": [
                            ...
                        ],
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "innererror": {
                            "code": "str",  # One of a server-defined set of error codes.
                              Required.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "expirationDateTime": "str",  # The expiration date time of the job.
                      Required.
                    "id": "str",  # Required.
                    "jobId": "str",  # The job ID. Required.
                    "lastUpdatedDateTime": "str",  # The the last date time the job was updated.
                      Required.
                    "status": "str",  # The job status. Required. Known values are: "notStarted",
                      "running", "succeeded", "failed", "cancelled", "cancelling", and
                      "partiallyCompleted".
                    "warnings": [
                        {
                            "code": "str",  # The warning code. Required.
                            "message": "str"  # The warning message. Required.
                        }
                    ]
                }
        """
        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_jobs_get_swap_deployments_status_request(
            project_name=project_name,
            deployment_name=deployment_name,
            job_id=job_id,
            api_version=api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class GlobalOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.language.authoring.aio.MicrosoftCognitiveLanguageServiceAnalyzeTextAuthoring`'s
        :attr:`global_operations` attribute.
    """

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get_supported_languages(
        self, *, api_version: str, top: Optional[int] = None, skip: Optional[int] = None, **kwargs: Any
    ) -> AsyncIterable[JSON]:
        """get_supported_languages.

        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword top: Default value is None.
        :paramtype top: int
        :keyword skip: Default value is None.
        :paramtype skip: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "languageCode": "str",  # The language code. This is BCP-47 representation of
                      a language. For example, "en" for English, "en-gb" for English (UK), "es" for
                      Spanish etc. Required.
                    "languageName": "str"  # The language name. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_global_operations_get_supported_languages_request(
                    api_version=api_version,
                    top=top,
                    skip=skip,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                request = HttpRequest("GET", next_link)
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            return request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_training_config_versions(
        self, *, api_version: str, top: Optional[int] = None, skip: Optional[int] = None, **kwargs: Any
    ) -> AsyncIterable[JSON]:
        """list_training_config_versions.

        :keyword api_version: The API version to use for this operation. Required.
        :paramtype api_version: str
        :keyword top: Default value is None.
        :paramtype top: int
        :keyword skip: Default value is None.
        :paramtype skip: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.async_paging.AsyncItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "modelExpirationDate": "2020-02-20",  # Represents the training config
                      version expiration date. Required.
                    "trainingConfigVersion": "str"  # Represents the version of the config.
                      Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_global_operations_list_training_config_versions_request(
                    api_version=api_version,
                    top=top,
                    skip=skip,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                request = HttpRequest("GET", next_link)
                path_format_arguments = {
                    "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            return request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)
