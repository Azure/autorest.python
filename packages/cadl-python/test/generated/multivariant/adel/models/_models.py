# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AlertConfig(_model_base.Model):
    """Criteria that determine which anomalies should trigger an alert and via which notification channel(s). This setting can later be applied to a live inference schedule.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    DataNotAvailableAlertConfig, MultiVariateAnomalyAlertConfig

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar alert_config_name: Unique identifier of an alert configuration. This parameter is
     case-sensitive. Required.
    :vartype alert_config_name: str
    :ivar alert_description: (Optional) Detailed description of an alert configuration.
    :vartype alert_description: str
    :ivar hook_names: (Optional) Specifies the list of notification channel(s) through which the
     alerts will be sent. If left blank, anomalies will still be detected but no alerts will be sent
     out. This parameter is case-sensitive.
    :vartype hook_names: list[str]
    :ivar created_time: The UTC time at which the alert configuration was created. Required.
    :vartype created_time: ~datetime.datetime
    :ivar parameter_modified_time: The UTC time at which the parameter(s) of the alert
     configuration was last modified by the users (if applicable). Required.
    :vartype parameter_modified_time: ~datetime.datetime
    :ivar alert_config_type: Required. Default value is "MultiVariateAnomaly".
    :vartype alert_config_type: str
    """

    __mapping__ = {}
    alert_config_name: str = rest_field(name="alertConfigName", readonly=True)
    """Unique identifier of an alert configuration. This parameter is case-sensitive. Required. """
    alert_description: Optional[str] = rest_field(name="alertDescription")
    """(Optional) Detailed description of an alert configuration. """
    hook_names: Optional[List[str]] = rest_field(name="hookNames")
    """(Optional) Specifies the list of notification channel(s) through which the alerts will be sent. If left blank, anomalies will still be detected but no alerts will be sent out. This parameter is case-sensitive. """
    created_time: datetime.datetime = rest_field(name="createdTime", readonly=True)
    """The UTC time at which the alert configuration was created. Required. """
    parameter_modified_time: datetime.datetime = rest_field(name="parameterModifiedTime", readonly=True)
    """The UTC time at which the parameter(s) of the alert configuration was last modified by the users (if applicable). Required. """
    alert_config_type: str = rest_discriminator(name="alertConfigType")
    """Required. Default value is \"MultiVariateAnomaly\"."""

    @overload
    def __init__(
        self,
        *,
        alert_description: Optional[str] = None,
        hook_names: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class AlignPolicy(_model_base.Model):
    """Settings that control how variables are aligned to the same data frequency interval and how missing values are handled.

    All required parameters must be populated in order to send to Azure.

    :ivar align_mode: How to align variables to the same data frequency interval before further
     processing. Inner mode returns results on timestamps where EVERY variable has a value. Outer
     mode returns results on timestamps where ANY variable has a value. The default mode is Outer.
     Required. Known values are: "Inner" and "Outer".
    :vartype align_mode: str or ~adel.models.AlignMode
    :ivar fill_n_a_method: How to populate any missing values in the dataset. The default method is
     Linear where missing values are filled by linear interpolation. If Customized method is
     selected, all missing values are filled by the value specified in paddingValue. Required. Known
     values are: "Previous", "Subsequent", "Linear", and "Customized".
    :vartype fill_n_a_method: str or ~adel.models.FillNAMethod
    :ivar padding_value: Specify the value to be used for Customized fillNAMethod. This is required
     if you chose Customized fillNAMethod but optional for other methods.
    :vartype padding_value: float
    """

    align_mode: Union[str, "AlignMode"] = rest_field(name="alignMode")
    """How to align variables to the same data frequency interval before further processing. Inner mode returns results on timestamps where EVERY variable has a value. Outer mode returns results on timestamps where ANY variable has a value. The default mode is Outer. Required. Known values are: \"Inner\" and \"Outer\"."""
    fill_n_a_method: Union[str, "FillNAMethod"] = rest_field(name="fillNAMethod")
    """How to populate any missing values in the dataset. The default method is Linear where missing values are filled by linear interpolation. If Customized method is selected, all missing values are filled by the value specified in paddingValue. Required. Known values are: \"Previous\", \"Subsequent\", \"Linear\", and \"Customized\"."""
    padding_value: Optional[float] = rest_field(name="paddingValue")
    """Specify the value to be used for Customized fillNAMethod. This is required if you chose Customized fillNAMethod but optional for other methods. """

    @overload
    def __init__(
        self,
        *,
        align_mode: Union[str, "_models.AlignMode"],
        fill_n_a_method: Union[str, "_models.FillNAMethod"],
        padding_value: Optional[float] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class AnomalyInterpretation(_model_base.Model):
    """Information on variables that contributed to a given anomaly. This field only applies to timestamps that are detected as anomalies.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar variable: Name of the top contributing variable to a given anomaly. Required.
    :vartype variable: str
    :ivar contribution_score: Higher contribution score indicates a higher possibility of this
     contributing variable being the root cause. Required.
    :vartype contribution_score: float
    :ivar correlation_changes: A list of correlated variable(s) whose correlation with this
     contributing variable has changed significantly. This field can be empty if there were no
     significant correlation changes between the contributing variable and other variables.
     Required.
    :vartype correlation_changes: ~adel.models.CorrelationChanges
    """

    variable: str = rest_field(name="variable", readonly=True)
    """Name of the top contributing variable to a given anomaly. Required. """
    contribution_score: float = rest_field(name="contributionScore", readonly=True)
    """Higher contribution score indicates a higher possibility of this contributing variable being the root cause. Required. """
    correlation_changes: "CorrelationChanges" = rest_field(name="correlationChanges", readonly=True)
    """A list of correlated variable(s) whose correlation with this contributing variable has changed significantly. This field can be empty if there were no significant correlation changes between the contributing variable and other variables. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class AnomalyState(_model_base.Model):
    """Summarizes the anomaly detection results for each timestamp.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar timestamp: The timestamp being detected. Required.
    :vartype timestamp: ~datetime.datetime
    :ivar value: Detection results for a given timestamp and information for diagnosing if the
     timestamp is an anomaly. Required.
    :vartype value: ~adel.models.AnomalyValue
    :ivar errors: Error details if the anomaly detection job failed. Required.
    :vartype errors: list[~adel.models.ErrorResponse]
    """

    timestamp: datetime.datetime = rest_field(name="timestamp", readonly=True)
    """The timestamp being detected. Required. """
    value: "AnomalyValue" = rest_field(name="value", readonly=True)
    """Detection results for a given timestamp and information for diagnosing if the timestamp is an anomaly. Required. """
    errors: List["ErrorResponse"] = rest_field(name="errors", readonly=True)
    """Error details if the anomaly detection job failed. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class AnomalyValue(_model_base.Model):
    """Detection results for a given timestamp and information for diagnosing if the timestamp is an anomaly.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar is_anomaly: True if the given timestamp is an anomaly. Required.
    :vartype is_anomaly: bool
    :ivar score: Raw output of the model. Required.
    :vartype score: float
    :ivar severity: Indicates the significance of the anomaly. The higher the severity, the more
     significant the anomaly. Severity is 0 for normal timestamps (i.e., isAnomaly = false).
     Required.
    :vartype severity: float
    :ivar interpretation: A list containing information on variables that contributed to a given
     anomaly. Required.
    :vartype interpretation: list[~adel.models.AnomalyInterpretation]
    """

    is_anomaly: bool = rest_field(name="isAnomaly", readonly=True)
    """True if the given timestamp is an anomaly. Required. """
    score: float = rest_field(name="score", readonly=True)
    """Raw output of the model. Required. """
    severity: float = rest_field(name="severity", readonly=True)
    """Indicates the significance of the anomaly. The higher the severity, the more significant the anomaly. Severity is 0 for normal timestamps (i.e., isAnomaly = false). Required. """
    interpretation: List["AnomalyInterpretation"] = rest_field(name="interpretation", readonly=True)
    """A list containing information on variables that contributed to a given anomaly. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class CorrelationChanges(_model_base.Model):
    """A list of correlated variable(s) whose correlation with this contributing variable has changed significantly. This field can be empty if there were no significant correlation changes between the contributing variable and other variables.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar changed_variables: The list of variable(s) whose correlation to the contributing variable
     has changed. Required.
    :vartype changed_variables: list[str]
    :ivar changed_values: The extent to which the correlation(s) has changed. Required.
    :vartype changed_values: list[float]
    """

    changed_variables: List[str] = rest_field(name="changedVariables", readonly=True)
    """The list of variable(s) whose correlation to the contributing variable has changed. Required. """
    changed_values: List[float] = rest_field(name="changedValues", readonly=True)
    """The extent to which the correlation(s) has changed. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DataNotAvailableAlertConfig(AlertConfig, discriminator="DataNotAvailable"):
    """DataNotAvailable alert will be triggered if no data can be fetched from the data source.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar alert_config_name: Unique identifier of an alert configuration. This parameter is
     case-sensitive. Required.
    :vartype alert_config_name: str
    :ivar alert_description: (Optional) Detailed description of an alert configuration.
    :vartype alert_description: str
    :ivar hook_names: (Optional) Specifies the list of notification channel(s) through which the
     alerts will be sent. If left blank, anomalies will still be detected but no alerts will be sent
     out. This parameter is case-sensitive.
    :vartype hook_names: list[str]
    :ivar created_time: The UTC time at which the alert configuration was created. Required.
    :vartype created_time: ~datetime.datetime
    :ivar parameter_modified_time: The UTC time at which the parameter(s) of the alert
     configuration was last modified by the users (if applicable). Required.
    :vartype parameter_modified_time: ~datetime.datetime
    :ivar alert_config_type: Required. Default value is "DataNotAvailable".
    :vartype alert_config_type: str
    """

    @overload
    def __init__(
        self,
        *,
        alert_description: Optional[str] = None,
        hook_names: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.alert_config_type = "DataNotAvailable"  # type: str


class DataSchema(_model_base.Model):
    """Format and schema details of your data.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    LongTable

    All required parameters must be populated in order to send to Azure.

    :ivar data_schema_type: Required. Default value is "LongTable".
    :vartype data_schema_type: str
    """

    __mapping__ = {}
    data_schema_type: str = rest_discriminator(name="dataSchemaType")
    """Required. Default value is \"LongTable\"."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Dataset(_model_base.Model):
    """Summarizes information about the dataset, including name, description, data source type, data schema, data granularity, and associated metadata. A dataset can be used for either training, evaluation, or real-time inference.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar dataset_name: Unique identifier of a dataset. This parameter is case-sensitive. Required.
    :vartype dataset_name: str
    :ivar dataset_description: (Optional) Detailed description of a dataset.
    :vartype dataset_description: str
    :ivar data_source_info: Details about your data source, including data source type, location,
     authentication method, and so on. Required.
    :vartype data_source_info: ~adel.models.DataSourceInfo
    :ivar data_schema: Format and schema details of the dataset. Required.
    :vartype data_schema: ~adel.models.DataSchema
    :ivar data_granularity_number: The frequency interval at which new records are added to your
     data. Make sure that each variable has at most one data point within each interval. Required.
    :vartype data_granularity_number: int
    :ivar data_granularity_unit: The unit of your data frequency interval. Required. Known values
     are: "Minutes", "Hours", "Days", "Weeks", "Months", and "Years".
    :vartype data_granularity_unit: str or ~adel.models.DataGranularityUnit
    :ivar created_time: The UTC time at which the dataset was created. Required.
    :vartype created_time: ~datetime.datetime
    """

    dataset_name: str = rest_field(name="datasetName", readonly=True)
    """Unique identifier of a dataset. This parameter is case-sensitive. Required. """
    dataset_description: Optional[str] = rest_field(name="datasetDescription")
    """(Optional) Detailed description of a dataset. """
    data_source_info: "DataSourceInfo" = rest_field(name="dataSourceInfo")
    """Details about your data source, including data source type, location, authentication method, and so on. Required. """
    data_schema: "DataSchema" = rest_field(name="dataSchema")
    """Format and schema details of the dataset. Required. """
    data_granularity_number: int = rest_field(name="dataGranularityNumber")
    """The frequency interval at which new records are added to your data. Make sure that each variable has at most one data point within each interval. Required. """
    data_granularity_unit: Union[str, "DataGranularityUnit"] = rest_field(name="dataGranularityUnit")
    """The unit of your data frequency interval. Required. Known values are: \"Minutes\", \"Hours\", \"Days\", \"Weeks\", \"Months\", and \"Years\"."""
    created_time: datetime.datetime = rest_field(name="createdTime", readonly=True)
    """The UTC time at which the dataset was created. Required. """

    @overload
    def __init__(
        self,
        *,
        data_source_info: "_models.DataSourceInfo",
        data_schema: "_models.DataSchema",
        data_granularity_number: int,
        data_granularity_unit: Union[str, "_models.DataGranularityUnit"],
        dataset_description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DatasetPreviewRequest(_model_base.Model):
    """Verify data schema and preview data before/after a dataset is created. View raw data to better diagnose and explain a detected anomaly.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_info: Details about your data source, including data source type, location,
     authentication method, and so on. Required.
    :vartype data_source_info: ~adel.models.DataSourceInfo
    :ivar data_schema: Format and schema details of the dataset. Required.
    :vartype data_schema: ~adel.models.DataSchema
    :ivar data_granularity_number: The frequency interval at which new records are added to your
     data. Make sure that each variable has at most one data point within each interval. Required.
    :vartype data_granularity_number: int
    :ivar data_granularity_unit: The unit of your data frequency interval. Required. Known values
     are: "Minutes", "Hours", "Days", "Weeks", "Months", and "Years".
    :vartype data_granularity_unit: str or ~adel.models.DataGranularityUnit
    :ivar top: The total number of rows to be returned. By default, the records are sorted by the
     timestamp column in descending order.
    :vartype top: int
    :ivar time_range: The list of time range(s) for which the data points will be returned. By
     default, there will be no filtering on time range and the number of records specified in the
     top field.
    :vartype time_range: ~adel.models.TimeRange
    :ivar variables_filter: The list of variable(s) for which the data points will be returned. By
     default, all variables will be returned.
    :vartype variables_filter: list[str]
    """

    data_source_info: "DataSourceInfo" = rest_field(name="dataSourceInfo")
    """Details about your data source, including data source type, location, authentication method, and so on. Required. """
    data_schema: "DataSchema" = rest_field(name="dataSchema")
    """Format and schema details of the dataset. Required. """
    data_granularity_number: int = rest_field(name="dataGranularityNumber")
    """The frequency interval at which new records are added to your data. Make sure that each variable has at most one data point within each interval. Required. """
    data_granularity_unit: Union[str, "DataGranularityUnit"] = rest_field(name="dataGranularityUnit")
    """The unit of your data frequency interval. Required. Known values are: \"Minutes\", \"Hours\", \"Days\", \"Weeks\", \"Months\", and \"Years\"."""
    top: Optional[int] = rest_field(name="top")
    """The total number of rows to be returned. By default, the records are sorted by the timestamp column in descending order. """
    time_range: Optional["TimeRange"] = rest_field(name="timeRange")
    """The list of time range(s) for which the data points will be returned. By default, there will be no filtering on time range and the number of records specified in the top field. """
    variables_filter: Optional[List[str]] = rest_field(name="variablesFilter")
    """The list of variable(s) for which the data points will be returned. By default, all variables will be returned. """

    @overload
    def __init__(
        self,
        *,
        data_source_info: "_models.DataSourceInfo",
        data_schema: "_models.DataSchema",
        data_granularity_number: int,
        data_granularity_unit: Union[str, "_models.DataGranularityUnit"],
        top: Optional[int] = None,
        time_range: Optional["_models.TimeRange"] = None,
        variables_filter: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DatasetPreviewResponse(_model_base.Model):
    """Returns data aligned to the data granularity.

    All required parameters must be populated in order to send to Azure.

    :ivar columns: Column headers. Required.
    :vartype columns: list[str]
    :ivar values: Values for the corresponding columns headers. This values are aligned to the data
     granularity. Required.
    :vartype values: list[list[str]]
    """

    columns: List[str] = rest_field(name="columns")
    """Column headers. Required. """
    values: List[List[str]] = rest_field(name="values")
    """Values for the corresponding columns headers. This values are aligned to the data granularity. Required. """

    @overload
    def __init__(
        self,
        *,
        columns: List[str],
        values: List[List[str]],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DataSourceInfo(_model_base.Model):
    """Details about your data source, including data source type, location, authentication method, and so on.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    SqlServer

    All required parameters must be populated in order to send to Azure.

    :ivar authentication_type: Required. "ManagedIdentity"
    :vartype authentication_type: str or ~adel.models.AuthenticationType
    :ivar data_source_type: Required. Default value is "SqlServer".
    :vartype data_source_type: str
    """

    __mapping__ = {}
    authentication_type: Union[str, "AuthenticationType"] = rest_field(name="authenticationType")
    """Required. \"ManagedIdentity\""""
    data_source_type: str = rest_discriminator(name="dataSourceType")
    """Required. Default value is \"SqlServer\"."""

    @overload
    def __init__(
        self,
        *,
        authentication_type: Union[str, "_models.AuthenticationType"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DetectionRequest(_model_base.Model):
    """The multivariate time-series data to be used for inference.

    All required parameters must be populated in order to send to Azure.

    :ivar variables: A list of variables to detect. Required.
    :vartype variables: list[~adel.models.VariableValues]
    :ivar start_time: The first timestamp equal to or greater than the start time given will be
     processed. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The last timestamp equal to or less than the end time given will be processed.
     If endTime equals to startTime, one single data point will be processed. Required.
    :vartype end_time: ~datetime.datetime
    """

    variables: List["VariableValues"] = rest_field(name="variables")
    """A list of variables to detect. Required. """
    start_time: datetime.datetime = rest_field(name="startTime")
    """The first timestamp equal to or greater than the start time given will be processed. Required. """
    end_time: datetime.datetime = rest_field(name="endTime")
    """The last timestamp equal to or less than the end time given will be processed. If endTime equals to startTime, one single data point will be processed. Required. """

    @overload
    def __init__(
        self,
        *,
        variables: List["_models.VariableValues"],
        start_time: datetime.datetime,
        end_time: datetime.datetime,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DetectionResult(_model_base.Model):
    """Summarizes information about the variables being used and the anomaly detection results for each timestamp.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar variable_states: Summarizes information about each variable being used. Ranked by
     filledNARatio in descending order. Required.
    :vartype variable_states: list[~adel.models.VariableState]
    :ivar results: Summarizes the anomaly detection results for each timestamp. Required.
    :vartype results: list[~adel.models.AnomalyState]
    :ivar errors: Error details if the anomaly detection job failed. Required.
    :vartype errors: list[~adel.models.ErrorResponse]
    """

    variable_states: List["VariableState"] = rest_field(name="variableStates", readonly=True)
    """Summarizes information about each variable being used. Ranked by filledNARatio in descending order. Required. """
    results: List["AnomalyState"] = rest_field(name="results", readonly=True)
    """Summarizes the anomaly detection results for each timestamp. Required. """
    errors: List["ErrorResponse"] = rest_field(name="errors", readonly=True)
    """Error details if the anomaly detection job failed. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class DiagnosticsInfo(_model_base.Model):
    """Summarizes information about the model and each variable being used.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar model_state: Summarizes information about the model, including name, description,
     training data, the number of variables being used, training status, and associated metadata.
     Required.
    :vartype model_state: ~adel.models.ModelState
    :ivar variable_states: Summarizes information about each variable being used. Ranked by
     filledNARatio in descending order. Required.
    :vartype variable_states: list[~adel.models.VariableState]
    """

    model_state: "ModelState" = rest_field(name="modelState", readonly=True)
    """Summarizes information about the model, including name, description, training data, the number of variables being used, training status, and associated metadata. Required. """
    variable_states: List["VariableState"] = rest_field(name="variableStates", readonly=True)
    """Summarizes information about each variable being used. Ranked by filledNARatio in descending order. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Error(_model_base.Model):
    """Error.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Required.
    :vartype error: ~adel.models.ErrorProperty
    """

    error: "ErrorProperty" = rest_field(name="error")
    """Required. """

    @overload
    def __init__(
        self,
        *,
        error: "_models.ErrorProperty",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ErrorProperty(_model_base.Model):
    """ErrorProperty.

    All required parameters must be populated in order to send to Azure.

    :ivar code: Required.
    :vartype code: str
    :ivar message: Required.
    :vartype message: str
    """

    code: str = rest_field(name="code")
    """Required. """
    message: str = rest_field(name="message")
    """Required. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """Error details for a failed job.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar code: The error code. Required.
    :vartype code: str
    :ivar message: The message explaining the error reported by the service. Required.
    :vartype message: str
    """

    code: str = rest_field(name="code", readonly=True)
    """The error code. Required. """
    message: str = rest_field(name="message", readonly=True)
    """The message explaining the error reported by the service. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Evaluation(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Specifies information about the model evaluation being used, including name, description, model, evaluation data, evaluation time range, status, and associated metadata.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar evaluation_name: Unique identifier of a model evaluation. This parameter is
     case-sensitive. Required.
    :vartype evaluation_name: str
    :ivar evaluation_description: (Optional) Detailed description of a model evaluation.
    :vartype evaluation_description: str
    :ivar model_name: The model being evaluated. This parameter is case-sensitive. Required.
    :vartype model_name: str
    :ivar dataset_name: The data being used to evaluate the model. This evaluation dataset should
     have the same schema and data granularity as the training dataset for the model. This parameter
     is case-sensitive. Required.
    :vartype dataset_name: str
    :ivar start_time: The first timestamp equal to or greater than the start time given will be
     used for model evaluation. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The last timestamp equal to or less than the end time given will be used for
     model evaluation. If endTime equals to startTime, one single data point will be processed.
     Required.
    :vartype end_time: ~datetime.datetime
    :ivar status: Current status of the model evaluation job. Required. Known values are:
     "CREATED", "RUNNING", "COMPLETED", and "FAILED".
    :vartype status: str or ~adel.models.EvaluationStatus
    :ivar status_updated_time: The UTC time at which the status of the model evaluation job was
     last updated (if applicable). Required.
    :vartype status_updated_time: ~datetime.datetime
    :ivar errors: Error details if the model evaluation job failed. Required.
    :vartype errors: list[~adel.models.ErrorResponse]
    :ivar result_url: The Azure blob URL that stores the model evaluation results. This URL will
     expire in 12 hours. Required.
    :vartype result_url: str
    :ivar variable_states: Summarizes information about each variable being used. Ranked by
     filledNARatio in descending order. Required.
    :vartype variable_states: list[~adel.models.VariableState]
    :ivar created_time: The UTC time at which the model evaluation job was created. Required.
    :vartype created_time: ~datetime.datetime
    """

    evaluation_name: str = rest_field(name="evaluationName", readonly=True)
    """Unique identifier of a model evaluation. This parameter is case-sensitive. Required. """
    evaluation_description: Optional[str] = rest_field(name="evaluationDescription")
    """(Optional) Detailed description of a model evaluation. """
    model_name: str = rest_field(name="modelName")
    """The model being evaluated. This parameter is case-sensitive. Required. """
    dataset_name: str = rest_field(name="datasetName")
    """The data being used to evaluate the model. This evaluation dataset should have the same schema and data granularity as the training dataset for the model. This parameter is case-sensitive. Required. """
    start_time: datetime.datetime = rest_field(name="startTime")
    """The first timestamp equal to or greater than the start time given will be used for model evaluation. Required. """
    end_time: datetime.datetime = rest_field(name="endTime")
    """The last timestamp equal to or less than the end time given will be used for model evaluation. If endTime equals to startTime, one single data point will be processed. Required. """
    status: Union[str, "EvaluationStatus"] = rest_field(name="status", readonly=True)
    """Current status of the model evaluation job. Required. Known values are: \"CREATED\", \"RUNNING\", \"COMPLETED\", and \"FAILED\"."""
    status_updated_time: datetime.datetime = rest_field(name="statusUpdatedTime", readonly=True)
    """The UTC time at which the status of the model evaluation job was last updated (if applicable). Required. """
    errors: List["ErrorResponse"] = rest_field(name="errors", readonly=True)
    """Error details if the model evaluation job failed. Required. """
    result_url: str = rest_field(name="resultUrl", readonly=True)
    """The Azure blob URL that stores the model evaluation results. This URL will expire in 12 hours. Required. """
    variable_states: List["VariableState"] = rest_field(name="variableStates", readonly=True)
    """Summarizes information about each variable being used. Ranked by filledNARatio in descending order. Required. """
    created_time: datetime.datetime = rest_field(name="createdTime", readonly=True)
    """The UTC time at which the model evaluation job was created. Required. """

    @overload
    def __init__(
        self,
        *,
        model_name: str,
        dataset_name: str,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
        evaluation_description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Hook(_model_base.Model):
    """A hook is a channel to receive alert notifications.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Webhook

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar hook_name: Unique identifier of a hook. This parameter is case-sensitive. Required.
    :vartype hook_name: str
    :ivar hook_description: (Optional) Detailed description of a hook.
    :vartype hook_description: str
    :ivar created_time: The UTC time at which the hook was created. Required.
    :vartype created_time: ~datetime.datetime
    :ivar parameter_modified_time: The UTC time at which the parameter(s) of the hook was last
     modified by the users (if applicable). Required.
    :vartype parameter_modified_time: ~datetime.datetime
    :ivar hook_type: Required. Default value is "Webhook".
    :vartype hook_type: str
    """

    __mapping__ = {}
    hook_name: str = rest_field(name="hookName", readonly=True)
    """Unique identifier of a hook. This parameter is case-sensitive. Required. """
    hook_description: Optional[str] = rest_field(name="hookDescription")
    """(Optional) Detailed description of a hook. """
    created_time: datetime.datetime = rest_field(name="createdTime", readonly=True)
    """The UTC time at which the hook was created. Required. """
    parameter_modified_time: datetime.datetime = rest_field(name="parameterModifiedTime", readonly=True)
    """The UTC time at which the parameter(s) of the hook was last modified by the users (if applicable). Required. """
    hook_type: str = rest_discriminator(name="hookType")
    """Required. Default value is \"Webhook\"."""

    @overload
    def __init__(
        self,
        *,
        hook_description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class LongTable(DataSchema, discriminator="LongTable"):
    """A long-form data table has a single column that stores all the variables.

    All required parameters must be populated in order to send to Azure.

    :ivar data_schema_type: Required. Default value is "LongTable".
    :vartype data_schema_type: str
    :ivar timestamp_column_name: Header of the column that contains datetime values. This parameter
     is case-sensitive. Required.
    :vartype timestamp_column_name: str
    :ivar variable_column_name: Header of the column that contains the name of the variable for
     each data point. This parameter is case-sensitive. Required.
    :vartype variable_column_name: str
    :ivar value_column_name: Header of the column that contains numeric values. This parameter is
     case-sensitive. Required.
    :vartype value_column_name: str
    """

    timestamp_column_name: str = rest_field(name="timestampColumnName")
    """Header of the column that contains datetime values. This parameter is case-sensitive. Required. """
    variable_column_name: str = rest_field(name="variableColumnName")
    """Header of the column that contains the name of the variable for each data point. This parameter is case-sensitive. Required. """
    value_column_name: str = rest_field(name="valueColumnName")
    """Header of the column that contains numeric values. This parameter is case-sensitive. Required. """

    @overload
    def __init__(
        self,
        *,
        timestamp_column_name: str,
        variable_column_name: str,
        value_column_name: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.data_schema_type = "LongTable"  # type: str


class Model(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Summarizes information about the model, including name, description, training data, training time range(s), the number of variables being used, training status, and associated metadata.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar model_name: Unique identifier of a model. This parameter is case-sensitive. Required.
    :vartype model_name: str
    :ivar model_description: (Optional) Detailed description of a model.
    :vartype model_description: str
    :ivar dataset_name: Data used for model training. This parameter is case-sensitive. Required.
    :vartype dataset_name: str
    :ivar training_time_range_list: A list of time ranges used for model training. Both the start
     and end timestamps are inclusive. Required.
    :vartype training_time_range_list: list[~adel.models.TimeRange]
    :ivar sliding_window: Controls how many previous data points get used to determine if the next
     data point is an anomaly.
    :vartype sliding_window: int
    :ivar align_policy: Settings that control how variables are aligned to the same data frequency
     interval and how missing values are handled. Required.
    :vartype align_policy: ~adel.models.AlignPolicy
    :ivar diagnostics_info: Summarizes information about the model and each variable being used.
     Required.
    :vartype diagnostics_info: ~adel.models.DiagnosticsInfo
    :ivar status: Current status of the model training job. Required. Known values are: "CREATED",
     "RUNNING", "COMPLETED", and "FAILED".
    :vartype status: str or ~adel.models.ModelStatus
    :ivar status_updated_time: The UTC time at which the training status of the model was last
     updated (if applicable). Required.
    :vartype status_updated_time: ~datetime.datetime
    :ivar errors: Error details if the model training job failed. Required.
    :vartype errors: list[~adel.models.ErrorResponse]
    :ivar created_time: The UTC time at which the model was created. Required.
    :vartype created_time: ~datetime.datetime
    """

    model_name: str = rest_field(name="modelName", readonly=True)
    """Unique identifier of a model. This parameter is case-sensitive. Required. """
    model_description: Optional[str] = rest_field(name="modelDescription")
    """(Optional) Detailed description of a model. """
    dataset_name: str = rest_field(name="datasetName")
    """Data used for model training. This parameter is case-sensitive. Required. """
    training_time_range_list: List["TimeRange"] = rest_field(name="trainingTimeRangeList")
    """A list of time ranges used for model training. Both the start and end timestamps are inclusive. Required. """
    sliding_window: int = rest_field(name="slidingWindow", default=300)
    """Controls how many previous data points get used to determine if the next data point is an anomaly. """
    align_policy: "AlignPolicy" = rest_field(name="alignPolicy")
    """Settings that control how variables are aligned to the same data frequency interval and how missing values are handled. Required. """
    diagnostics_info: "DiagnosticsInfo" = rest_field(name="diagnosticsInfo", readonly=True)
    """Summarizes information about the model and each variable being used. Required. """
    status: Union[str, "ModelStatus"] = rest_field(name="status", readonly=True)
    """Current status of the model training job. Required. Known values are: \"CREATED\", \"RUNNING\", \"COMPLETED\", and \"FAILED\"."""
    status_updated_time: datetime.datetime = rest_field(name="statusUpdatedTime", readonly=True)
    """The UTC time at which the training status of the model was last updated (if applicable). Required. """
    errors: List["ErrorResponse"] = rest_field(name="errors", readonly=True)
    """Error details if the model training job failed. Required. """
    created_time: datetime.datetime = rest_field(name="createdTime", readonly=True)
    """The UTC time at which the model was created. Required. """

    @overload
    def __init__(
        self,
        *,
        dataset_name: str,
        training_time_range_list: List["_models.TimeRange"],
        align_policy: "_models.AlignPolicy",
        model_description: Optional[str] = None,
        sliding_window: int = 300,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ModelState(_model_base.Model):
    """Summarizes information about a model training process.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar epoch_ids: How many epochs the model has been trained out of a total of 100 epochs.
     Required.
    :vartype epoch_ids: list[int]
    :ivar train_losses: The training loss indicates how well the model fits the training data.
     Required.
    :vartype train_losses: list[float]
    :ivar validation_losses: The validation loss indicates how well the model fits the test data.
     Required.
    :vartype validation_losses: list[float]
    :ivar latencies_in_seconds: The time cost for every 10 epochs. Required.
    :vartype latencies_in_seconds: list[float]
    """

    epoch_ids: List[int] = rest_field(name="epochIds", readonly=True)
    """How many epochs the model has been trained out of a total of 100 epochs. Required. """
    train_losses: List[float] = rest_field(name="trainLosses", readonly=True)
    """The training loss indicates how well the model fits the training data. Required. """
    validation_losses: List[float] = rest_field(name="validationLosses", readonly=True)
    """The validation loss indicates how well the model fits the test data. Required. """
    latencies_in_seconds: List[float] = rest_field(name="latenciesInSeconds", readonly=True)
    """The time cost for every 10 epochs. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class MultiVariateAnomalyAlertConfig(AlertConfig, discriminator="MultiVariateAnomaly"):
    """MultiVariateAnomaly alert will be triggered for anomalies detected on multivariate time-series data based on the criteria specified.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar alert_config_name: Unique identifier of an alert configuration. This parameter is
     case-sensitive. Required.
    :vartype alert_config_name: str
    :ivar alert_description: (Optional) Detailed description of an alert configuration.
    :vartype alert_description: str
    :ivar hook_names: (Optional) Specifies the list of notification channel(s) through which the
     alerts will be sent. If left blank, anomalies will still be detected but no alerts will be sent
     out. This parameter is case-sensitive.
    :vartype hook_names: list[str]
    :ivar created_time: The UTC time at which the alert configuration was created. Required.
    :vartype created_time: ~datetime.datetime
    :ivar parameter_modified_time: The UTC time at which the parameter(s) of the alert
     configuration was last modified by the users (if applicable). Required.
    :vartype parameter_modified_time: ~datetime.datetime
    :ivar alert_config_type: Required. Default value is "MultiVariateAnomaly".
    :vartype alert_config_type: str
    :ivar sensitivity: An integer between 1 and 100. Set a lower sensitivity if you only want to be
     notified when severe anomalies are detected. Set a higher number if you want to report as many
     anomalies as possible.
    :vartype sensitivity: int
    :ivar correlation_window: The number of time-series data points to look back and correlate
     anomalies. For example, if the window is set to 5 and there is an anomaly at 01:30. Assume your
     data comes every 5 minutes, then the service will check if the last anomaly detected was within
     the past 25 minutes (i.e., window size * data frequency). If so, the service will correlate
     this new anomaly at 01:30 with the last anomaly and show an correlation ID in the alert
     notification. By default, the window is set to 0 and each anomaly is considered an individual
     incident.
    :vartype correlation_window: int
    :ivar suppress_correlated_alerts: True if you only want to receive one alert for each group of
     correlated anomalies (the alert will be sent for the earliest anomaly detected in this group).
     False if you want to receive an alert for every anomaly detected (regardless whether they are
     correlated or not).
    :vartype suppress_correlated_alerts: bool
    """

    sensitivity: int = rest_field(name="sensitivity", default=70)
    """An integer between 1 and 100. Set a lower sensitivity if you only want to be notified when severe anomalies are detected. Set a higher number if you want to report as many anomalies as possible. """
    correlation_window: int = rest_field(name="correlationWindow", default=0)
    """The number of time-series data points to look back and correlate anomalies. For example, if the window is set to 5 and there is an anomaly at 01:30. Assume your data comes every 5 minutes, then the service will check if the last anomaly detected was within the past 25 minutes (i.e., window size * data frequency). If so, the service will correlate this new anomaly at 01:30 with the last anomaly and show an correlation ID in the alert notification. By default, the window is set to 0 and each anomaly is considered an individual incident. """
    suppress_correlated_alerts: bool = rest_field(name="suppressCorrelatedAlerts", default=True)
    """True if you only want to receive one alert for each group of correlated anomalies (the alert will be sent for the earliest anomaly detected in this group). False if you want to receive an alert for every anomaly detected (regardless whether they are correlated or not). """

    @overload
    def __init__(
        self,
        *,
        alert_description: Optional[str] = None,
        hook_names: Optional[List[str]] = None,
        sensitivity: int = 70,
        correlation_window: int = 0,
        suppress_correlated_alerts: bool = True,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.alert_config_type = "MultiVariateAnomaly"  # type: str


class PagedAlertConfig(_model_base.Model):
    """Paged collection of AlertConfig items.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The AlertConfig items on this page. Required.
    :vartype value: list[~adel.models.AlertConfig]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["AlertConfig"] = rest_field(name="value")
    """The AlertConfig items on this page. Required. """
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class PagedDataset(_model_base.Model):
    """Paged collection of Dataset items.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Dataset items on this page. Required.
    :vartype value: list[~adel.models.Dataset]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["Dataset"] = rest_field(name="value")
    """The Dataset items on this page. Required. """
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class PagedEvaluation(_model_base.Model):
    """Paged collection of Evaluation items.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Evaluation items on this page. Required.
    :vartype value: list[~adel.models.Evaluation]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["Evaluation"] = rest_field(name="value")
    """The Evaluation items on this page. Required. """
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class PagedHook(_model_base.Model):
    """Paged collection of Hook items.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Hook items on this page. Required.
    :vartype value: list[~adel.models.Hook]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["Hook"] = rest_field(name="value")
    """The Hook items on this page. Required. """
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class PagedModel(_model_base.Model):
    """Paged collection of Model items.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Model items on this page. Required.
    :vartype value: list[~adel.models.Model]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["Model"] = rest_field(name="value")
    """The Model items on this page. Required. """
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class PagedSchedule(_model_base.Model):
    """Paged collection of Schedule items.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The Schedule items on this page. Required.
    :vartype value: list[~adel.models.Schedule]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["Schedule"] = rest_field(name="value")
    """The Schedule items on this page. Required. """
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class PagedScheduleReplay(_model_base.Model):
    """Paged collection of ScheduleReplay items.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The ScheduleReplay items on this page. Required.
    :vartype value: list[~adel.models.ScheduleReplay]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["ScheduleReplay"] = rest_field(name="value")
    """The ScheduleReplay items on this page. Required. """
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class RequestDataset(_model_base.Model):
    """RequestDataset.

    All required parameters must be populated in order to send to Azure.

    :ivar dataset_description: (Optional) Detailed description of a dataset.
    :vartype dataset_description: str
    :ivar data_source_info: Details about your data source, including data source type, location,
     authentication method, and so on. Required.
    :vartype data_source_info: ~adel.models.DataSourceInfo
    :ivar data_schema: Format and schema details of the dataset. Required.
    :vartype data_schema: ~adel.models.DataSchema
    :ivar data_granularity_number: The frequency interval at which new records are added to your
     data. Make sure that each variable has at most one data point within each interval. Required.
    :vartype data_granularity_number: int
    :ivar data_granularity_unit: The unit of your data frequency interval. Required. Known values
     are: "Minutes", "Hours", "Days", "Weeks", "Months", and "Years".
    :vartype data_granularity_unit: str or ~adel.models.DataGranularityUnit
    """

    dataset_description: Optional[str] = rest_field(name="datasetDescription")
    """(Optional) Detailed description of a dataset. """
    data_source_info: "DataSourceInfo" = rest_field(name="dataSourceInfo")
    """Details about your data source, including data source type, location, authentication method, and so on. Required. """
    data_schema: "DataSchema" = rest_field(name="dataSchema")
    """Format and schema details of the dataset. Required. """
    data_granularity_number: int = rest_field(name="dataGranularityNumber")
    """The frequency interval at which new records are added to your data. Make sure that each variable has at most one data point within each interval. Required. """
    data_granularity_unit: Union[str, "DataGranularityUnit"] = rest_field(name="dataGranularityUnit")
    """The unit of your data frequency interval. Required. Known values are: \"Minutes\", \"Hours\", \"Days\", \"Weeks\", \"Months\", and \"Years\"."""

    @overload
    def __init__(
        self,
        *,
        data_source_info: "_models.DataSourceInfo",
        data_schema: "_models.DataSchema",
        data_granularity_number: int,
        data_granularity_unit: Union[str, "_models.DataGranularityUnit"],
        dataset_description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class RequestEvaluation(_model_base.Model):
    """RequestEvaluation.

    All required parameters must be populated in order to send to Azure.

    :ivar evaluation_description: (Optional) Detailed description of a model evaluation.
    :vartype evaluation_description: str
    :ivar model_name: The model being evaluated. This parameter is case-sensitive. Required.
    :vartype model_name: str
    :ivar dataset_name: The data being used to evaluate the model. This evaluation dataset should
     have the same schema and data granularity as the training dataset for the model. This parameter
     is case-sensitive. Required.
    :vartype dataset_name: str
    :ivar start_time: The first timestamp equal to or greater than the start time given will be
     used for model evaluation. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The last timestamp equal to or less than the end time given will be used for
     model evaluation. If endTime equals to startTime, one single data point will be processed.
     Required.
    :vartype end_time: ~datetime.datetime
    """

    evaluation_description: Optional[str] = rest_field(name="evaluationDescription")
    """(Optional) Detailed description of a model evaluation. """
    model_name: str = rest_field(name="modelName")
    """The model being evaluated. This parameter is case-sensitive. Required. """
    dataset_name: str = rest_field(name="datasetName")
    """The data being used to evaluate the model. This evaluation dataset should have the same schema and data granularity as the training dataset for the model. This parameter is case-sensitive. Required. """
    start_time: datetime.datetime = rest_field(name="startTime")
    """The first timestamp equal to or greater than the start time given will be used for model evaluation. Required. """
    end_time: datetime.datetime = rest_field(name="endTime")
    """The last timestamp equal to or less than the end time given will be used for model evaluation. If endTime equals to startTime, one single data point will be processed. Required. """

    @overload
    def __init__(
        self,
        *,
        model_name: str,
        dataset_name: str,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
        evaluation_description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class RequestModel(_model_base.Model):
    """RequestModel.

    All required parameters must be populated in order to send to Azure.

    :ivar model_description: (Optional) Detailed description of a model.
    :vartype model_description: str
    :ivar dataset_name: Data used for model training. This parameter is case-sensitive. Required.
    :vartype dataset_name: str
    :ivar training_time_range_list: A list of time ranges used for model training. Both the start
     and end timestamps are inclusive. Required.
    :vartype training_time_range_list: list[~adel.models.TimeRange]
    :ivar sliding_window: Controls how many previous data points get used to determine if the next
     data point is an anomaly.
    :vartype sliding_window: int
    :ivar align_policy: Settings that control how variables are aligned to the same data frequency
     interval and how missing values are handled. Required.
    :vartype align_policy: ~adel.models.AlignPolicy
    """

    model_description: Optional[str] = rest_field(name="modelDescription")
    """(Optional) Detailed description of a model. """
    dataset_name: str = rest_field(name="datasetName")
    """Data used for model training. This parameter is case-sensitive. Required. """
    training_time_range_list: List["TimeRange"] = rest_field(name="trainingTimeRangeList")
    """A list of time ranges used for model training. Both the start and end timestamps are inclusive. Required. """
    sliding_window: int = rest_field(name="slidingWindow", default=300)
    """Controls how many previous data points get used to determine if the next data point is an anomaly. """
    align_policy: "AlignPolicy" = rest_field(name="alignPolicy")
    """Settings that control how variables are aligned to the same data frequency interval and how missing values are handled. Required. """

    @overload
    def __init__(
        self,
        *,
        dataset_name: str,
        training_time_range_list: List["_models.TimeRange"],
        align_policy: "_models.AlignPolicy",
        model_description: Optional[str] = None,
        sliding_window: int = 300,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class RequestSchedule(_model_base.Model):
    """RequestSchedule.

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_description: (Optional) Detailed description of a live streaming inference
     schedule.
    :vartype schedule_description: str
    :ivar model_name: The name of the previously trained model being used to create the live
     streaming inference schedule. This parameter is case-sensitive. Required.
    :vartype model_name: str
    :ivar dataset_name: Data used for live streaming inference. This parameter is case-sensitive.
     Required.
    :vartype dataset_name: str
    :ivar start_inference_since: (Optional) This start time can't be in the past. The first
     timestamp equal to or greater than the start time given will be used. Your data source must
     have data at the specified start time and the number of data points available must equal to or
     greater than your training sliding window.
    :vartype start_inference_since: ~datetime.datetime
    :ivar data_delay_offset_in_seconds: (Optional) The amount of time (in seconds) you expect the
     data to be delayed for inference. For example, your source data comes every 5 minutes, so by
     default (i.e., dataDelayOffsetInSeconds = 0) the inference schedule assumes that records with a
     timestamp of 01:30:00 will be ready for inference by 01:35:00, records with a timestamp of
     01:35:00 will be ready at 01:40:00, and so on. If you expect a 10-minute data delay (i.e.,
     dataDelayOffsetInSeconds = 600), then the scheduler will inference records with a timestamp of
     01:30:00 at 01:45:00, inference records with a timestamp of 01:35:00 at 01:50:00, and so on.
    :vartype data_delay_offset_in_seconds: int
    :ivar alert_config_names: (Optional) Criteria that determine which anomalies should trigger an
     alert and via which notification channel(s). This parameter is case-sensitive.
    :vartype alert_config_names: list[str]
    """

    schedule_description: Optional[str] = rest_field(name="scheduleDescription")
    """(Optional) Detailed description of a live streaming inference schedule. """
    model_name: str = rest_field(name="modelName")
    """The name of the previously trained model being used to create the live streaming inference schedule. This parameter is case-sensitive. Required. """
    dataset_name: str = rest_field(name="datasetName")
    """Data used for live streaming inference. This parameter is case-sensitive. Required. """
    start_inference_since: Optional[datetime.datetime] = rest_field(name="startInferenceSince")
    """(Optional) This start time can't be in the past. The first timestamp equal to or greater than the start time given will be used. Your data source must have data at the specified start time and the number of data points available must equal to or greater than your training sliding window. """
    data_delay_offset_in_seconds: int = rest_field(name="dataDelayOffsetInSeconds", default=0)
    """(Optional) The amount of time (in seconds) you expect the data to be delayed for inference. For example, your source data comes every 5 minutes, so by default (i.e., dataDelayOffsetInSeconds = 0) the inference schedule assumes that records with a timestamp of 01:30:00 will be ready for inference by 01:35:00, records with a timestamp of 01:35:00 will be ready at 01:40:00, and so on. If you expect a 10-minute data delay (i.e., dataDelayOffsetInSeconds = 600), then the scheduler will inference records with a timestamp of 01:30:00 at 01:45:00, inference records with a timestamp of 01:35:00 at 01:50:00, and so on. """
    alert_config_names: Optional[List[str]] = rest_field(name="alertConfigNames")
    """(Optional) Criteria that determine which anomalies should trigger an alert and via which notification channel(s). This parameter is case-sensitive. """

    @overload
    def __init__(
        self,
        *,
        model_name: str,
        dataset_name: str,
        schedule_description: Optional[str] = None,
        start_inference_since: Optional[datetime.datetime] = None,
        data_delay_offset_in_seconds: int = 0,
        alert_config_names: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class RequestScheduleReplay(_model_base.Model):
    """RequestScheduleReplay.

    All required parameters must be populated in order to send to Azure.

    :ivar replay_description: (Optional) Detailed description of a replay on an inference schedule.
    :vartype replay_description: str
    :ivar schedule_name: The inference schedule whose settings will be used for replay. This
     parameter is case-sensitive. Required.
    :vartype schedule_name: str
    :ivar start_time: The first timestamp equal to or greater than the start time given will be
     used for replay. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The last timestamp equal to or less than the end time given will be used for
     relay. If endTime equals to startTime, one single data point will be processed. Required.
    :vartype end_time: ~datetime.datetime
    """

    replay_description: Optional[str] = rest_field(name="replayDescription")
    """(Optional) Detailed description of a replay on an inference schedule. """
    schedule_name: str = rest_field(name="scheduleName")
    """The inference schedule whose settings will be used for replay. This parameter is case-sensitive. Required. """
    start_time: datetime.datetime = rest_field(name="startTime")
    """The first timestamp equal to or greater than the start time given will be used for replay. Required. """
    end_time: datetime.datetime = rest_field(name="endTime")
    """The last timestamp equal to or less than the end time given will be used for relay. If endTime equals to startTime, one single data point will be processed. Required. """

    @overload
    def __init__(
        self,
        *,
        schedule_name: str,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
        replay_description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Schedule(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """An inference schedule sets up a live inference pipeline to analyze new data in real-time. An inference schedule requires a unique name, a trained model, and a valid data source. You can also specify the criteria to trigger an anomaly alert and the channel(s) to receive alerts in an inference schedule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_name: Unique identifier of a live streaming inference schedule. This parameter
     is case-sensitive. Required.
    :vartype schedule_name: str
    :ivar schedule_description: (Optional) Detailed description of a live streaming inference
     schedule.
    :vartype schedule_description: str
    :ivar model_name: The name of the previously trained model being used to create the live
     streaming inference schedule. This parameter is case-sensitive. Required.
    :vartype model_name: str
    :ivar dataset_name: Data used for live streaming inference. This parameter is case-sensitive.
     Required.
    :vartype dataset_name: str
    :ivar start_inference_since: (Optional) This start time can't be in the past. The first
     timestamp equal to or greater than the start time given will be used. Your data source must
     have data at the specified start time and the number of data points available must equal to or
     greater than your training sliding window.
    :vartype start_inference_since: ~datetime.datetime
    :ivar data_delay_offset_in_seconds: (Optional) The amount of time (in seconds) you expect the
     data to be delayed for inference. For example, your source data comes every 5 minutes, so by
     default (i.e., dataDelayOffsetInSeconds = 0) the inference schedule assumes that records with a
     timestamp of 01:30:00 will be ready for inference by 01:35:00, records with a timestamp of
     01:35:00 will be ready at 01:40:00, and so on. If you expect a 10-minute data delay (i.e.,
     dataDelayOffsetInSeconds = 600), then the scheduler will inference records with a timestamp of
     01:30:00 at 01:45:00, inference records with a timestamp of 01:35:00 at 01:50:00, and so on.
    :vartype data_delay_offset_in_seconds: int
    :ivar alert_config_names: (Optional) Criteria that determine which anomalies should trigger an
     alert and via which notification channel(s). This parameter is case-sensitive.
    :vartype alert_config_names: list[str]
    :ivar status: Current status of the inference schedule (ACTIVE/CLIENTPAUSED/SERVERPAUSED).
     CLIENTPAUSED means that the inference schedule was involuntarily paused by the user.
     SERVERPAUSED means that the inference schedule was involuntarily paused by the server and the
     detailed reasons can be found under scheduleStatusChangeInfo. Required. Known values are:
     "ACTIVE", "CLIENTPAUSED", and "SERVERPAUSED".
    :vartype status: str or ~adel.models.ScheduleStatus
    :ivar status_updated_time: The UTC time at which the status of the inference schedule was last
     updated (if applicable). Required.
    :vartype status_updated_time: ~datetime.datetime
    :ivar schedule_status_change_info: Detailed reasons if the inference schedule status changed to
     SERVERPAUSED. Required.
    :vartype schedule_status_change_info: str
    :ivar last_succeeded_timestamp: The last timestamp that was processed successfully. Required.
    :vartype last_succeeded_timestamp: ~datetime.datetime
    :ivar created_time: The UTC time at which the inference schedule was created. Required.
    :vartype created_time: ~datetime.datetime
    :ivar parameter_modified_time: The UTC time at which the parameter(s) of the hook was last
     modified by the users (if applicable). Required.
    :vartype parameter_modified_time: ~datetime.datetime
    """

    schedule_name: str = rest_field(name="scheduleName", readonly=True)
    """Unique identifier of a live streaming inference schedule. This parameter is case-sensitive. Required. """
    schedule_description: Optional[str] = rest_field(name="scheduleDescription")
    """(Optional) Detailed description of a live streaming inference schedule. """
    model_name: str = rest_field(name="modelName")
    """The name of the previously trained model being used to create the live streaming inference schedule. This parameter is case-sensitive. Required. """
    dataset_name: str = rest_field(name="datasetName")
    """Data used for live streaming inference. This parameter is case-sensitive. Required. """
    start_inference_since: Optional[datetime.datetime] = rest_field(name="startInferenceSince")
    """(Optional) This start time can't be in the past. The first timestamp equal to or greater than the start time given will be used. Your data source must have data at the specified start time and the number of data points available must equal to or greater than your training sliding window. """
    data_delay_offset_in_seconds: int = rest_field(name="dataDelayOffsetInSeconds", default=0)
    """(Optional) The amount of time (in seconds) you expect the data to be delayed for inference. For example, your source data comes every 5 minutes, so by default (i.e., dataDelayOffsetInSeconds = 0) the inference schedule assumes that records with a timestamp of 01:30:00 will be ready for inference by 01:35:00, records with a timestamp of 01:35:00 will be ready at 01:40:00, and so on. If you expect a 10-minute data delay (i.e., dataDelayOffsetInSeconds = 600), then the scheduler will inference records with a timestamp of 01:30:00 at 01:45:00, inference records with a timestamp of 01:35:00 at 01:50:00, and so on. """
    alert_config_names: Optional[List[str]] = rest_field(name="alertConfigNames")
    """(Optional) Criteria that determine which anomalies should trigger an alert and via which notification channel(s). This parameter is case-sensitive. """
    status: Union[str, "ScheduleStatus"] = rest_field(name="status", readonly=True)
    """Current status of the inference schedule (ACTIVE/CLIENTPAUSED/SERVERPAUSED). CLIENTPAUSED means that the inference schedule was involuntarily paused by the user. SERVERPAUSED means that the inference schedule was involuntarily paused by the server and the detailed reasons can be found under scheduleStatusChangeInfo. Required. Known values are: \"ACTIVE\", \"CLIENTPAUSED\", and \"SERVERPAUSED\"."""
    status_updated_time: datetime.datetime = rest_field(name="statusUpdatedTime", readonly=True)
    """The UTC time at which the status of the inference schedule was last updated (if applicable). Required. """
    schedule_status_change_info: str = rest_field(name="scheduleStatusChangeInfo", readonly=True)
    """Detailed reasons if the inference schedule status changed to SERVERPAUSED. Required. """
    last_succeeded_timestamp: datetime.datetime = rest_field(name="lastSucceededTimestamp", readonly=True)
    """The last timestamp that was processed successfully. Required. """
    created_time: datetime.datetime = rest_field(name="createdTime", readonly=True)
    """The UTC time at which the inference schedule was created. Required. """
    parameter_modified_time: datetime.datetime = rest_field(name="parameterModifiedTime", readonly=True)
    """The UTC time at which the parameter(s) of the hook was last modified by the users (if applicable). Required. """

    @overload
    def __init__(
        self,
        *,
        model_name: str,
        dataset_name: str,
        schedule_description: Optional[str] = None,
        start_inference_since: Optional[datetime.datetime] = None,
        data_delay_offset_in_seconds: int = 0,
        alert_config_names: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ScheduleHistoryResult(_model_base.Model):
    """Historical anomaly detection results for an inference schedule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar results: Summarizes the anomaly detection results for each timestamp. Required.
    :vartype results: list[~adel.models.AnomalyState]
    """

    results: List["AnomalyState"] = rest_field(name="results", readonly=True)
    """Summarizes the anomaly detection results for each timestamp. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ScheduleReplay(_model_base.Model):
    """Re-inference a historical time range on an exiting inference schedule. The new anomaly detection results will overwrite the historical results in the replay time range but no alerts will be sent out.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar replay_name: Unique identifier of a replay on an inference schedule. This parameter is
     case-sensitive. Required.
    :vartype replay_name: str
    :ivar replay_description: (Optional) Detailed description of a replay on an inference schedule.
    :vartype replay_description: str
    :ivar schedule_name: The inference schedule whose settings will be used for replay. This
     parameter is case-sensitive. Required.
    :vartype schedule_name: str
    :ivar start_time: The first timestamp equal to or greater than the start time given will be
     used for replay. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The last timestamp equal to or less than the end time given will be used for
     relay. If endTime equals to startTime, one single data point will be processed. Required.
    :vartype end_time: ~datetime.datetime
    :ivar status: Current status of the inference schedule replay job. Required. Known values are:
     "CREATED", "RUNNING", "COMPLETED", and "FAILED".
    :vartype status: str or ~adel.models.ReplayStatus
    :ivar status_updated_time: The UTC time at which the status of the inference replay was last
     updated (if applicable). Required.
    :vartype status_updated_time: ~datetime.datetime
    :ivar errors: Error details if the inference replay job failed. Required.
    :vartype errors: list[~adel.models.ErrorResponse]
    :ivar variable_states: Summarizes information about each variable being used. Ranked by
     filledNARatio in descending order. Required.
    :vartype variable_states: list[~adel.models.VariableState]
    :ivar created_time: The UTC time at which the inference replay job was created. Required.
    :vartype created_time: ~datetime.datetime
    """

    replay_name: str = rest_field(name="replayName", readonly=True)
    """Unique identifier of a replay on an inference schedule. This parameter is case-sensitive. Required. """
    replay_description: Optional[str] = rest_field(name="replayDescription")
    """(Optional) Detailed description of a replay on an inference schedule. """
    schedule_name: str = rest_field(name="scheduleName")
    """The inference schedule whose settings will be used for replay. This parameter is case-sensitive. Required. """
    start_time: datetime.datetime = rest_field(name="startTime")
    """The first timestamp equal to or greater than the start time given will be used for replay. Required. """
    end_time: datetime.datetime = rest_field(name="endTime")
    """The last timestamp equal to or less than the end time given will be used for relay. If endTime equals to startTime, one single data point will be processed. Required. """
    status: Union[str, "ReplayStatus"] = rest_field(name="status", readonly=True)
    """Current status of the inference schedule replay job. Required. Known values are: \"CREATED\", \"RUNNING\", \"COMPLETED\", and \"FAILED\"."""
    status_updated_time: datetime.datetime = rest_field(name="statusUpdatedTime", readonly=True)
    """The UTC time at which the status of the inference replay was last updated (if applicable). Required. """
    errors: List["ErrorResponse"] = rest_field(name="errors", readonly=True)
    """Error details if the inference replay job failed. Required. """
    variable_states: List["VariableState"] = rest_field(name="variableStates", readonly=True)
    """Summarizes information about each variable being used. Ranked by filledNARatio in descending order. Required. """
    created_time: datetime.datetime = rest_field(name="createdTime", readonly=True)
    """The UTC time at which the inference replay job was created. Required. """

    @overload
    def __init__(
        self,
        *,
        schedule_name: str,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
        replay_description: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ScheduleUpdate(_model_base.Model):
    """Updatable properties for a given inference schedule.

    All required parameters must be populated in order to send to Azure.

    :ivar schedule_description: (Optional) Detailed description of a live streaming inference
     schedule.
    :vartype schedule_description: str
    :ivar model_name: The name of the previously trained model being used to create the live
     streaming inference schedule. This parameter is case-sensitive. Required.
    :vartype model_name: str
    :ivar data_delay_offset_in_seconds: (Optional) The amount of time (in seconds) you expect the
     data to be delayed for inference. For example, your source data comes every 5 minutes, so by
     default (i.e., dataDelayOffsetInSeconds = 0) the inference schedule assumes that records with a
     timestamp of 01:30:00 will be ready for inference by 01:35:00, records with a timestamp of
     01:35:00 will be ready at 01:40:00, and so on. If you expect a 10-minute data delay (i.e.,
     dataDelayOffsetInSeconds = 600), then the scheduler will inference records with a timestamp of
     01:30:00 at 01:45:00, inference records with a timestamp of 01:35:00 at 01:50:00, and so on.
    :vartype data_delay_offset_in_seconds: int
    :ivar alert_config_names: (Optional) Criteria that determine which anomalies should trigger an
     alert and via which notification channel(s). This parameter is case-sensitive.
    :vartype alert_config_names: list[str]
    :ivar status: Current status of the inference schedule (ACTIVE/CLIENTPAUSED/SERVERPAUSED).
     CLIENTPAUSED means that the inference schedule was involuntarily paused by the user.
     SERVERPAUSED means that the inference schedule was involuntarily paused by the server and the
     detailed reasons can be found under scheduleStatusChangeInfo. Required. Known values are:
     "ACTIVE", "CLIENTPAUSED", and "SERVERPAUSED".
    :vartype status: str or ~adel.models.ScheduleStatus
    """

    schedule_description: Optional[str] = rest_field(name="scheduleDescription")
    """(Optional) Detailed description of a live streaming inference schedule. """
    model_name: str = rest_field(name="modelName")
    """The name of the previously trained model being used to create the live streaming inference schedule. This parameter is case-sensitive. Required. """
    data_delay_offset_in_seconds: int = rest_field(name="dataDelayOffsetInSeconds", default=0)
    """(Optional) The amount of time (in seconds) you expect the data to be delayed for inference. For example, your source data comes every 5 minutes, so by default (i.e., dataDelayOffsetInSeconds = 0) the inference schedule assumes that records with a timestamp of 01:30:00 will be ready for inference by 01:35:00, records with a timestamp of 01:35:00 will be ready at 01:40:00, and so on. If you expect a 10-minute data delay (i.e., dataDelayOffsetInSeconds = 600), then the scheduler will inference records with a timestamp of 01:30:00 at 01:45:00, inference records with a timestamp of 01:35:00 at 01:50:00, and so on. """
    alert_config_names: Optional[List[str]] = rest_field(name="alertConfigNames")
    """(Optional) Criteria that determine which anomalies should trigger an alert and via which notification channel(s). This parameter is case-sensitive. """
    status: Union[str, "ScheduleStatus"] = rest_field(name="status")
    """Current status of the inference schedule (ACTIVE/CLIENTPAUSED/SERVERPAUSED). CLIENTPAUSED means that the inference schedule was involuntarily paused by the user. SERVERPAUSED means that the inference schedule was involuntarily paused by the server and the detailed reasons can be found under scheduleStatusChangeInfo. Required. Known values are: \"ACTIVE\", \"CLIENTPAUSED\", and \"SERVERPAUSED\"."""

    @overload
    def __init__(
        self,
        *,
        model_name: str,
        status: Union[str, "_models.ScheduleStatus"],
        schedule_description: Optional[str] = None,
        data_delay_offset_in_seconds: int = 0,
        alert_config_names: Optional[List[str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class SqlServer(DataSourceInfo, discriminator="SqlServer"):
    """Information required for Azure SQLServer data source type.

    All required parameters must be populated in order to send to Azure.

    :ivar authentication_type: Required. "ManagedIdentity"
    :vartype authentication_type: str or ~adel.models.AuthenticationType
    :ivar data_source_type: Required. Default value is "SqlServer".
    :vartype data_source_type: str
    :ivar server_name: Name of a SQL Server. Required.
    :vartype server_name: str
    :ivar database_name: Name of a SQL Database. This parameter is case-sensitive. Required.
    :vartype database_name: str
    :ivar table_name: Name of a SQL table or view. This parameter is case-sensitive. Required.
    :vartype table_name: str
    """

    server_name: str = rest_field(name="serverName")
    """Name of a SQL Server. Required. """
    database_name: str = rest_field(name="databaseName")
    """Name of a SQL Database. This parameter is case-sensitive. Required. """
    table_name: str = rest_field(name="tableName")
    """Name of a SQL table or view. This parameter is case-sensitive. Required. """

    @overload
    def __init__(
        self,
        *,
        authentication_type: Union[str, "_models.AuthenticationType"],
        server_name: str,
        database_name: str,
        table_name: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.data_source_type = "SqlServer"  # type: str


class TimeRange(_model_base.Model):
    """A time range of data for processing. Both the start and end time are inclusive.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: The first timestamp equal to or greater than the start time given will be
     processed. Required.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The last timestamp equal to or less than the end time given will be processed.
     If endTime equals to startTime, one single data point will be processed. Required.
    :vartype end_time: ~datetime.datetime
    """

    start_time: datetime.datetime = rest_field(name="startTime")
    """The first timestamp equal to or greater than the start time given will be processed. Required. """
    end_time: datetime.datetime = rest_field(name="endTime")
    """The last timestamp equal to or less than the end time given will be processed. If endTime equals to startTime, one single data point will be processed. Required. """

    @overload
    def __init__(
        self,
        *,
        start_time: datetime.datetime,
        end_time: datetime.datetime,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class VariableState(_model_base.Model):
    """Summarizes information about each variable. Ranked by filledNARatio in descending order.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar variable: The name of the variable being used. Required.
    :vartype variable: str
    :ivar filled_n_a_ratio: Proportion of NaN values filled for the variable. Required.
    :vartype filled_n_a_ratio: float
    :ivar effective_count: Number of non-NaN data points for the variable. Required.
    :vartype effective_count: int
    :ivar first_timestamp: The first timestamp taken from the data source for a given variable.
     Different variables may have a different firstTimestamp due to missing values. Required.
    :vartype first_timestamp: ~datetime.datetime
    :ivar last_timestamp: The last timestamp taken from the data source for a given variable.
     Different variables may have a different lastTimestamp due to missing values. Required.
    :vartype last_timestamp: ~datetime.datetime
    """

    variable: str = rest_field(name="variable", readonly=True)
    """The name of the variable being used. Required. """
    filled_n_a_ratio: float = rest_field(name="filledNARatio", readonly=True)
    """Proportion of NaN values filled for the variable. Required. """
    effective_count: int = rest_field(name="effectiveCount", readonly=True)
    """Number of non-NaN data points for the variable. Required. """
    first_timestamp: datetime.datetime = rest_field(name="firstTimestamp", readonly=True)
    """The first timestamp taken from the data source for a given variable. Different variables may have a different firstTimestamp due to missing values. Required. """
    last_timestamp: datetime.datetime = rest_field(name="lastTimestamp", readonly=True)
    """The last timestamp taken from the data source for a given variable. Different variables may have a different lastTimestamp due to missing values. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class VariableValues(_model_base.Model):
    """Values for each timestamp of the variable.

    All required parameters must be populated in order to send to Azure.

    :ivar name: The name of the variable. Required.
    :vartype name: str
    :ivar timestamps: The timestamp. Required.
    :vartype timestamps: list[str]
    :ivar values: The value of the variable at the timestamp. Required.
    :vartype values: list[float]
    """

    name: str = rest_field(name="name")
    """The name of the variable. Required. """
    timestamps: List[str] = rest_field(name="timestamps")
    """The timestamp. Required. """
    values: List[float] = rest_field(name="values")
    """The value of the variable at the timestamp. Required. """

    @overload
    def __init__(
        self,
        *,
        name: str,
        timestamps: List[str],
        values: List[float],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class Webhook(Hook, discriminator="Webhook"):
    """A webhook is a notification channel that sends alerts to a user-defined endpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar hook_name: Unique identifier of a hook. This parameter is case-sensitive. Required.
    :vartype hook_name: str
    :ivar hook_description: (Optional) Detailed description of a hook.
    :vartype hook_description: str
    :ivar created_time: The UTC time at which the hook was created. Required.
    :vartype created_time: ~datetime.datetime
    :ivar parameter_modified_time: The UTC time at which the parameter(s) of the hook was last
     modified by the users (if applicable). Required.
    :vartype parameter_modified_time: ~datetime.datetime
    :ivar hook_type: Required. Default value is "Webhook".
    :vartype hook_type: str
    :ivar endpoint: The API address to be called when an alert is triggered. MUST be Https.
     Required.
    :vartype endpoint: str
    :ivar header: (Optional) Custom headers in the API call. A string map include key-value pairs.
    :vartype header: dict[str, str]
    :ivar credential: (Optional) For authenticating to the endpoint. Optional if authentication is
     not needed.
    :vartype credential: str
    """

    endpoint: str = rest_field(name="endpoint")
    """The API address to be called when an alert is triggered. MUST be Https. Required. """
    header: Optional[Dict[str, str]] = rest_field(name="header")
    """(Optional) Custom headers in the API call. A string map include key-value pairs. """
    credential: Optional[str] = rest_field(name="credential")
    """(Optional) For authenticating to the endpoint. Optional if authentication is not needed. """

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
        hook_description: Optional[str] = None,
        header: Optional[Dict[str, str]] = None,
        credential: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.hook_type = "Webhook"  # type: str
