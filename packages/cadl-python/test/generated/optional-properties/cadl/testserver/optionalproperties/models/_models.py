# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Error(_model_base.Model):
    """The error object.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar message: A human-readable representation of the error. Required.
    :vartype message: str
    :ivar target: The target of the error.
    :vartype target: str
    :ivar details: An array of details about specific errors that led to this reported error.
     Required.
    :vartype details: list[~cadl.testserver.optionalproperties.models.Error]
    :ivar innererror: An object containing more specific information than the current object about
     the error.
    :vartype innererror: ~cadl.testserver.optionalproperties.models.InnerError
    """

    code: str = rest_field(name="code")
    """One of a server-defined set of error codes. Required. """
    message: str = rest_field(name="message")
    """A human-readable representation of the error. Required. """
    target: Optional[str] = rest_field(name="target")
    """The target of the error. """
    details: List["Error"] = rest_field(name="details")
    """An array of details about specific errors that led to this reported error. Required. """
    innererror: Optional["InnerError"] = rest_field(name="innererror")
    """An object containing more specific information than the current object about the error. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        message: str,
        details: List["_models.Error"],
        target: Optional[str] = None,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ErrorResponse(_model_base.Model):
    """A response containing error details.

    All required parameters must be populated in order to send to Azure.

    :ivar error: The error object. Required.
    :vartype error: ~cadl.testserver.optionalproperties.models.Error
    """

    error: "Error" = rest_field(name="error")
    """The error object. Required. """

    @overload
    def __init__(
        self,
        *,
        error: "_models.Error",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class InnerError(_model_base.Model):
    """An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.

    All required parameters must be populated in order to send to Azure.

    :ivar code: One of a server-defined set of error codes. Required.
    :vartype code: str
    :ivar innererror: Inner error.
    :vartype innererror: ~cadl.testserver.optionalproperties.models.InnerError
    """

    code: str = rest_field(name="code")
    """One of a server-defined set of error codes. Required. """
    innererror: Optional["InnerError"] = rest_field(name="innererror")
    """Inner error. """

    @overload
    def __init__(
        self,
        *,
        code: str,
        innererror: Optional["_models.InnerError"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class InputModel(_model_base.Model):
    """Input model with optional properties.

    :ivar optional_string: Optional string, illustrating an optional reference type property.
    :vartype optional_string: str
    :ivar optional_int: Optional int, illustrating an optional value type property.
    :vartype optional_int: int
    :ivar optional_string_list: Optional string collection.
    :vartype optional_string_list: list[str]
    :ivar optional_int_list: Optional int collection.
    :vartype optional_int_list: list[int]
    """

    optional_string: Optional[str] = rest_field(name="optionalString")
    """Optional string, illustrating an optional reference type property. """
    optional_int: Optional[int] = rest_field(name="optionalInt")
    """Optional int, illustrating an optional value type property. """
    optional_string_list: Optional[List[str]] = rest_field(name="optionalStringList")
    """Optional string collection. """
    optional_int_list: Optional[List[int]] = rest_field(name="optionalIntList")
    """Optional int collection. """

    @overload
    def __init__(
        self,
        *,
        optional_string: Optional[str] = None,
        optional_int: Optional[int] = None,
        optional_string_list: Optional[List[str]] = None,
        optional_int_list: Optional[List[int]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class OutputModel(_model_base.Model):
    """Output model with optional properties.

    :ivar optional_string: Optional string, illustrating an optional reference type property.
    :vartype optional_string: str
    :ivar optional_int: Optional int, illustrating an optional value type property.
    :vartype optional_int: int
    :ivar optional_string_list: Optional string collection.
    :vartype optional_string_list: list[str]
    :ivar optional_int_list: Optional int collection.
    :vartype optional_int_list: list[int]
    """

    optional_string: Optional[str] = rest_field(name="optionalString")
    """Optional string, illustrating an optional reference type property. """
    optional_int: Optional[int] = rest_field(name="optionalInt")
    """Optional int, illustrating an optional value type property. """
    optional_string_list: Optional[List[str]] = rest_field(name="optionalStringList")
    """Optional string collection. """
    optional_int_list: Optional[List[int]] = rest_field(name="optionalIntList")
    """Optional int collection. """

    @overload
    def __init__(
        self,
        *,
        optional_string: Optional[str] = None,
        optional_int: Optional[int] = None,
        optional_string_list: Optional[List[str]] = None,
        optional_int_list: Optional[List[int]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class RoundTripModel(_model_base.Model):
    """Round-trip model with optional properties.

    :ivar optional_string: Optional string, illustrating an optional reference type property.
    :vartype optional_string: str
    :ivar optional_int: Optional int, illustrating an optional value type property.
    :vartype optional_int: int
    :ivar optional_string_list: Optional string collection.
    :vartype optional_string_list: list[str]
    :ivar optional_int_list: Optional int collection.
    :vartype optional_int_list: list[int]
    """

    optional_string: Optional[str] = rest_field(name="optionalString")
    """Optional string, illustrating an optional reference type property. """
    optional_int: Optional[int] = rest_field(name="optionalInt")
    """Optional int, illustrating an optional value type property. """
    optional_string_list: Optional[List[str]] = rest_field(name="optionalStringList")
    """Optional string collection. """
    optional_int_list: Optional[List[int]] = rest_field(name="optionalIntList")
    """Optional int collection. """

    @overload
    def __init__(
        self,
        *,
        optional_string: Optional[str] = None,
        optional_int: Optional[int] = None,
        optional_string_list: Optional[List[str]] = None,
        optional_int_list: Optional[List[int]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any], /):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
