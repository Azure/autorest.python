# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, List, Mapping, Optional, overload

from .. import _model_base
from .._model_base import rest_field

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class InputModel(_model_base.Model):
    """Input model with optional properties.

    :ivar optional_string: Optional string, illustrating an optional reference type property.
    :vartype optional_string: str
    :ivar optional_int: Optional int, illustrating an optional value type property.
    :vartype optional_int: int
    :ivar optional_string_list: Optional string collection.
    :vartype optional_string_list: list[str]
    :ivar optional_int_list: Optional int collection.
    :vartype optional_int_list: list[int]
    """

    optional_string: Optional[str] = rest_field(name="optionalString")
    """Optional string, illustrating an optional reference type property. """
    optional_int: Optional[int] = rest_field(name="optionalInt")
    """Optional int, illustrating an optional value type property. """
    optional_string_list: Optional[List[str]] = rest_field(name="optionalStringList")
    """Optional string collection. """
    optional_int_list: Optional[List[int]] = rest_field(name="optionalIntList")
    """Optional int collection. """

    @overload
    def __init__(
        self,
        *,
        optional_string: Optional[str] = None,
        optional_int: Optional[int] = None,
        optional_string_list: Optional[List[str]] = None,
        optional_int_list: Optional[List[int]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class OutputModel(_model_base.Model):
    """Output model with optional properties.

    :ivar optional_string: Optional string, illustrating an optional reference type property.
    :vartype optional_string: str
    :ivar optional_int: Optional int, illustrating an optional value type property.
    :vartype optional_int: int
    :ivar optional_string_list: Optional string collection.
    :vartype optional_string_list: list[str]
    :ivar optional_int_list: Optional int collection.
    :vartype optional_int_list: list[int]
    """

    optional_string: Optional[str] = rest_field(name="optionalString")
    """Optional string, illustrating an optional reference type property. """
    optional_int: Optional[int] = rest_field(name="optionalInt")
    """Optional int, illustrating an optional value type property. """
    optional_string_list: Optional[List[str]] = rest_field(name="optionalStringList")
    """Optional string collection. """
    optional_int_list: Optional[List[int]] = rest_field(name="optionalIntList")
    """Optional int collection. """

    @overload
    def __init__(
        self,
        *,
        optional_string: Optional[str] = None,
        optional_int: Optional[int] = None,
        optional_string_list: Optional[List[str]] = None,
        optional_int_list: Optional[List[int]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class RoundTripModel(_model_base.Model):
    """Round-trip model with optional properties.

    :ivar optional_string: Optional string, illustrating an optional reference type property.
    :vartype optional_string: str
    :ivar optional_int: Optional int, illustrating an optional value type property.
    :vartype optional_int: int
    :ivar optional_string_list: Optional string collection.
    :vartype optional_string_list: list[str]
    :ivar optional_int_list: Optional int collection.
    :vartype optional_int_list: list[int]
    """

    optional_string: Optional[str] = rest_field(name="optionalString")
    """Optional string, illustrating an optional reference type property. """
    optional_int: Optional[int] = rest_field(name="optionalInt")
    """Optional int, illustrating an optional value type property. """
    optional_string_list: Optional[List[str]] = rest_field(name="optionalStringList")
    """Optional string collection. """
    optional_int_list: Optional[List[int]] = rest_field(name="optionalIntList")
    """Optional int collection. """

    @overload
    def __init__(
        self,
        *,
        optional_string: Optional[str] = None,
        optional_int: Optional[int] = None,
        optional_string_list: Optional[List[str]] = None,
        optional_int_list: Optional[List[int]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
