using Cadl.Http;
using Cadl.Rest;
using Cadl.Versioning;
using Azure.Core;

@versioned(Adp.Versions)
@versionedDependency(
  [
    [
      Adp.Versions.v2023_00_00_for_public_preview,
      Azure.Core.Versions.v1_0_Preview_1
    ]
  ]
)
namespace Adp;

enum Versions {
  v2023_00_00_for_public_preview: "2023-00-00-preview",
}

enum SharedClients {
  LongRunningOperationsClient,
}

@doc("Internal - generic Key/Value model for internal use")
model CommonKeyValuePair {
  @doc("The key")
  @key
  key: string;

  @doc("The value")
  value: string;
}

@doc("Internal - the model for internal use")
model CommonResourceEndpoint {
  @doc("The endpoint uri of the owning resource")
  @visibility("read")
  resourceEndpoint?: url;
}

@doc("File upload information")
model FileUploadInformation {
  @doc("File name specified by the client")
  @key
  clientFileName: string;
  ...FileLocation;
}

@doc("File location.")
model FileLocation {
  @doc("""
  SAS signed URI for uploading (write) file to Azure Storage.
  This URI expires in 24 hours.
  """)
  fileUri: url;
}

@doc("Error code header.")
model XmsErrorCodeHeader {
  @doc("Error code for specific error that occurred.")
  @header("x-ms-error-code")
  xmsErrorCode: string;
}

@doc("Azure Active Directory OAuth2 Flow")
model ImplicitAuthorizationFlow {
  @doc("Use implicit authorization flow type")
  type: OAuth2FlowType.implicit;

  @doc("Authorization URL")
  authorizationUrl: "https://login.microsoftonline.com/common/oauth2/authorize";

  @doc("ADP Scope: impersonate user account")
  scopes: ["https://adp.azure.com/.default"];
}

@doc("A long running operation resource.")
@resource("operations")
model LongRunningOperation {
  @key("operationId")
  @doc("The unique ID of the operation.")
  @minLength(1)
  @maxLength(36)
  operationId: string;
  ...LongRunningOperationBase;
}

@doc("Standard Azure LRO response headers.")
model LongRunningOperationWithResponseHeaders {
  ...LongRunningOperation;
  ...Foundations.RetryAfterHeader;
  ...LongRunningOperationResultLocation;
}

@doc("The long running operation status monitor location.")
model LongRunningOperationStatusLocationHeader {
  @pollingLocation
  @doc("The location for monitoring the operation status.")
  @header("Operation-Location")
  operationLocation: ResourceLocation<LongRunningOperation>;
}

@doc("Final location of the operation result.")
model LongRunningOperationResultLocation {
  @doc("Final location of the operation result.")
  @finalLocation
  @header("Location")
  location?: url;
}

@doc("""
Client specific long running operation identifier.
This identifier will serve as idempotence key to ensure idempotensy of the long running operation.
""")
model LongRunningOperationIdHeader {
  @doc("The long running operation identifier. Operation-Id should be valid UUID string.")
  @format("uuid")
  @header("operation-id")
  operationId?: string;
}

@doc("The ARM resource identifier. The ARM Id could be used for checking access permission to the operations associated with that resource.")
model ArmResourceId {
  @doc("The ARM resource identifier. The ARM Id could be used for checking access permission to the operations associated with that resource.")
  @visibility("read", "create")
  armResourceId?: string;
}

@doc("The long running operation model without the key.")
model LongRunningOperationBase<TStatusError = Azure.Core.Foundations.Error> {
  @doc("The operation status.")
  @visibility("read", "update")
  status: LongRunningOperationStatus;

  @doc("The operation error.")
  @visibility("update")
  error?: TStatusError;

  @doc("Final result location (URL).")
  @visibility("read", "update", "create")
  finalResultLocation: url;
  ...Azure.Core.Foundations.Extensions.CustomEtagProperty;
}

@doc("The long running operation response")
model LongRunningOperationResponse {
  @doc("The operation Id.")
  @minLength(1)
  @maxLength(36)
  operationId: string;
  ...LongRunningOperationBase;
}

@doc("The async operation status")
enum LongRunningOperationStatus {
  Created,
  InProgress,
  Succeeded,
  Failed,
  Canceled,
}

@doc("[Internal] Static identifier used by singleton resources.")
enum SingletonIdentifier {
  current,
}
