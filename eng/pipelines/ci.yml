trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

resources:
  repositories:
    - repository: azure-sdk-tools
      type: github
      endpoint: Azure
      name: Azure/azure-sdk-tools

variables:
  PythonVersion: "3.12"
  AUTOREST_TESTSERVER_COVERAGE_DIRECTORY: "$(Build.SourcesDirectory)/autorest.python/packages/autorest.python/coverage/"
  PROXY_URL: http://localhost:5000
  PROXY_MANUAL_START: true

parameters:
  - name: VerificationPackages
    type: object
    default:
    - name: azure-storage-blob
      service: storage
    - name: azure-storage-queue
      service: storage
    - name: azure-storage-file-datalake
      service: storage
    - name: azure-storage-file-share
      service: storage
    - name: azure-ai-language-questionanswering
      service: cognitivelanguage

jobs:
  - job: "AutoRest_Python_CI"
    displayName: "Run AutoRest CI Checks"

    strategy:
      matrix:
        Linux_Python38:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu18.04"
          PythonVersion: "3.8"
        Windows_Python38:
          OSName: "Windows"
          OSVmImage: "MMS2020"
          PythonVersion: "3.8"      
        Linux_Python310:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu20.04"
          PythonVersion: "3.10"
        Linux_Python311:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu22.04"
          PythonVersion: "3.11"
        Linux_Python312:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu22.04"
          PythonVersion: "3.12"
        Windows_Python312:
          OSName: "Windows"
          OSVmImage: "MMS2023"
          PythonVersion: "3.12"

    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      vmImage: $(OSVmImage)

    steps:
      - template: ci-template.yml
        parameters:
            installAutorest: true
            folderName: "autorest.python"
            pythonCodeChecks: true
            pythonFolderName: autorest
            regenerate: true
            venvFolderPath: "node_modules/pygen"

      - script: |
          pip install pip
          pip install coverage
        displayName: "Install Env Specific Reqs in Target PyVersion $(PythonVersion)"

      - template: generated-code-checks-template.yml
        parameters:
            folderName: "azure/legacy"
      - template: generated-code-checks-template.yml
        parameters:
            folderName: "azure/version-tolerant"
      - template: generated-code-checks-template.yml
        parameters:
            folderName: "vanilla/legacy"
      - template: generated-code-checks-template.yml
        parameters:
            folderName: "vanilla/version-tolerant"
      - template: generated-code-checks-template.yml
        parameters:
            folderName: "dpg/version-tolerant"
      - script: tox run -e ci
        displayName: 'Execute "multiapi" Tests - Python $(PythonVersion)'
        workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/autorest.python/test/multiapi

      - script: tox run -e apiview
        displayName: 'Validate multiapi APIView - Python $(PythonVersion)'
        condition: and(succeededOrFailed(), eq(variables['PythonVersion'], '3.11'))
        workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/autorest.python/test/multiapi

      - script: |
          npm run coverage -- publish --repo=$(Build.Repository.Name) --ref=$(Build.SourceBranch) --githubToken=$(github-token) --azStorageAccount=$(storage-coverage-user) --azStorageAccessKey=$(storage-coverage-pass) --coverageDirectory=$(AUTOREST_TESTSERVER_COVERAGE_DIRECTORY)
        workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/autorest.python/node_modules/@microsoft.azure/autorest.testserver
        displayName: "Publish coverage report to storage account"
        condition: and(succeededOrFailed(), eq(variables['PythonVersion'], '3.11'))

      - ${{ if eq(ne(variables['Build.Reason'], 'PullRequest'), 'True') }}:
          - script: |
              git clone https://github.com/Azure/azure-sdk-for-python.git --depth=1 --branch main
            displayName: "Clone python repo"
          - script: |
              mv $(Build.SourcesDirectory)/azure-sdk-for-python/* .
              mv $(Build.SourcesDirectory)/azure-sdk-for-python/.git .
            displayName: Move azure-sdk-for-python files up a level

          - script: |

            displayName: "Prepare environment"

          - ${{ each package in parameters.VerificationPackages }}:
              - script: |
                  autorest ./swagger/README.md --use=$(Build.SourcesDirectory)/autorest.python/packages/autorest.python --modelerfour.seal-single-value-enum-by-default
                displayName: "Regenerate target package ${{ package.name }}"
                workingDirectory: "$(Build.SourcesDirectory)/sdk/${{ package.service }}/${{ package.name }}"
              - script: |
                  tox run -e whl -c ../../../eng/tox/tox.ini --root .
                displayName: "Run tests for ${{ package.name }}"
                workingDirectory: "$(Build.SourcesDirectory)/sdk/${{ package.service }}/${{ package.name }}"
  - job: "Cadl_Python_CI"
    displayName: "Run Cadl Python CI Checks"

    strategy:
      matrix:
        Linux_Python38:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu18.04"
          PythonVersion: "3.8"
        Windows_Python38:
          OSName: "Windows"
          OSVmImage: "MMS2020"
          PythonVersion: "3.8"
        Linux_Python310:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu20.04"
          PythonVersion: "3.10"
        Linux_Python311:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu22.04"
          PythonVersion: "3.11"
        Linux_Python312:
          OSName: "Linux"
          OSVmImage: "MMSUbuntu22.04"
          PythonVersion: "3.12"
        Windows_Python312:
          OSName: "Windows"
          OSVmImage: "MMS2023"
          PythonVersion: "3.12"

    pool:
      name: azsdk-pool-mms-ubuntu-2004-general
      vmImage: $(OSVmImage)

    steps:
      - template: ci-template.yml
        parameters:
            installTypeSpec: true
            installCadlRanch: true
            folderName: "typespec-python"
            regenerate: true
            venvFolderPath: "dist/pygen"

      - template: generated-code-checks-template.yml
        parameters:
            package: "typespec-python"
            folderName: "azure"

      - template: generated-code-checks-template.yml
        parameters:
            package: "typespec-python"
            folderName: "unbranded"

      - script: cadl-ranch check-coverage http/
        displayName: Check Coverage
        workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/typespec-python/node_modules/@azure-tools/cadl-ranch-specs
        continueOnError: true

      - publish: $(Build.SourcesDirectory)/autorest.python/packages/typespec-python/node_modules/@azure-tools/cadl-ranch-specs/cadl-ranch-coverage.json
        artifact: CoverageReport
