parameters:
    folderName: ""
    package: "autorest.python"
    checkCoverage: false

steps:
    - script: tox run -e ci
      displayName: Execute ${{ parameters.folderName }} tests - Python $(PythonVersion)
      workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/${{parameters.package}}/test/${{ parameters.folderName }}

    - script: tox run -e lint
      displayName: Lint ${{ parameters.folderName }} - Python $(PythonVersion)
      workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/${{parameters.package}}/test/${{ parameters.folderName }}
      condition: and(eq(variables['PythonVersion'], '3.10'), or(contains( '${{ parameters.folderName }}', 'version-tolerant'), eq('${{parameters.package}}', 'typespec-python')))

    - script: tox run -e mypy
      displayName: Mypy ${{ parameters.folderName }} - Python $(PythonVersion)
      workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/${{parameters.package}}/test/${{ parameters.folderName }}
      condition: and(eq(variables['PythonVersion'], '3.11'), or(contains('${{ parameters.folderName }}', 'version-tolerant'), eq('${{parameters.package}}', 'typespec-python')))

    - script: tox run -e pyright
      displayName: Pyright ${{ parameters.folderName }} - Python $(PythonVersion)
      workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/${{parameters.package}}/test/${{ parameters.folderName }}
      condition: and(eq(variables['PythonVersion'], '3.10'), or(contains('${{ parameters.folderName }}', 'version-tolerant'), eq('${{parameters.package}}', 'typespec-python')))

    - script: tox run -e apiview
      displayName: ApiView ${{ parameters.folderName }} - Python $(PythonVersion)
      workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/${{parameters.package}}/test/${{ parameters.folderName }}
      condition: eq(variables['PythonVersion'], '3.11')

    - script: ls
      displayName: List files in ${{ parameters.folderName }}
      workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/${{parameters.package}}/test/${{ parameters.folderName }}

    - script: cadl-ranch check-coverage http/ --configFile ./cadl-ranch-config.yaml
      displayName: Check Coverage for ${{ parameters.folderName }}
      workingDirectory: $(Build.SourcesDirectory)/autorest.python/packages/${{parameters.package}}/test/${{ parameters.folderName }}
      condition: and(succeeded(), ${{ parameters.checkCoverage }})

    - publish: $(Build.SourcesDirectory)/autorest.python/packages/${{parameters.package}}/test/${{ parameters.folderName }}/cadl-ranch-coverage.json
      artifact: CoverageReport - {{ parameters.folderName }}
      condition: and(succeeded(), ${{ parameters.checkCoverage }})
