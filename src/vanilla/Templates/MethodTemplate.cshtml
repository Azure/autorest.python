@using System;
@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Python
@using AutoRest.Python.Model
@using AutoRest.Python.vanilla.Templates
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Model.MethodPy>
@{
string methodName = Model.Name.ToPythonCase();
string defKeyword = AsyncMode? "async def" : "def";
}
    @(defKeyword) @(methodName)(self, @(Model.MethodParameterDeclaration(Python3Mode)), **kwargs):
        """@(WrapComment(string.Empty, Model.BuildSummaryAndDescriptionString()))
@EmptyLine
@if (Model.Deprecated)
{
@:        .. warning::
@:           This method is deprecated
@EmptyLine
}
@foreach(var parameter in Model.DocumentationParameters)
{
@:        @ParameterWrapComment(string.Empty, MethodPy.GetParameterDocumentationString(parameter))
@:        @ParameterWrapComment(string.Empty, ":type " + parameter.Name + ": " + Model.GetDocumentationType(parameter.ModelType))
}
        @ParameterWrapComment(string.Empty, ":param callable cls: A custom type or function that will be passed the direct response")
        @ParameterWrapComment(string.Empty, string.Format(":return: {0} or the result of cls(response)", Model.GetDocumentationTypeName(Model.ReturnType.Body)))
        @ParameterWrapComment(string.Empty, string.Format(":rtype: {0}", Model.GetReturnTypeDocumentation(Model.ReturnType.Body)))
        @ParameterWrapComment(string.Empty, string.Format(":raises: {0}", Model.ExceptionDocumentation))
        """
@if (Model.Deprecated)
{
@:        warnings.warn('Method @methodName is deprecated', DeprecationWarning)
}
        error_map = kwargs.pop('error_map', None)
        @Model.BuildInputMappings()
@if (Model.InputParameterTransformation.Any())
{
@EmptyLine
}
@if (Model.ConstantParameters.Any())
{
	foreach (var parameter in Model.ConstantParameters)
	{
        @:@(parameter.Name) = @(parameter.DefaultValue)
	}
@EmptyLine
}
        # Construct URL
        url = self.@(methodName).metadata['url']
        @(Model.BuildUrlPath("url", Model.LogicalParameters))
@EmptyLine
        # Construct parameters
        query_parameters = {}
        @(Model.BuildUrlQuery("query_parameters", Model.LogicalParameters))
@EmptyLine
        # Construct headers
        header_parameters = {}
@if (Model.HasAnyResponse)
{
        @:header_parameters['Accept'] = '@(Model.AcceptContentType)'
}
@if (Model.RequestBody != null || Model.IsFormData)
{
        @:header_parameters['Content-Type'] = '@(Model.RequestContentType)'
}
        @(Model.SetDefaultHeaders)
        @(Model.BuildHeaders("header_parameters"))
@EmptyLine
@if (Model.RequestBody != null)
{
        @:# Construct body
@if (!Model.IsStreamRequestBody)
  {
        // Right now, just generate the serialization context if it's a sequence type. Could be smarter later
        string serializationContext = "";
        if(Model.CodeModel.ShouldGenerateXmlSerialization)
        {
                var serializationContextContent = Model.BuildSerializationContext();
                if(!string.IsNullOrEmpty(serializationContextContent))
                {
                        serializationContext = ", serialization_ctxt=serialization_ctxt";
        @:serialization_ctxt = @serializationContextContent
                }
        }
        if (Model.RequestBody.IsRequired)
        {
        @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.ModelType.ToPythonRuntimeTypeString())'@serializationContext)
        }
        else
        {
        @:if @Model.RequestBody.Name is not None:
            @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.ModelType.ToPythonRuntimeTypeString())'@serializationContext)
        @:else:
            @:body_content = None
        }
  }
@EmptyLine
}
else if (Model.IsFormData)
{
        @:# Construct form data
        @:form_data_content = {
  foreach (var parameter in Model.LocalParameters)
  {
    if (parameter.Location == ParameterLocation.FormData)
    {
            @:'@parameter.SerializedName': @parameter.Name,
    }
  }
        @:}
@EmptyLine
}
        # Construct and send request
@if (Model.IsFormData)
{
        @:request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters, header_parameters, form_content=form_data_content)
}
else if (Model.IsStreamRequestBody)
{
  foreach (var parameter in Model.LocalParameters)
  {
    if (parameter.Location == ParameterLocation.Body && parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
    {
        @:request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters, header_parameters, stream_content=@parameter.Name)
        break;
    }
  }
}
else if (Model.RequestBody != null)
{
        @:request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters, header_parameters, body_content)
}
else
{
        @:request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters, header_parameters)
}

@{string streamParameter = "stream="+(Model.IsStreamResponse?"True":"False");}
@{string sendCall = Model.GetSendCall(AsyncMode);}
        pipeline_response = @(sendCall)(request, @(streamParameter), **kwargs)
        response = pipeline_response.http_response
@EmptyLine
        if @Model.FailureStatusCodePredicate:
@if((AsyncMode) && (Model.IsStreamResponse))
{
            @:await response.load_body()
}
            @Model.RaisedException
@EmptyLine
@if (Model.HasAnyResponse)
{
  if (Model.HasResponseHeader)
  {
        @:header_dict = {}
  }
        @:deserialized = None
foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null))
{
        @:if response.status_code == @MethodPy.GetStatusCodeReference(responsePair.Key):
if (Model.IsStreamResponse)
{
            @:deserialized = response.stream_download(self._client._pipeline)
}
else
{

            @:deserialized = self._deserialize('@responsePair.Value.Body.ToPythonRuntimeTypeString()', response)
}
            @:@Model.AddIndividualResponseHeader(responsePair.Key)
}
@EmptyLine
        @:if cls:
            @:return cls(response, deserialized, @Model.AddResponseHeader())
@EmptyLine
        @:return deserialized
}
else
{
        @:@Model.ReturnEmptyResponse
}
    @(methodName).metadata = {'url': '@(Model.Url)'}
