@using System;
@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Python
@using AutoRest.Python.Model
@using AutoRest.Python.vanilla.Templates
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Model.MethodPy>
    def @(((string)Model.Name).ToPythonCase())(
            self, @(Model.MethodParameterDeclaration(Model.AddCustomHeader)), **operation_config):
        """@(WrapComment(string.Empty, Model.BuildSummaryAndDescriptionString()))
@EmptyLine
@if (Model.Deprecated)
{
@:        .. warning::
@:           This method is deprecated
@EmptyLine
}
@foreach(var parameter in Model.DocumentationParameters)
{
@:        @ParameterWrapComment(string.Empty, MethodPy.GetParameterDocumentationString(parameter))
@:        @ParameterWrapComment(string.Empty, ":type " + parameter.Name + ": " + Model.GetDocumentationType(parameter.ModelType))
}
        @ParameterWrapComment(string.Empty, ":param dict custom_headers: headers that will be added to the request")
        @ParameterWrapComment(string.Empty, ":param bool raw: returns the direct response alongside the deserialized response")
@if (Model.NeedsCallback)
{
@:        @ParameterWrapComment(string.Empty, ":param callback: When specified, will be called with each chunk of data that is streamed. The callback should take two arguments, the bytes of the current chunk of data and the response object. If the data is uploading, response will be None.")
@:        @ParameterWrapComment(string.Empty, ":type callback: Callable[Bytes, response=None]")
}
        @ParameterWrapComment(string.Empty, ":param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.")
        @ParameterWrapComment(string.Empty, string.Format(":return: {0} or ClientRawResponse if raw=true", Model.GetDocumentationTypeName(Model.ReturnType.Body)))
        @ParameterWrapComment(string.Empty, string.Format(":rtype: {0} or ~msrest.pipeline.ClientRawResponse", Model.GetReturnTypeDocumentation(Model.ReturnType.Body)))
        @ParameterWrapComment(string.Empty, string.Format(":raises: {0}", Model.ExceptionDocumentation))
        """
@if (Model.Deprecated)
{
@:        @(string.Format("warnings.warn(\"Method {0} is deprecated\", DeprecationWarning)", ((string)Model.Name).ToPythonCase()))
}
        @Model.BuildInputMappings()
@if (Model.InputParameterTransformation.Any())
{
@EmptyLine
}
@if (Model.ConstantParameters.Any())
{
	foreach (var parameter in Model.ConstantParameters)
	{
        @:@(parameter.Name) = @(parameter.DefaultValue)
	}
@EmptyLine
}
        # Construct URL
        url = self.@(((string)Model.Name).ToPythonCase()).metadata['url']
        @(Model.BuildUrlPath("url", Model.LogicalParameters))
@EmptyLine
        # Construct parameters
        query_parameters = {}
        @(Model.BuildUrlQuery("query_parameters", Model.LogicalParameters))
@EmptyLine
        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = '@(Model.RequestContentType)'
        @(Model.SetDefaultHeaders)
        @(Model.BuildHeaders("header_parameters"))
@EmptyLine
@if (Model.RequestBody != null)
{
        @:# Construct body
  if (Model.IsStreamRequestBody)
  {
    foreach (var parameter in Model.LocalParameters)
    {
      if (parameter.Location == ParameterLocation.Body && parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
      {
        @:body_content = self._client.stream_upload(@parameter.Name, callback)
        break;
      }
    }   
  }
  else if (Model.RequestBody.IsRequired)
  {
        @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.ModelType.ToPythonRuntimeTypeString())')
  }
  else
  {
        @:if @Model.RequestBody.Name is not None:
            @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.ModelType.ToPythonRuntimeTypeString())')
        @:else:
            @:body_content = None
  }
@EmptyLine
}
else if (Model.IsFormData)
{
        @:# Construct form data
        @:form_data_content = {
  foreach (var parameter in Model.LocalParameters)
  {
    if (parameter.Location == ParameterLocation.FormData)
    {
            @:'@parameter.SerializedName': @parameter.Name,
    }
  }
        @:}
@EmptyLine
}
        # Construct and send request
        request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters)
@if (Model.RequestBody != null)
{
        @:response = self._client.send(
            @:request, header_parameters, body_content, stream=@(Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream)?"True":"False"), **operation_config)
}
else if (Model.IsFormData)
{
        @:response = self._client.send_formdata(
            @:request, header_parameters, form_data_content, stream=@(Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream)?"True":"False"), **operation_config)
}
else
{
        @:response = self._client.send(request, header_parameters, stream=@(Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream)?"True":"False"), **operation_config)
}
@EmptyLine
        if @Model.FailureStatusCodePredicate:
            @Model.RaisedException
@EmptyLine
@if (Model.HasAnyResponse)
{
        @:deserialized = None
  if (Model.HasResponseHeader)
  {
        @:header_dict = {}
  }
@EmptyLine
  foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null))
  {
        @:if response.status_code == @MethodPy.GetStatusCodeReference(responsePair.Key):
    if (responsePair.Value.Body.IsPrimaryType(KnownPrimaryType.Stream))
    {
            @:deserialized = self._client.stream_download(response, callback)
    }
    else
    {
            @:deserialized = self._deserialize('@responsePair.Value.Body.ToPythonRuntimeTypeString()', response)
    }
            @:@Model.AddIndividualResponseHeader(responsePair.Key)
  }
@EmptyLine
        @:if raw:
            @:client_raw_response = ClientRawResponse(deserialized, response)
            @:@Model.AddResponseHeader()
            @:return client_raw_response
@EmptyLine
        @:return deserialized
}
else
{
        @:@Model.ReturnEmptyResponse
}
    @(((string)Model.Name).ToPythonCase()).metadata = {'url': '@(Model.Url)'}
