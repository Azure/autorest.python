@using AutoRest.Python.vanilla.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Python
@using AutoRest.Python.Model
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Model.CodeModelPy>
# coding=utf-8
# --------------------------------------------------------------------------
@Header("# ").TrimMultilineHeader()
# --------------------------------------------------------------------------
@{
string clientName = Model.Name;
}

@EmptyLine
@if (Model.HasAnyDeprecated)
{
@:import warnings
}
from azure.core import AsyncPipelineClient
from msrest import Serializer, Deserializer
@EmptyLine
from ._configuration_async import @(Model.Name)Configuration
@{
bool hasClientLevelMethods = Model.MethodTemplateModels.Any( each => each.MethodGroup.IsCodeModelMethodGroup);
}
@if (hasClientLevelMethods)
{
@:from .operations_async import @(Model.Name)OperationsMixin
}
@if (Model.HasAnyDefaultExceptions)
{
@:from azure.core.exceptions import HttpResponseError, map_error
}
else
{
@:from azure.core.exceptions import map_error
}
@if (Model.MethodGroupModels.Any())
{
  foreach (var modelGroupType in Model.MethodGroupModels)
  {
@:from .operations_async import @((string) modelGroupType.TypeName)
  }
}
@if (Model.HasAnyModel)
{
@:from .. import models
}
@EmptyLine
@EmptyLine
@if (hasClientLevelMethods)
{
@:class @(Model.Name)(@(Model.Name)OperationsMixin):
}
else
{
@:class @(Model.Name)(object):
}
    """@Model.ServiceDocument
@EmptyLine
@if (Model.MethodGroupModels.Any())
{
@EmptyLine
  foreach (var methodGroup in Model.MethodGroupModels)
  {
@:    :ivar @(((string) methodGroup.Name).ToPythonCase()): @((string) methodGroup.Name) operations
@:    :vartype @(((string) methodGroup.Name).ToPythonCase()): @(Model.Namespace).aio.operations_async.@((string) methodGroup.TypeName)
  }
}
@EmptyLine
@foreach (var property in Model.Properties.Where(each => !each.IsConstant))
{
@:    @ParameterWrapComment(string.Empty, CodeModelPy.GetPropertyDocumentationString(property))
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + Model.GetPropertyDocumentationType(property.ModelType))
}

@if (!Model.IsCustomBaseUri)
{
@:    :param str base_url: Service URL
}
    """
@EmptyLine
    def __init__(
            self@(Model.RequiredConstructorParameters)@(Model.IsCustomBaseUri ? "" : ", base_url=None"), **kwargs):
@EmptyLine
@if (Model.IsCustomBaseUri)
{
@:        base_url = '@Model.BaseUrl'
}
else
{
@:        if not base_url:
@:            base_url = '@Model.BaseUrl'
}
        self._config = @(Model.Name)Configuration(@(Model.ConfigConstructorParameters)**kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)
@EmptyLine
@if (Model.ModelTemplateModels.Any())
{
        @:client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
}
else
{
        @:client_models = {}
}
@if (Model.ApiVersion != null)
{
        @:self.api_version = '@(Model.ApiVersion)'
}
        self._serialize = Serializer(client_models)
@if (! Model.ClientSideValidationEnabled)
{
        @:self._serialize.client_side_validation = False
}
        self._deserialize = Deserializer(client_models)
@EmptyLine
@foreach (var methodGroup in Model.MethodGroupModels)
{
        @:self.@(((string) methodGroup.Name).ToPythonCase()) = @((string) methodGroup.TypeName)(
            @:self._client, self._config, self._serialize, self._deserialize)
}
@EmptyLine
    async def __aenter__(self):
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details):
        await self._client.__aexit__(*exc_details)