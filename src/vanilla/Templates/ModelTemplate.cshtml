@using System;
@using System.Linq
@using System.Collections.Generic
@using AutoRest.Core.Model
@using AutoRest.Python
@using AutoRest.Python.Model
@inherits AutoRest.Python.PythonTemplate<System.Collections.Generic.List<AutoRest.Python.Model.CompositeTypePy>>
# coding=utf-8
# --------------------------------------------------------------------------
@Header("# ").TrimMultilineHeader()
# --------------------------------------------------------------------------
@EmptyLine
from msrest.serialization import Model
@foreach(var currModel in Model) {
<text>
@if (currModel.IsException)
{
@:from msrest.exceptions import HttpOperationError
break;
}
</text>
}
@EmptyLine
@EmptyLine
@{bool first_model = true; }
@foreach(var currModel in Model){
<text>
@if (!first_model) {
@EmptyLine
@EmptyLine
}
@{first_model = false;}
@if (currModel.BaseModelType != null)
{
@:class @(currModel.Name)(@currModel.BaseModelType.Name):
}
else
{
@:class @(currModel.Name)(Model):
}
    """@(WrapComment(string.Empty, currModel.BuildSummaryAndDescriptionString()))
@if (currModel.SubModelTypes.Any())
{
@EmptyLine
@:    @WrapComment(string.Empty, "You probably want to use the sub-classes and not this class directly. Known sub-classes are: " + currModel.SubModelTypeAsString)
}
@if (currModel.ReadOnlyAttributes.Any())
{
@EmptyLine
@:    @WrapComment(string.Empty, "Variables are only populated by the server, and will be ignored when sending a request.")
}
@if (currModel.RequiredFieldsList.Any())
{
@EmptyLine
@:    @WrapComment(string.Empty, "All required parameters must be populated in order to send to Azure.")
}
@if (currModel.ComposedProperties.Any())
{
@EmptyLine
    foreach (var property in currModel.ComposedProperties)
    {
@:    @ParameterWrapComment(string.Empty, CompositeTypePy.GetPropertyDocumentationString(property))
        if (property.IsConstant || property.IsReadOnly)
        {
@:    @ParameterWrapComment(string.Empty, ":vartype " + property.Name + ": " + currModel.GetPropertyDocumentationType(property.ModelType))
    }
        else
        {
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + currModel.GetPropertyDocumentationType(property.ModelType))
        }
    }
}
    """
@if (currModel.Validators.Any() || currModel.RequiredFieldsList.Any())
{
<text>
    @EmptyLine
    _validation = {
    @foreach (var validator in currModel.Validators)
    {
        @:@(validator)
    }
    }
</text>
}
@{
    var mapAttrList = new List<Property>(currModel.ComposedProperties);
@EmptyLine
    @:_attribute_map = {
    if (mapAttrList.Count > 0)
    {
      for (int i = 0; i < mapAttrList.Count; i++)
      {
        @:@(currModel.InitializeProperty(mapAttrList[i]))
      }
    }
    @:}
}
@if(currModel.CodeModel.ShouldGenerateXmlSerialization)
{
    @:_xml_map = {
        @:@(currModel.InitializeXmlProperty())
    @:}
}
@if (currModel.SubModelTypes.Any())
{
<text>
@EmptyLine
    _subtype_map = {
        '@currModel.PolymorphicDiscriminatorProperty.Name': {@currModel.SubModelTypeList}
    }
</text>
}
@foreach(var property in currModel.Properties)
{
    if (property.IsConstant)
    {
@EmptyLine
    @:@(currModel.InitializeProperty(String.Empty, property, false))
    }
}
@if (currModel.NeedsConstructor)
{
@EmptyLine
@if (Python3Mode)
{
    @:def __init__(self@(currModel.ModelParameterDeclaration())) -> None:
    if (currModel.HasParent)
    {
        @:super(@(currModel.Name), self).__init__(@(currModel.SuperParameterDeclaration()))
    }
    else
    {
        @:super(@(currModel.Name), self).__init__(**kwargs)
    }
}
else
{
    @:def __init__(self, **kwargs):
    @:    super(@(currModel.Name), self).__init__(**kwargs)
}
    var propertyList = new List<Property>(currModel.Properties);
    if (propertyList.Count > 0)
    {
        for (int i = 0; i < propertyList.Count; i++)
        {
            if (!propertyList[i].IsConstant)
            {
        @:@(currModel.InitializeProperty("self", propertyList[i], !Python3Mode))
            }
	    }
	}
    if (currModel.NeedsPolymorphicConverter)
    {
        @:self.@currModel.PolymorphicDiscriminatorProperty.Name = '@currModel.SerializedName'
    }
}
@if (currModel.IsException)
{
@EmptyLine
@EmptyLine
@:class @(currModel.ExceptionTypeDefinitionName)(HttpOperationError):
@:    """Server responsed with exception of type: '@(currModel.Name)'.
@EmptyLine
@:    :param deserialize: A deserializer
@:    :param response: Server response to be deserialized.
@:    """
@EmptyLine
    @:def __init__(self, deserialize, response, *args):
@EmptyLine
        @:super(@(currModel.ExceptionTypeDefinitionName), self).__init__(deserialize, response, '@(currModel.Name)', *args)
}
</text>
}
