@using System;
@using System.Linq
@using System.Collections.Generic
@using AutoRest.Core.Model
@using AutoRest.Python
@using AutoRest.Python.Model
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Model.CompositeTypePy>
# coding=utf-8
# --------------------------------------------------------------------------
@Header("# ").TrimMultilineHeader()
# --------------------------------------------------------------------------
@EmptyLine
@if(Model.ComplexConstants.Any())
{
    foreach(var property in Model.ComplexConstants.Values)
    {
@:from .@property.Name.ToPythonCase() import @property.Name
    }
}
@if (Model.BaseModelType != null && Python3Mode)
{
@:from .@Model.BaseModelType.Name.ToPythonCase()_py3 import @Model.BaseModelType.Name
}
else if(Model.BaseModelType != null && !Python3Mode)
{
@:from .@Model.BaseModelType.Name.ToPythonCase() import @Model.BaseModelType.Name
}
else
{
@:from msrest.serialization import Model
}
@if (Model.IsException)
{
@:from msrest.exceptions import HttpOperationError
}
@EmptyLine
@EmptyLine
@if (Model.BaseModelType != null)
{
@:class @(Model.Name)(@Model.BaseModelType.Name):
}
else
{
@:class @(Model.Name)(Model):
}
    """@(WrapComment(string.Empty, Model.BuildSummaryAndDescriptionString()))
@if (Model.SubModelTypes.Any())
{
@EmptyLine
@:    @WrapComment(string.Empty, "You probably want to use the sub-classes and not this class directly. Known sub-classes are: " + Model.SubModelTypeAsString)
}
@if (Model.ReadOnlyAttributes.Any())
{
@EmptyLine
@:    @WrapComment(string.Empty, "Variables are only populated by the server, and will be ignored when sending a request.")
}
@if (Model.RequiredFieldsList.Any())
{
@EmptyLine
@:    @WrapComment(string.Empty, "All required parameters must be populated in order to send to Azure.")
}
@if (Model.ComposedProperties.Any())
{
@EmptyLine
    foreach (var property in Model.ComposedProperties)
    {
@:    @ParameterWrapComment(string.Empty, CompositeTypePy.GetPropertyDocumentationString(property))
        if (property.IsConstant || property.IsReadOnly)
        {
@:    @ParameterWrapComment(string.Empty, ":vartype " + property.Name + ": " + Model.GetPropertyDocumentationType(property.ModelType))
    }
        else
        {
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + Model.GetPropertyDocumentationType(property.ModelType))
        }
    }
}
    """ 
@if (Model.Validators.Any() || Model.RequiredFieldsList.Any())
{
<text>
    @EmptyLine
    _validation = {
    @foreach (var validator in Model.Validators)
    {
        @:@(validator)
    }
    }
</text>
}
@{
    var mapAttrList = new List<Property>(Model.ComposedProperties);
@EmptyLine
    @:_attribute_map = {
    if (mapAttrList.Count > 0)
    {
      for (int i = 0; i < mapAttrList.Count; i++) 
      {
        @:@(Model.InitializeProperty(mapAttrList[i]))
      }
    }
    @:}
}
@if (Model.SubModelTypes.Any())
{
<text>
@EmptyLine
    _subtype_map = {
        '@Model.PolymorphicDiscriminatorProperty.Name': {@Model.SubModelTypeList}
    }
</text>
}
@foreach(var property in Model.Properties)
{
    if (property.IsConstant)
    {
@EmptyLine
    @:@(Model.InitializeProperty(String.Empty, property, false))
    }
}
@if (Model.NeedsConstructor)
{ 
@EmptyLine
@if (Python3Mode)
{
    @:def __init__(self@(Model.ModelParameterDeclaration())) -> None: 
    if (Model.HasParent)
    {
        @:super(@(Model.Name), self).__init__(@(Model.SuperParameterDeclaration()))
    }
    else
    {
        @:super(@(Model.Name), self).__init__(**kwargs)
    }    
}
else
{
    @:def __init__(self, **kwargs):
    @:    super(@(Model.Name), self).__init__(**kwargs)
}
    var propertyList = new List<Property>(Model.Properties);
    if (propertyList.Count > 0)
    {
        for (int i = 0; i < propertyList.Count; i++)
        {
            if (!propertyList[i].IsConstant)
            {
        @:@(Model.InitializeProperty("self", propertyList[i], !Python3Mode))
            }
	    }
	}
    if (Model.NeedsPolymorphicConverter)
    {
        @:self.@Model.PolymorphicDiscriminatorProperty.Name = '@Model.SerializedName'
    }
}
@if (Model.IsException)
{
@EmptyLine
@EmptyLine
@:class @(Model.ExceptionTypeDefinitionName)(HttpOperationError):
@:    """Server responsed with exception of type: '@(Model.Name)'.
@EmptyLine
@:    :param deserialize: A deserializer
@:    :param response: Server response to be deserialized.
@:    """
@EmptyLine
    @:def __init__(self, deserialize, response, *args):
@EmptyLine
        @:super(@(Model.ExceptionTypeDefinitionName), self).__init__(deserialize, response, '@(Model.Name)', *args)
}

