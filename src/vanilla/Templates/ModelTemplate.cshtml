@using System;
@using System.Linq
@using System.Collections.Generic
@using AutoRest.Core.Model
@using AutoRest.Python
@using AutoRest.Python.Model
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.DAG.DAGraph<AutoRest.Python.Model.CompositeTypePy>>
# coding=utf-8
# --------------------------------------------------------------------------
@Header("# ").TrimMultilineHeader()
# --------------------------------------------------------------------------
@EmptyLine
@{ CompositeTypePy nextNode = Model.getNext(); }
@while (nextNode != null) {
<text>    
    @if (nextNode.ComplexConstants.Any())
    {
        foreach (var property in nextNode.ComplexConstants.Values)
        {
            @:from .@property.Name.ToPythonCase() import @property.Name
        }
    }
    @if (nextNode.BaseModelType != null && Python3Mode)
    {
        @:from .@nextNode.BaseModelType.Name.ToPythonCase()_py3 import @nextNode.BaseModelType.Name
    }
    else if (nextNode.BaseModelType != null && !Python3Mode)
    {
        @:from .@nextNode.BaseModelType.Name.ToPythonCase() import @nextNode.BaseModelType.Name
    }
    else
    {
        @:from msrest.serialization import nextNode
    }
    @if (nextNode.IsException)
    {
        @:from msrest.exceptions import HttpOperationError
    }
    @EmptyLine
    @EmptyLine
    @if (nextNode.BaseModelType != null)
    {
        @:class @(nextNode.Name)(@nextNode.BaseModelType.Name):
    }
    else
    {
        @:class @(nextNode.Name)(nextNode):
    }
        """@(WrapComment(string.Empty, nextNode.BuildSummaryAndDescriptionString()))
    @if (nextNode.SubModelTypes.Any())
    {
        @EmptyLine
        @:    @WrapComment(string.Empty, "You probably want to use the sub-classes and not this class directly. Known sub-classes are: " + nextNode.SubModelTypeAsString)
    }
    @if (nextNode.ReadOnlyAttributes.Any())
    {
        @EmptyLine
        @:    @WrapComment(string.Empty, "Variables are only populated by the server, and will be ignored when sending a request.")
    }
    @if (nextNode.RequiredFieldsList.Any())
    {
        @EmptyLine
        @:    @WrapComment(string.Empty, "All required parameters must be populated in order to send to Azure.")
    }
    @if (nextNode.ComposedProperties.Any())
    {
        @EmptyLine
        foreach (var property in nextNode.ComposedProperties)
        {
            @:    @ParameterWrapComment(string.Empty, CompositeTypePy.GetPropertyDocumentationString(property))
            if (property.IsConstant || property.IsReadOnly)
            {
                @:    @ParameterWrapComment(string.Empty, ":vartype " + property.Name + ": " + nextNode.GetPropertyDocumentationType(property.ModelType))
            }
            else
            {
                @:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + nextNode.GetPropertyDocumentationType(property.ModelType))
            }
        }
    }
        """
    @if (nextNode.Validators.Any() || nextNode.RequiredFieldsList.Any())
    {
        <text>
            @EmptyLine
            _validation = {
            @foreach (var validator in nextNode.Validators)
            {
                @:@(validator)
            }
            }
        </text>
    }
    @{
        var mapAttrList = new List<Property>(nextNode.ComposedProperties);
        @EmptyLine
        @:_attribute_map = {
        if (mapAttrList.Count > 0)
        {
            for (int i = 0; i < mapAttrList.Count; i++)
            {
                @:@(nextNode.InitializeProperty(mapAttrList[i]))
            }
        }
        @:}
    }
    @if (nextNode.CodeModel.ShouldGenerateXmlSerialization)
    {
        @:_xml_map = {
        @:@(nextNode.InitializeXmlProperty())
        @:}
    }
    @if (nextNode.SubModelTypes.Any())
    {
        <text>
            @EmptyLine
            _subtype_map = {
            '@nextNode.PolymorphicDiscriminatorProperty.Name': {@nextNode.SubModelTypeList}
            }
        </text>
    }
    @foreach (var property in nextNode.Properties)
    {
        if (property.IsConstant)
        {
            @EmptyLine
            @:@(nextNode.InitializeProperty(String.Empty, property, false))
        }
    }
    @if (nextNode.NeedsConstructor)
    {
        @EmptyLine
        @if (Python3Mode)
        {
            @:def __init__(self@(nextNode.ModelParameterDeclaration())) -> None:
            if (nextNode.HasParent)
            {
                @:super(@(nextNode.Name), self).__init__(@(nextNode.SuperParameterDeclaration()))
            }
            else
            {
                @:super(@(nextNode.Name), self).__init__(**kwargs)
            }
        }
        else
        {
            @:def __init__(self, **kwargs):
            @:    super(@(nextNode.Name), self).__init__(**kwargs)
        }
        var propertyList = new List<Property>(nextNode.Properties);
        if (propertyList.Count > 0)
        {
            for (int i = 0; i < propertyList.Count; i++)
            {
                if (!propertyList[i].IsConstant)
                {
                    @:@(nextNode.InitializeProperty("self", propertyList[i], !Python3Mode))
                }
            }
        }
        if (nextNode.NeedsPolymorphicConverter)
        {
            @:self.@nextNode.PolymorphicDiscriminatorProperty.Name = '@nextNode.SerializedName'
        }
    }
    @if (nextNode.IsException)
    {
        @EmptyLine
        @EmptyLine
        @:class @(nextNode.ExceptionTypeDefinitionName)(HttpOperationError):
        @:    """Server responsed with exception of type: '@(nextNode.Name)'.
        @EmptyLine
        @:    :param deserialize: A deserializer
        @:    :param response: Server response to be deserialized.
        @:    """
        @EmptyLine
        @:def __init__(self, deserialize, response, *args):
        @EmptyLine
        @:super(@(nextNode.ExceptionTypeDefinitionName), self).__init__(deserialize, response, '@(nextNode.Name)', *args)
    }
    @{
        Model.reportCompletion(nextNode);
        nextNode = Model.getNext();
    }
</text>
} 

