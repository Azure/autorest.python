@using AutoRest.Python.vanilla.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Python
@using AutoRest.Python.Model
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Model.CodeModelPy>
# coding=utf-8
# --------------------------------------------------------------------------
@Header("# ").TrimMultilineHeader()
# --------------------------------------------------------------------------
@EmptyLine
@if (Model.HasAnyDeprecated)
{
@:import warnings
}
from msrest.service_client import SDKClient
from msrest import Configuration, Serializer, Deserializer
from .version import VERSION
@if (Model.MethodTemplateModels.Any( each => each.MethodGroup.IsCodeModelMethodGroup))
{
<text>
from msrest.pipeline import ClientRawResponse
</text>
}
@if (Model.HasAnyDefaultExceptions)
{
@:from msrest.exceptions import HttpOperationError
}
@if (Model.MethodGroupModels.Any())
{
  foreach (var modelGroupType in Model.MethodGroupModels)
  {
@:from .operations.@(((string) modelGroupType.TypeName).ToPythonCase()) import @((string) modelGroupType.TypeName)
  }
}
@if (Model.HasAnyModel)
{
@:from . import models
}
@EmptyLine
@EmptyLine
class @(Model.Name)Configuration(Configuration):
    """Configuration for @(Model.Name)
    Note that all parameters used to create this instance are saved as instance
    attributes.
@EmptyLine
@foreach(var property in Model.Properties.Where( each => !each.IsConstant))
{
@:    @ParameterWrapComment(string.Empty, CodeModelPy.GetPropertyDocumentationString(property))
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + Model.GetPropertyDocumentationType(property.ModelType))
}
@foreach(var property in Model.ConstantProperties)
{
@:    @ParameterWrapComment(string.Empty, CodeModelPy.GetPropertyDocumentationString(property))
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + Model.GetPropertyDocumentationType(property.ModelType))
}

@if (!Model.IsCustomBaseUri)
{ 
@:    :param str base_url: Service URL
}
    """
@EmptyLine
    def __init__(
            self@(Model.RequiredConstructorParameters)@(Model.IsCustomBaseUri ? "" : ", base_url=None")):
@EmptyLine
        @Model.ValidateRequiredParameters

@if (Model.IsCustomBaseUri)
{
@:        base_url = '@Model.BaseUrl'
}
else
{
@:        if not base_url:
@:            base_url = '@Model.BaseUrl'
}

@EmptyLine
        super(@(Model.Name)Configuration, self).__init__(base_url)
@EmptyLine
        self.add_user_agent('@Model.UserAgent/{}'.format(VERSION))
@if (Model.Properties.Any() || Model.ConstantProperties.Any())
{
    @EmptyLine
    foreach (var property in Model.Properties.Where( each => !each.IsConstant))
    {
        @:self.@(property.Name) = @(property.Name)
    }
    foreach (var property in Model.ConstantProperties)
    {
        @:self.@(property.Name) = @(property.DefaultValue)
    }
}
@EmptyLine
@EmptyLine
class @(Model.Name)(SDKClient):
    """@Model.ServiceDocument
@EmptyLine
    :ivar config: Configuration for client.
    :vartype config: @(Model.Name)Configuration
@if (Model.MethodGroupModels.Any())
{
@EmptyLine
  foreach (var methodGroup in Model.MethodGroupModels)
  {
@:    :ivar @(((string) methodGroup.Name).ToPythonCase()): @((string) methodGroup.Name) operations
@:    :vartype @(((string) methodGroup.Name).ToPythonCase()): @(Model.Namespace).operations.@((string) methodGroup.TypeName)
  }
}
@EmptyLine
@foreach (var property in Model.Properties.Where(each => !each.IsConstant))
{
@:    @ParameterWrapComment(string.Empty, CodeModelPy.GetPropertyDocumentationString(property))
@:    @ParameterWrapComment(string.Empty, ":type " + property.Name + ": " + Model.GetPropertyDocumentationType(property.ModelType))
}

@if (!Model.IsCustomBaseUri)
{
@:    :param str base_url: Service URL
}
    """
@EmptyLine
    def __init__(
            self@(Model.RequiredConstructorParameters)@(Model.IsCustomBaseUri ? "" : ", base_url=None")):
@EmptyLine
        self.config = @(Model.Name)Configuration(@(Model.ConfigConstructorParameters))
        super(@(Model.Name), self).__init__(@(Settings.AddCredentials? "self.config.credentials" : PythonConstants.None), self.config)
@EmptyLine
@if (Model.ModelTemplateModels.Any())
{
        @:client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
}
else
{
        @:client_models = {}
}
@if (Model.ApiVersion != null)
{
        @:self.api_version = '@(Model.ApiVersion)'
}
        self._serialize = Serializer(client_models)
@if (! Model.ClientSideValidationEnabled)
{
        @:self._serialize.client_side_validation = False
}
        self._deserialize = Deserializer(client_models)
@EmptyLine
@foreach (var methodGroup in Model.MethodGroupModels)
{
        @:self.@(((string) methodGroup.Name).ToPythonCase()) = @((string) methodGroup.TypeName)(
            @:self._client, self.config, self._serialize, self._deserialize)
}
@foreach (var method in Model.MethodTemplateModels.Where(each => each.MethodGroup.IsCodeModelMethodGroup))
{
@EmptyLine
@(Include(new MethodTemplate(), method))
}
