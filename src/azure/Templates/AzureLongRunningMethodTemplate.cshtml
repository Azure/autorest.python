@using System;
@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Python
@using AutoRest.Python.Model
@using AutoRest.Python.vanilla.Templates
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Azure.Model.MethodPya>
@EmptyLine
@{
string defKeyword = AsyncMode? "async def" : "def";
string methodName = Model.Name.ToPythonCase();
string initialMethodName = "_" + methodName + "_initial";
string trace_decorator = "";
}
@if (Model.AddTracingDecorators)
{
trace_decorator = AsyncMode? "@distributed_trace_async" : "@distributed_trace";
}
    @(defKeyword) @(initialMethodName)(
            self, @(Model.MethodParameterDeclaration(Python3Mode)), **kwargs):
        error_map = kwargs.pop('error_map', None)
        @Model.BuildInputMappings()
@if (Model.InputParameterTransformation.Any())
{
@EmptyLine
}
@if (Model.ConstantParameters.Any())
{
	foreach (var parameter in Model.ConstantParameters)
	{
        @:@(parameter.Name) = @(parameter.DefaultValue)
	}
@EmptyLine
}
        # Construct URL
        url = self.@(methodName).metadata['url']
        @(Model.BuildUrlPath("url", Model.LogicalParameters))
@EmptyLine
        # Construct parameters
        query_parameters = {}
        @(Model.BuildUrlQuery("query_parameters", Model.LogicalParameters))
@EmptyLine
        # Construct headers
        header_parameters = {}
@if (Model.HasAnyResponse)
{
        @:header_parameters['Accept'] = '@(Model.AcceptContentType)'
}
@if (Model.RequestBody != null || Model.IsFormData)
{
        @:header_parameters['Content-Type'] = '@(Model.RequestContentType)'
}
        @(Model.SetDefaultHeaders)
        @(Model.BuildHeaders("header_parameters"))
@EmptyLine
@if (Model.RequestBody != null)
{
        @:# Construct body
  if (Model.IsStreamRequestBody)
  {
    foreach (var parameter in Model.LocalParameters)
    {
      if (parameter.Location == ParameterLocation.Body && parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
      {
        @:body_content = upload_gen(@parameter.Name)
        break;
      }
    }
  }
  else if (Model.RequestBody.IsRequired)
  {
        @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.ModelType.ToPythonRuntimeTypeString())')
  }
  else
  {
        @:if @Model.RequestBody.Name is not None:
            @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.ModelType.ToPythonRuntimeTypeString())')
        @:else:
            @:body_content = None
  }
@EmptyLine
}
        # Construct and send request
@if (Model.RequestBody != null)
{
        @:request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters, header_parameters, body_content)
}
else
{
        @:request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters, header_parameters)
}
@{string sendCall = Model.GetSendCall(AsyncMode);}
        pipeline_response = @(sendCall)(request, stream=False, **kwargs)
        response = pipeline_response.http_response
@EmptyLine
        if @Model.FailureStatusCodePredicate:
            @Model.RaisedException
@if (Model.HasAnyResponse)
{
@EmptyLine
  if (Model.HasResponseHeader)
  {
        @:header_dict = {}
  }
@EmptyLine
  foreach (var responsePair in Model.Responses.Where(r => r.Value.Body != null))
  {
        @:if response.status_code == @MethodPy.GetStatusCodeReference(responsePair.Key):
            @:self._deserialize('@responsePair.Value.Body.ToPythonRuntimeTypeString()', response)
            @:@Model.AddIndividualResponseHeader(responsePair.Key)
  }
}
@EmptyLine
        return response
@EmptyLine
    @(trace_decorator)
    @(defKeyword) @(methodName)(
            self, @(Model.MethodParameterDeclaration(Python3Mode)), polling=True, **kwargs):
        """@(WrapComment(string.Empty, Model.BuildSummaryAndDescriptionString()))
@*need to fix comment here for long running function*@
@EmptyLine
@if (Model.Deprecated)
{
@:        .. warning::
@:           This method is deprecated
@EmptyLine
}

@foreach(var parameter in Model.DocumentationParameters)
{
@:        @ParameterWrapComment(MethodPy.GetParameterDocumentationString(parameter))
@:        @ParameterWrapComment(":type " + parameter.Name + ": " + Model.GetDocumentationType(parameter.ModelType))
}
@if (AsyncMode)
{
@:        @ParameterWrapComment(":param callable cls: A custom type or function that will be passed the direct response")
@:        @ParameterWrapComment(":param polling: True for AsyncARMPolling, False for no polling, or a polling object for personal polling strategy")
@:        @ParameterWrapComment(":return: An instance of " + Model.GetDocumentationTypeName(Model.ReturnType.Body))
@:        @ParameterWrapComment(string.Format(":rtype: ~{0}", Model.GetReturnTypeDocumentation(Model.ReturnType.Body)))
}
else
{
@:        @ParameterWrapComment(":param callable cls: A custom type or function that will be passed the direct response")
@:        @ParameterWrapComment(":param polling: True for ARMPolling, False for no polling, or a polling object for personal polling strategy")
@:        @ParameterWrapComment(":return: An instance of LROPoller that returns " + Model.GetDocumentationTypeName(Model.ReturnType.Body))
@:        @ParameterWrapComment(string.Format(":rtype: ~msrestazure.azure_operation.AzureOperationPoller[{0}]", Model.GetReturnTypeDocumentation(Model.ReturnType.Body)))
}
        @ParameterWrapComment(string.Format(":raises: {0}", Model.ExceptionDocumentation))
        """
@if (Model.Deprecated)
{
@:        warnings.warn('Method @methodName is deprecated', DeprecationWarning)
}
@if (AsyncMode)
{
@:        raw_result = await self.@(initialMethodName)(
}
else
{
@:        raw_result = self.@(initialMethodName)(
}
@foreach(var parameter in Model.DocumentationParameters)
{
@:            @parameter.Name=@parameter.Name,
}
            **kwargs
        )
@EmptyLine
        def get_long_running_output(response):
@if (Model.HasAnyResponse)
{
  if (Model.HasResponseHeader)
  {
            @:@Model.AddIndividualResponseHeader(null)
  }
            @:deserialized = self._deserialize('@Model.ReturnType.Body.ToPythonRuntimeTypeString()', response)
@EmptyLine
            @:return deserialized
}
else
{
            @:@Model.ReturnEmptyResponse
}
@EmptyLine
        lro_delay = kwargs.get(
            'polling_interval ',
            self._config.polling_interval)
@{
var lro_string = Model.GetLROOptions();
if(lro_string != "")
{
        lro_string = ", lro_options="+lro_string;
}
}
@if (AsyncMode)
{
@:        if polling is True: polling_method = AsyncARMPolling(lro_delay@(lro_string), **kwargs)
@:        elif polling is False: polling_method = AsyncNoPolling()
@:        else: polling_method = polling
@:        return await async_poller(self._client, raw_result, get_long_running_output, polling_method)
}
else
{
@:        if polling is True: polling_method = ARMPolling(lro_delay@(lro_string), **kwargs)
@:        elif polling is False: polling_method = NoPolling()
@:        else: polling_method = polling
@:        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
}
    @(methodName).metadata = {'url': '@(Model.Url)'}
