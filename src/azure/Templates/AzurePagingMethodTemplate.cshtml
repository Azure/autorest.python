@using System;
@using System.Linq;
@using AutoRest.Python
@using AutoRest.Python.Model
@using AutoRest.Python.vanilla.Templates
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Azure.Model.MethodPya>
@{
string methodName = Model.Name.ToPythonCase();
}
    def @(methodName)(
            self, @(Model.MethodParameterDeclaration(true, Python3Mode)), **operation_config):
        """@(WrapComment(string.Empty, Model.BuildSummaryAndDescriptionString()))
@EmptyLine
@if (Model.Deprecated)
{
@:        .. warning::
@:           This method is deprecated
@EmptyLine
}
@*need to fix comment here for paging function*@
@foreach(var parameter in Model.DocumentationParameters)
{
@:        @ParameterWrapComment(string.Empty, MethodPy.GetParameterDocumentationString(parameter))
@:        @ParameterWrapComment(string.Empty, ":type " + parameter.Name + ": " + Model.GetDocumentationType(parameter.ModelType))
}
        @ParameterWrapComment(string.Empty, ":param dict custom_headers: headers that will be added to the request")
        @ParameterWrapComment(string.Empty, ":param bool raw: returns the direct response alongside the deserialized response")
        @ParameterWrapComment(string.Empty, ":param operation_config: :ref:`Operation configuration overrides<msrest:optionsforoperations>`.")
        @ParameterWrapComment(string.Empty, ":return: An iterator like instance of " + Model.GetDocumentationTypeName(Model.PagedResponseContentClass))
        @ParameterWrapComment(string.Empty, string.Format(":rtype: {0}[{1}]", Model.GetReturnTypeDocumentation(Model.ReturnType.Body), Model.GetReturnTypeDocumentation(Model.PagedResponseContentClass)))
        @ParameterWrapComment(string.Empty, string.Format(":raises: {0}", Model.ExceptionDocumentation))
        """
@if (Model.Deprecated)
{
@:        warnings.warn('Method @methodName is deprecated', DeprecationWarning)
}
        @Model.BuildInputMappings()
@if (Model.InputParameterTransformation.Any())
{
@EmptyLine
}
@if (Model.ConstantParameters.Any())
{
	foreach (var parameter in Model.ConstantParameters)
	{
        @:@(parameter.Name) = @(parameter.DefaultValue)
	}
@EmptyLine
}
        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.@(((string)Model.Name).ToPythonCase()).metadata['url']
                @(Model.BuildUrlPath("url", Model.LogicalParameters))
@EmptyLine
                # Construct parameters
                query_parameters = {}
                @(Model.BuildUrlQuery("query_parameters", Model.LogicalParameters))
@EmptyLine
            else:
@if (Model.PagingURL != null)
{
                @:url = '@(Model.PagingURL)'
}
else
{
                @:url = next_link
}
                @(Model.BuildUrlPath("url", Model.PagingParameters))
                query_parameters = {}
                @(Model.BuildUrlQuery("query_parameters", Model.PagingParameters))
@EmptyLine
            # Construct headers
            header_parameters = {}
@if (Model.HasAnyResponse)
{
            @:header_parameters['Accept'] = '@(Model.AcceptContentType)'
}
@if (Model.RequestBody != null || Model.IsFormData)
{
            @:header_parameters['Content-Type'] = '@(Model.RequestContentType)'
}
            @(Model.SetDefaultHeaders)
            @(Model.BuildHeaders("header_parameters"))
@EmptyLine
@if (Model.RequestBody != null)
{
            @:# Construct body
  if (Model.RequestBody.IsRequired)
  {
            @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.ModelType.ToPythonRuntimeTypeString())')
  }
  else
  {
            @:if @Model.RequestBody.Name is not None:
                @:body_content = self._serialize.body(@Model.RequestBody.Name, '@(Model.RequestBody.ModelType.ToPythonRuntimeTypeString())')
            @:else:
                @:body_content = None
  }
@EmptyLine
}
            # Construct and send request
@if (Model.RequestBody != null)
{
            @:request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters, header_parameters, body_content)
}
else
{
            @:request = self._client.@(MethodPy.GetHttpFunction(Model.HttpMethod))(url, query_parameters, header_parameters)
}
            return request
@EmptyLine
        def internal_paging(next_link=None):
            request = prepare_request(next_link)
@EmptyLine
            response = self._client.send(request, stream=False, **operation_config)
@EmptyLine
            if @Model.FailureStatusCodePredicate:
                @Model.RaisedException
@EmptyLine
            return response
@EmptyLine
@if(AsyncMode)
{
@:        async def internal_paging_async(next_link=None):
@:            request = prepare_request(next_link)
@EmptyLine
            @:response = await self._client.async_send(request, stream=False, **operation_config)
@EmptyLine
@:            if @Model.FailureStatusCodePredicate:
@:                @Model.RaisedException
@EmptyLine
@:            return response
@EmptyLine
}
        # Deserialize response
        header_dict = None
        if raw:
            @Model.AddIndividualResponseHeader(null)
@if(AsyncMode)
{
        @:deserialized = models.@(Model.PagedResponseClass.Name)(
            @:internal_paging, self._deserialize.dependencies, header_dict, async_command=internal_paging_async)
}
else
{
        @:deserialized = models.@(Model.PagedResponseClass.Name)(internal_paging, self._deserialize.dependencies, header_dict)
}
@EmptyLine
        return deserialized
    @(methodName).metadata = {'url': '@(Model.Url)'}