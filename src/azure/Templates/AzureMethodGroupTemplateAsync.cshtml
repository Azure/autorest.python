@using AutoRest.Python.vanilla.Templates
@using System.Linq;
@using AutoRest.Python
@using AutoRest.Python.Azure.Model
@using AutoRest.Python.azure.Templates
@inherits AutoRest.Python.PythonTemplate<AutoRest.Python.Azure.Model.MethodGroupPya>
# coding=utf-8
# --------------------------------------------------------------------------
@Header("# ").TrimMultilineHeader()
# --------------------------------------------------------------------------
@EmptyLine
import uuid
@if (Model.HasAnyDeprecated)
{
@:import warnings
}
@if (Model.HasAnyHttpResponseErrors)
{
@:from azure.core.exceptions import HttpResponseError, map_error
}
else
{
@:from azure.core.exceptions import map_error
}
@if (Model.HasAnyLongRunOperation)
{
@:from azure.core.polling.async_poller import async_poller, AsyncNoPolling
@:from msrestazure.polling.async_arm_polling import AsyncARMPolling
}
@if (Model.HasAnyModel)
{
@EmptyLine
@:from ... import models
}
@EmptyLine
@EmptyLine
class @((string) Model.TypeName):
    """@((string) Model.TypeName) async operations.
@EmptyLine
    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.
@EmptyLine
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
@foreach(var property in Model.ConstantProperties)
{
    @:@Model.GetPropertyDocumentationString(property)
}
    """
@if (Model.HasAnyModel)
{
@EmptyLine
@:    models = models
}
@EmptyLine
    def __init__(self, client, config, serializer, deserializer) -> None:
@EmptyLine
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
@foreach(var property in Model.ConstantProperties)
{
        @:@property.Name = @property.DefaultValue
}
@EmptyLine
        self._config = config
@foreach (var method in Model.MethodTemplateModels)
{
@EmptyLine
@:@(Include(new AzureMethodTemplate() {AsyncMode = true, Python3Mode = true}, (MethodPya)method))
}
