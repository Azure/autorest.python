# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

            from msrest.serialization import nextNode


        class CheckSkuAvailabilityParameter(nextNode):
        """Check SKU availability parameter.

                All required parameters must be populated in order to send to
            Azure.

                    :param skus: Required. The SKU of the resource.
                    :type skus: list[str or ~cognitiveservices.models.SkuName]
                :param kind: Required. The Kind of the resource. Possible
                 values include: 'Bing.Autosuggest.v7', 'Bing.CustomSearch',
                 'Bing.Search.v7', 'Bing.Speech', 'Bing.SpellCheck.v7',
                 'ComputerVision', 'ContentModerator', 'CustomSpeech',
                 'CustomVision.Prediction', 'CustomVision.Training', 'Emotion',
                 'Face', 'LUIS', 'QnAMaker', 'SpeakerRecognition',
                 'SpeechTranslation', 'TextAnalytics', 'TextTranslation',
                 'WebLM'
                    :type kind: str or ~cognitiveservices.models.Kind
                :param type: Required. The Type of the resource.
                    :type type: str
        """

            _validation = {
                'skus': {'required': True},
                'kind': {'required': True},
                'type': {'required': True},
            }

            _attribute_map = {
                'skus': {'key': 'skus', 'type': '[str]'},
                'kind': {'key': 'kind', 'type': 'str'},
                'type': {'key': 'type', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(CheckSkuAvailabilityParameter, self).__init__(**kwargs)
                    self.skus = kwargs.get('skus', None)
                    self.kind = kwargs.get('kind', None)
                    self.type = kwargs.get('type', None)
            from msrest.serialization import nextNode


        class CheckSkuAvailabilityResult(nextNode):
        """Check SKU availability result.

                    :param kind: The Kind of the resource. Possible values
                 include: 'Bing.Autosuggest.v7', 'Bing.CustomSearch',
                 'Bing.Search.v7', 'Bing.Speech', 'Bing.SpellCheck.v7',
                 'ComputerVision', 'ContentModerator', 'CustomSpeech',
                 'CustomVision.Prediction', 'CustomVision.Training', 'Emotion',
                 'Face', 'LUIS', 'QnAMaker', 'SpeakerRecognition',
                 'SpeechTranslation', 'TextAnalytics', 'TextTranslation',
                 'WebLM'
                    :type kind: str or ~cognitiveservices.models.Kind
                :param type: The Type of the resource.
                    :type type: str
                :param sku_name: The SKU of Cognitive Services account.
                 Possible values include: 'F0', 'P0', 'P1', 'P2', 'S0', 'S1',
                 'S2', 'S3', 'S4', 'S5', 'S6'
                    :type sku_name: str or ~cognitiveservices.models.SkuName
                :param sku_available: Indicates the given SKU is available or
                 not.
                    :type sku_available: bool
                :param reason: Reason why the SKU is not available.
                    :type reason: str
                :param message: Additional error message.
                    :type message: str
        """

            _attribute_map = {
                'kind': {'key': 'kind', 'type': 'str'},
                'type': {'key': 'type', 'type': 'str'},
                'sku_name': {'key': 'skuName', 'type': 'str'},
                'sku_available': {'key': 'skuAvailable', 'type': 'bool'},
                'reason': {'key': 'reason', 'type': 'str'},
                'message': {'key': 'message', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(CheckSkuAvailabilityResult, self).__init__(**kwargs)
                    self.kind = kwargs.get('kind', None)
                    self.type = kwargs.get('type', None)
                    self.sku_name = kwargs.get('sku_name', None)
                    self.sku_available = kwargs.get('sku_available', None)
                    self.reason = kwargs.get('reason', None)
                    self.message = kwargs.get('message', None)
            from msrest.serialization import nextNode


        class CheckSkuAvailabilityResultList(nextNode):
        """Check SKU availability result list.

                    :param value: Check SKU availability result list.
                    :type value:
                     list[~cognitiveservices.models.CheckSkuAvailabilityResult]
        """

            _attribute_map = {
                'value': {'key': 'value', 'type': '[CheckSkuAvailabilityResult]'},
        }

                def __init__(self, **kwargs):
                super(CheckSkuAvailabilityResultList, self).__init__(**kwargs)
                    self.value = kwargs.get('value', None)
            from msrest.serialization import nextNode


        class CognitiveServicesAccount(nextNode):
        """Cognitive Services Account is an Azure resource representing the
        provisioned account, its type, location and SKU.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :param etag: Entity Tag
                    :type etag: str
                :ivar id: The id of the created account
                    :vartype id: str
                :param kind: Type of cognitive service account.
                    :type kind: str
                :param location: The location of the resource
                    :type location: str
                :ivar name: The name of the created account
                    :vartype name: str
                :ivar provisioning_state: Gets the status of the cognitive
                 services account at the time the operation was called.
                 Possible values include: 'Creating', 'ResolvingDNS', 'Moving',
                 'Deleting', 'Succeeded', 'Failed'
                    :vartype provisioning_state: str or
                     ~cognitiveservices.models.ProvisioningState
                :param endpoint: Endpoint of the created account.
                    :type endpoint: str
                :param internal_id: The internal identifier.
                    :type internal_id: str
                :param sku: The SKU of Cognitive Services account.
                    :type sku: ~cognitiveservices.models.Sku
                :param tags: Gets or sets a list of key value pairs that
                 describe the resource. These tags can be used in viewing and
                 grouping this resource (across resource groups). A maximum of
                 15 tags can be provided for a resource. Each tag must have a
                 key no greater than 128 characters and value no greater than
                 256 characters.
                    :type tags: dict[str, str]
                :ivar type: Resource type
                    :vartype type: str
        """

            _validation = {
                'id': {'readonly': True},
                'name': {'readonly': True},
                'provisioning_state': {'readonly': True},
                'type': {'readonly': True},
            }

            _attribute_map = {
                'etag': {'key': 'etag', 'type': 'str'},
                'id': {'key': 'id', 'type': 'str'},
                'kind': {'key': 'kind', 'type': 'str'},
                'location': {'key': 'location', 'type': 'str'},
                'name': {'key': 'name', 'type': 'str'},
                'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
                'endpoint': {'key': 'properties.endpoint', 'type': 'str'},
                'internal_id': {'key': 'properties.internalId', 'type': 'str'},
                'sku': {'key': 'sku', 'type': 'Sku'},
                'tags': {'key': 'tags', 'type': '{str}'},
                'type': {'key': 'type', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(CognitiveServicesAccount, self).__init__(**kwargs)
                    self.etag = kwargs.get('etag', None)
                    self.id = None
                    self.kind = kwargs.get('kind', None)
                    self.location = kwargs.get('location', None)
                    self.name = None
                    self.provisioning_state = None
                    self.endpoint = kwargs.get('endpoint', None)
                    self.internal_id = kwargs.get('internal_id', None)
                    self.sku = kwargs.get('sku', None)
                    self.tags = kwargs.get('tags', None)
                    self.type = None
            from msrest.serialization import nextNode


        class CognitiveServicesAccountCreateParameters(nextNode):
        """The parameters to provide for the account.

                All required parameters must be populated in order to send to
            Azure.

                    :param sku: Required. Required. Gets or sets the SKU of the
                 resource.
                    :type sku: ~cognitiveservices.models.Sku
                :param kind: Required. Required. Gets or sets the Kind of the
                 resource. Possible values include: 'Bing.Autosuggest.v7',
                 'Bing.CustomSearch', 'Bing.Search.v7', 'Bing.Speech',
                 'Bing.SpellCheck.v7', 'ComputerVision', 'ContentModerator',
                 'CustomSpeech', 'CustomVision.Prediction',
                 'CustomVision.Training', 'Emotion', 'Face', 'LUIS',
                 'QnAMaker', 'SpeakerRecognition', 'SpeechTranslation',
                 'TextAnalytics', 'TextTranslation', 'WebLM'
                    :type kind: str or ~cognitiveservices.models.Kind
                :param location: Required. Required. Gets or sets the location
                 of the resource. This will be one of the supported and
                 registered Azure Geo Regions (e.g. West US, East US, Southeast
                 Asia, etc.). The geo region of a resource cannot be changed
                 once it is created, but if an identical geo region is
                 specified on update the request will succeed.
                    :type location: str
                :param tags: Gets or sets a list of key value pairs that
                 describe the resource. These tags can be used in viewing and
                 grouping this resource (across resource groups). A maximum of
                 15 tags can be provided for a resource. Each tag must have a
                 key no greater than 128 characters and value no greater than
                 256 characters.
                    :type tags: dict[str, str]
                :param properties: Required. Must exist in the request. Must
                 be an empty object. Must not be null.
                    :type properties: object
        """

            _validation = {
                'sku': {'required': True},
                'kind': {'required': True},
                'location': {'required': True},
                'properties': {'required': True},
            }

            _attribute_map = {
                'sku': {'key': 'sku', 'type': 'Sku'},
                'kind': {'key': 'kind', 'type': 'str'},
                'location': {'key': 'location', 'type': 'str'},
                'tags': {'key': 'tags', 'type': '{str}'},
                'properties': {'key': 'properties', 'type': 'object'},
        }

                def __init__(self, **kwargs):
                super(CognitiveServicesAccountCreateParameters, self).__init__(**kwargs)
                    self.sku = kwargs.get('sku', None)
                    self.kind = kwargs.get('kind', None)
                    self.location = kwargs.get('location', None)
                    self.tags = kwargs.get('tags', None)
                    self.properties = kwargs.get('properties', None)
            from msrest.serialization import nextNode


        class CognitiveServicesAccountEnumerateSkusResult(nextNode):
        """The list of cognitive services accounts operation response.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :ivar value: Gets the list of Cognitive Services accounts and
                 their properties.
                    :vartype value:
                     list[~cognitiveservices.models.CognitiveServicesResourceAndSku]
        """

            _validation = {
                'value': {'readonly': True},
            }

            _attribute_map = {
                'value': {'key': 'value', 'type': '[CognitiveServicesResourceAndSku]'},
        }

                def __init__(self, **kwargs):
                super(CognitiveServicesAccountEnumerateSkusResult, self).__init__(**kwargs)
                    self.value = None
            from msrest.serialization import nextNode


        class CognitiveServicesAccountKeys(nextNode):
        """The access keys for the cognitive services account.

                    :param key1: Gets the value of key 1.
                    :type key1: str
                :param key2: Gets the value of key 2.
                    :type key2: str
        """

            _attribute_map = {
                'key1': {'key': 'key1', 'type': 'str'},
                'key2': {'key': 'key2', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(CognitiveServicesAccountKeys, self).__init__(**kwargs)
                    self.key1 = kwargs.get('key1', None)
                    self.key2 = kwargs.get('key2', None)
            from msrest.serialization import nextNode


        class CognitiveServicesAccountListResult(nextNode):
        """The list of cognitive services accounts operation response.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :param next_link: The link used to get the next page of
                 accounts.
                    :type next_link: str
                :ivar value: Gets the list of Cognitive Services accounts and
                 their properties.
                    :vartype value:
                     list[~cognitiveservices.models.CognitiveServicesAccount]
        """

            _validation = {
                'value': {'readonly': True},
            }

            _attribute_map = {
                'next_link': {'key': 'nextLink', 'type': 'str'},
                'value': {'key': 'value', 'type': '[CognitiveServicesAccount]'},
        }

                def __init__(self, **kwargs):
                super(CognitiveServicesAccountListResult, self).__init__(**kwargs)
                    self.next_link = kwargs.get('next_link', None)
                    self.value = None
            from msrest.serialization import nextNode


        class CognitiveServicesAccountUpdateParameters(nextNode):
        """The parameters to provide for the account.

                    :param sku: Gets or sets the SKU of the resource.
                    :type sku: ~cognitiveservices.models.Sku
                :param tags: Gets or sets a list of key value pairs that
                 describe the resource. These tags can be used in viewing and
                 grouping this resource (across resource groups). A maximum of
                 15 tags can be provided for a resource. Each tag must have a
                 key no greater than 128 characters and value no greater than
                 256 characters.
                    :type tags: dict[str, str]
        """

            _attribute_map = {
                'sku': {'key': 'sku', 'type': 'Sku'},
                'tags': {'key': 'tags', 'type': '{str}'},
        }

                def __init__(self, **kwargs):
                super(CognitiveServicesAccountUpdateParameters, self).__init__(**kwargs)
                    self.sku = kwargs.get('sku', None)
                    self.tags = kwargs.get('tags', None)
            from msrest.serialization import nextNode


        class CognitiveServicesResourceAndSku(nextNode):
        """Cognitive Services resource type and SKU.

                    :param resource_type: Resource Namespace and Type
                    :type resource_type: str
                :param sku: The SKU of Cognitive Services account.
                    :type sku: ~cognitiveservices.models.Sku
        """

            _attribute_map = {
                'resource_type': {'key': 'resourceType', 'type': 'str'},
                'sku': {'key': 'sku', 'type': 'Sku'},
        }

                def __init__(self, **kwargs):
                super(CognitiveServicesResourceAndSku, self).__init__(**kwargs)
                    self.resource_type = kwargs.get('resource_type', None)
                    self.sku = kwargs.get('sku', None)
            from msrest.serialization import nextNode
            from msrest.exceptions import HttpOperationError


        class Error(nextNode):
        """Cognitive Services error object.

                    :param error: The error body.
                    :type error: ~cognitiveservices.models.ErrorBody
        """

            _attribute_map = {
                'error': {'key': 'error', 'type': 'ErrorBody'},
        }

                def __init__(self, **kwargs):
                super(Error, self).__init__(**kwargs)
                    self.error = kwargs.get('error', None)


            class ErrorException(HttpOperationError):
            """Server responsed with exception of type: 'Error'.

            :param deserialize: A deserializer
            :param response: Server response to be deserialized.
            """

        def __init__(self, deserialize, response, *args):

        super(ErrorException, self).__init__(deserialize, response, 'Error', *args)
            from msrest.serialization import nextNode


        class ErrorBody(nextNode):
        """Cognitive Services error body.

                All required parameters must be populated in order to send to
            Azure.

                    :param code: Required. error code
                    :type code: str
                :param message: Required. error message
                    :type message: str
        """

            _validation = {
                'code': {'required': True},
                'message': {'required': True},
            }

            _attribute_map = {
                'code': {'key': 'code', 'type': 'str'},
                'message': {'key': 'message', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(ErrorBody, self).__init__(**kwargs)
                    self.code = kwargs.get('code', None)
                    self.message = kwargs.get('message', None)
            from msrest.serialization import nextNode


        class MetricName(nextNode):
        """A metric name.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :ivar value: The name of the metric.
                    :vartype value: str
                :ivar localized_value: The friendly name of the metric.
                    :vartype localized_value: str
        """

            _validation = {
                'value': {'readonly': True},
                'localized_value': {'readonly': True},
            }

            _attribute_map = {
                'value': {'key': 'value', 'type': 'str'},
                'localized_value': {'key': 'localizedValue', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(MetricName, self).__init__(**kwargs)
                    self.value = None
                    self.localized_value = None
            from msrest.serialization import nextNode


        class OperationDisplayInfo(nextNode):
        """The operation supported by Cognitive Services.

                    :param description: The description of the operation.
                    :type description: str
                :param operation: The action that users can perform, based on
                 their permission level.
                    :type operation: str
                :param provider: Service provider: Microsoft Cognitive
                 Services.
                    :type provider: str
                :param resource: Resource on which the operation is performed.
                    :type resource: str
        """

            _attribute_map = {
                'description': {'key': 'description', 'type': 'str'},
                'operation': {'key': 'operation', 'type': 'str'},
                'provider': {'key': 'provider', 'type': 'str'},
                'resource': {'key': 'resource', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(OperationDisplayInfo, self).__init__(**kwargs)
                    self.description = kwargs.get('description', None)
                    self.operation = kwargs.get('operation', None)
                    self.provider = kwargs.get('provider', None)
                    self.resource = kwargs.get('resource', None)
            from msrest.serialization import nextNode


        class OperationEntity(nextNode):
        """The operation supported by Cognitive Services.

                    :param name: Operation name:
                 {provider}/{resource}/{operation}.
                    :type name: str
                :param display: The operation supported by Cognitive Services.
                    :type display:
                     ~cognitiveservices.models.OperationDisplayInfo
                :param origin: The origin of the operation.
                    :type origin: str
                :param properties: Additional properties.
                    :type properties: object
        """

            _attribute_map = {
                'name': {'key': 'name', 'type': 'str'},
                'display': {'key': 'display', 'type': 'OperationDisplayInfo'},
                'origin': {'key': 'origin', 'type': 'str'},
                'properties': {'key': 'properties', 'type': 'object'},
        }

                def __init__(self, **kwargs):
                super(OperationEntity, self).__init__(**kwargs)
                    self.name = kwargs.get('name', None)
                    self.display = kwargs.get('display', None)
                    self.origin = kwargs.get('origin', None)
                    self.properties = kwargs.get('properties', None)
            from msrest.serialization import nextNode


        class OperationEntityListResult(nextNode):
        """The list of cognitive services accounts operation response.

                    :param next_link: The link used to get the next page of
                 operations.
                    :type next_link: str
                :param value: The list of operations.
                    :type value:
                     list[~cognitiveservices.models.OperationEntity]
        """

            _attribute_map = {
                'next_link': {'key': 'nextLink', 'type': 'str'},
                'value': {'key': 'value', 'type': '[OperationEntity]'},
        }

                def __init__(self, **kwargs):
                super(OperationEntityListResult, self).__init__(**kwargs)
                    self.next_link = kwargs.get('next_link', None)
                    self.value = kwargs.get('value', None)
            from msrest.serialization import nextNode


        class RegenerateKeyParameters(nextNode):
        """Regenerate key parameters.

                All required parameters must be populated in order to send to
            Azure.

                    :param key_name: Required. key name to generate (Key1|Key2).
                 Possible values include: 'Key1', 'Key2'
                    :type key_name: str or ~cognitiveservices.models.KeyName
        """

            _validation = {
                'key_name': {'required': True},
            }

            _attribute_map = {
                'key_name': {'key': 'keyName', 'type': 'KeyName'},
        }

                def __init__(self, **kwargs):
                super(RegenerateKeyParameters, self).__init__(**kwargs)
                    self.key_name = kwargs.get('key_name', None)
            from msrest.serialization import nextNode


        class ResourceSku(nextNode):
        """Describes an available Cognitive Services SKU.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :ivar resource_type: The type of resource the SKU applies to.
                    :vartype resource_type: str
                :ivar name: The name of SKU.
                    :vartype name: str
                :ivar tier: Specifies the tier of Cognitive Services account.
                    :vartype tier: str
                :ivar kind: The Kind of resources that are supported in this
                 SKU.
                    :vartype kind: str
                :ivar locations: The set of locations that the SKU is
                 available.
                    :vartype locations: list[str]
                :ivar restrictions: The restrictions because of which SKU
                 cannot be used. This is empty if there are no restrictions.
                    :vartype restrictions:
                     list[~cognitiveservices.models.ResourceSkuRestrictions]
        """

            _validation = {
                'resource_type': {'readonly': True},
                'name': {'readonly': True},
                'tier': {'readonly': True},
                'kind': {'readonly': True},
                'locations': {'readonly': True},
                'restrictions': {'readonly': True},
            }

            _attribute_map = {
                'resource_type': {'key': 'resourceType', 'type': 'str'},
                'name': {'key': 'name', 'type': 'str'},
                'tier': {'key': 'tier', 'type': 'str'},
                'kind': {'key': 'kind', 'type': 'str'},
                'locations': {'key': 'locations', 'type': '[str]'},
                'restrictions': {'key': 'restrictions', 'type': '[ResourceSkuRestrictions]'},
        }

                def __init__(self, **kwargs):
                super(ResourceSku, self).__init__(**kwargs)
                    self.resource_type = None
                    self.name = None
                    self.tier = None
                    self.kind = None
                    self.locations = None
                    self.restrictions = None
            from msrest.serialization import nextNode


        class ResourceSkuRestrictionInfo(nextNode):
        """ResourceSkuRestrictionInfo.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :ivar locations: Locations where the SKU is restricted
                    :vartype locations: list[str]
                :ivar zones: List of availability zones where the SKU is
                 restricted.
                    :vartype zones: list[str]
        """

            _validation = {
                'locations': {'readonly': True},
                'zones': {'readonly': True},
            }

            _attribute_map = {
                'locations': {'key': 'locations', 'type': '[str]'},
                'zones': {'key': 'zones', 'type': '[str]'},
        }

                def __init__(self, **kwargs):
                super(ResourceSkuRestrictionInfo, self).__init__(**kwargs)
                    self.locations = None
                    self.zones = None
            from msrest.serialization import nextNode


        class ResourceSkuRestrictions(nextNode):
        """Describes restrictions of a SKU.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :ivar type: The type of restrictions. Possible values include:
                 'Location', 'Zone'
                    :vartype type: str or
                     ~cognitiveservices.models.ResourceSkuRestrictionsType
                :ivar values: The value of restrictions. If the restriction
                 type is set to location. This would be different locations
                 where the SKU is restricted.
                    :vartype values: list[str]
                :ivar restriction_info: The information about the restriction
                 where the SKU cannot be used.
                    :vartype restriction_info:
                     ~cognitiveservices.models.ResourceSkuRestrictionInfo
                :ivar reason_code: The reason for restriction. Possible values
                 include: 'QuotaId', 'NotAvailableForSubscription'
                    :vartype reason_code: str or
                     ~cognitiveservices.models.ResourceSkuRestrictionsReasonCode
        """

            _validation = {
                'type': {'readonly': True},
                'values': {'readonly': True},
                'restriction_info': {'readonly': True},
                'reason_code': {'readonly': True},
            }

            _attribute_map = {
                'type': {'key': 'type', 'type': 'ResourceSkuRestrictionsType'},
                'values': {'key': 'values', 'type': '[str]'},
                'restriction_info': {'key': 'restrictionInfo', 'type': 'ResourceSkuRestrictionInfo'},
                'reason_code': {'key': 'reasonCode', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(ResourceSkuRestrictions, self).__init__(**kwargs)
                    self.type = None
                    self.values = None
                    self.restriction_info = None
                    self.reason_code = None
            from msrest.serialization import nextNode


        class ResourceSkusResult(nextNode):
        """The Get Skus operation response.

                All required parameters must be populated in order to send to
            Azure.

                    :param value: Required. The list of skus available for the
                 subscription.
                    :type value: list[~cognitiveservices.models.ResourceSku]
                :param next_link: The uri to fetch the next page of Skus.
                    :type next_link: str
        """

            _validation = {
                'value': {'required': True},
            }

            _attribute_map = {
                'value': {'key': 'value', 'type': '[ResourceSku]'},
                'next_link': {'key': 'nextLink', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(ResourceSkusResult, self).__init__(**kwargs)
                    self.value = kwargs.get('value', None)
                    self.next_link = kwargs.get('next_link', None)
            from msrest.serialization import nextNode


        class Sku(nextNode):
        """The SKU of the cognitive services account.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                All required parameters must be populated in order to send to
            Azure.

                    :param name: Required. Gets or sets the sku name. Required for
                 account creation, optional for update. Possible values
                 include: 'F0', 'P0', 'P1', 'P2', 'S0', 'S1', 'S2', 'S3', 'S4',
                 'S5', 'S6'
                    :type name: str or ~cognitiveservices.models.SkuName
                :ivar tier: Gets the sku tier. This is based on the SKU name.
                 Possible values include: 'Free', 'Standard', 'Premium'
                    :vartype tier: str or ~cognitiveservices.models.SkuTier
        """

            _validation = {
                'name': {'required': True},
                'tier': {'readonly': True},
            }

            _attribute_map = {
                'name': {'key': 'name', 'type': 'str'},
                'tier': {'key': 'tier', 'type': 'SkuTier'},
        }

                def __init__(self, **kwargs):
                super(Sku, self).__init__(**kwargs)
                    self.name = kwargs.get('name', None)
                    self.tier = None
            from msrest.serialization import nextNode


        class Usage(nextNode):
        """The usage data for a usage request.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :param unit: The unit of the metric. Possible values include:
                 'Count', 'Bytes', 'Seconds', 'Percent', 'CountPerSecond',
                 'BytesPerSecond', 'Milliseconds'
                    :type unit: str or ~cognitiveservices.models.UnitType
                :ivar name: The name information for the metric.
                    :vartype name: ~cognitiveservices.models.MetricName
                :ivar quota_period: The quota period used to summarize the
                 usage values.
                    :vartype quota_period: str
                :ivar limit: Maximum value for this metric.
                    :vartype limit: float
                :ivar current_value: Current value for this metric.
                    :vartype current_value: float
                :ivar next_reset_time: Next reset time for current quota.
                    :vartype next_reset_time: str
                :param status: Cognitive Services account quota usage status.
                 Possible values include: 'Included', 'Blocked', 'InOverage',
                 'Unknown'
                    :type status: str or
                     ~cognitiveservices.models.QuotaUsageStatus
        """

            _validation = {
                'name': {'readonly': True},
                'quota_period': {'readonly': True},
                'limit': {'readonly': True},
                'current_value': {'readonly': True},
                'next_reset_time': {'readonly': True},
            }

            _attribute_map = {
                'unit': {'key': 'unit', 'type': 'str'},
                'name': {'key': 'name', 'type': 'MetricName'},
                'quota_period': {'key': 'quotaPeriod', 'type': 'str'},
                'limit': {'key': 'limit', 'type': 'float'},
                'current_value': {'key': 'currentValue', 'type': 'float'},
                'next_reset_time': {'key': 'nextResetTime', 'type': 'str'},
                'status': {'key': 'status', 'type': 'str'},
        }

                def __init__(self, **kwargs):
                super(Usage, self).__init__(**kwargs)
                    self.unit = kwargs.get('unit', None)
                    self.name = None
                    self.quota_period = None
                    self.limit = None
                    self.current_value = None
                    self.next_reset_time = None
                    self.status = kwargs.get('status', None)
            from msrest.serialization import nextNode


        class UsagesResult(nextNode):
        """The response to a list usage request.

                Variables are only populated by the server, and will be ignored
            when sending a request.

                    :ivar value: The list of usages for Cognitive Service account.
                    :vartype value: list[~cognitiveservices.models.Usage]
        """

            _validation = {
                'value': {'readonly': True},
            }

            _attribute_map = {
                'value': {'key': 'value', 'type': '[Usage]'},
        }

                def __init__(self, **kwargs):
                super(UsagesResult, self).__init__(**kwargs)
                    self.value = None
