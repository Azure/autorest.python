{% import 'keywords.jinja2' as keywords with context %}
{{ code_model.options['license_header'] }}

{{ imports }}

{% if code_model.need_request_converter and not async_mode %}
def _convert_request(request, files=None):
    data = request.content if not files else None
    request = HttpRequest(method=request.method, url=request.url, headers=request.headers, data=data)
    if files:
        request.set_formdata_body(files)
    return request
{% endif %}
{% if code_model.need_format_url and not async_mode %}

def _format_url_section(template, **kwargs):
    components = template.split("/")
    while components:
        try:
            return template.format(**kwargs)
        except KeyError as key:
            formatted_components = template.split("/")
            components = [
                c for c in formatted_components if "{{{}}}".format(key.args[0]) not in c
            ]
            template = "/".join(components)
{% endif %}
{% if code_model.need_mixin_abc %}

class MixinABC(ABC):
    """DO NOT use this class. It is for internal typing use only."""
    _client: "{{ keywords.async_class }}PipelineClient"
    _config: {{ code_model.client.name }}Configuration
    _serialize: "Serializer"
    _deserialize: "Deserializer"
{% endif %}
{% if code_model.has_abstract_operations %}

def raise_if_not_implemented(cls, abstract_methods):
    not_implemented = [f for f in abstract_methods if not callable(getattr(cls, f, None))]
    if not_implemented:
        raise NotImplementedError("The following methods on operation group '{}' are not implemented: '{}'."
        " Please refer to https://aka.ms/azsdk/python/dpcodegen/python/customize to learn how to customize.".format(
        cls.__name__, '\', \''.join(not_implemented))
        )
{% endif %}
