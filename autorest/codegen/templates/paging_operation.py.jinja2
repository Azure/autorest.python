{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{% set request_as_xml = ", is_xml=False" if "xml" in operation.request_content_type else "" %}
{% macro method_signature() %}
{% if async_mode %}
def {{ operation.python_name }}(
    self,
    {% for param_signature in operation.parameters.async_method_signature %}
    {{ param_signature }},
    {% endfor %}
    {% if operation.parameters.method | first %}
    *,
    {% endif %}
    cls: ClsType[{{ keywords.return_type_annotation(operation) }}] = None,
    **kwargs
){{ keywords.async_return_type_annotation(operation) }}:
{% else %}
def {{ operation.python_name }}(
    self,
    {% for param_signature in operation.parameters.sync_method_signature %}
    {{ param_signature }}
    {% endfor %}
    cls=None,  # type: ClsType[{{ keywords.return_type_annotation(operation) }}]
    **kwargs  # type: Any
):
{% endif %}{% endmacro %}
{% macro return_docstring() %}
{% if operation.responses | selectattr('has_body') | first %}
:return: {{ operation.responses|map(attribute='schema')|map(attribute='docstring_text')|join(' or ') }} or the result of cls(response)
    :rtype: {% for response in operation.responses %}{{response.schema.docstring_type if response.has_body else "None"}}{% if not loop.last %} or {% endif %}{% endfor %}
{% else %}
:return: None
:rtype: None
{% endif %}
{% endmacro %}
{% macro param_documentation_string(parameter) %}:param {{ parameter.serialized_name }}: {{ parameter.description }}{% endmacro %}
{% macro exception_name() %}{{ operation.default_exception.schema.name }}Exception{% endmacro %}
{% set core_excep_name = 'ARMError' if code_model.options['azure_arm'] else 'HttpResponseError' %}
{% set next_link_str = "deserialized." + operation.next_link_name if operation.next_link_name else "None" %}
{# actual template starts here #}
{% if code_model.options['tracing'] and operation.want_tracing %}
@distributed_trace
{% else %}

{% endif %}
{{ method_signature() }}
{%- if not async_mode %}
    {{ keywords.sync_return_type_annotation(operation) }}
{% endif %}
{% if operation.want_description_docstring %}
    """{{operation.description }}
    {% if operation.summary %}

    {{ operation.summary | wordwrap(width=95, break_long_words=False, wrapstring='\n    ') }}
    {% endif %}

{% if operation.deprecated -%}
    .. warning::
       This method is deprecated

{% endif -%}
{% for parameter in operation.parameters.method %}
    {%- for doc_string in param_documentation_string(parameter).replace('\n', '\n ').split('\n') %}
    {{ doc_string | wordwrap(width=95, break_long_words=False, wrapstring='\n     ')}}
    {% endfor %}
    :type {{ parameter.serialized_name }}: {{ parameter.schema.docstring_type }}
{% endfor %}
    :param callable cls: A custom type or function that will be passed the direct response
    {{ return_docstring() }}
    {% if not operation.default_exception %}
        {% if code_model.options['azure_arm'] %}
    :raises: ~azure.mgmt.core.ARMError
        {% else %}
    :raises: ~azure.core.HttpResponseError
        {% endif %}
    {% else %}
    :raises: ~{{ code_model.namespace }}.models.{{ exception_name() }}:
    {% endif %}
    """
{% endif %}
{% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
{% endif %}
{%if operation.status_code_exceptions %}
    error_map = {
    {% for excep in operation.status_code_exceptions %}
        {% for status_code in excep.status_codes %}
            {% if excep.schema.is_exception %}
        {{ status_code }}: lambda response: models.{{ excep.schema.serialization_type }}Exception.from_response(response, self._deserialize),
            {% else  %}
        {{ status_code }}: {{ core_excep_name }},
            {% endif %}
        {% endfor %}
    {% endfor %}
    }
    error_map.update(kwargs.pop('error_map', {}))
{% else %}
    error_map = kwargs.pop('error_map', {})
{% endif %}
{% if operation.parameters.grouped %}
    {{ op_tools.grouped_parameters(operation)|indent }}
{% endif %}
{% if operation.parameters.is_flattened %}
    {{ operation.parameters.build_flattened_object() }}
{% endif %}
{% if operation.parameters.constant|selectattr("implementation", "equalto", "Method") %}
    {% for constant_parameter in operation.parameters.constant|selectattr("implementation", "equalto", "Method") %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.schema.get_constant_value() }}
    {% endfor %}
{% endif %}

    def prepare_request(next_link=None):
        if not next_link:
            # Construct URL
            url = self.{{ operation.python_name }}.metadata['url']
        {% if operation.parameters.path %}
            path_format_arguments = {
        {% for path_parameter in operation.parameters.path %}
                '{{ path_parameter.rest_api_name }}': {{ operation.build_serialize_data_call(path_parameter, "url") }},
        {% endfor %}
            }
            url = self._client.format_url(url, **path_format_arguments)
        {% endif %}
        else:
{% if operation.next_operation %}
            url = '{{ operation.next_operation.url }}'
        {% if operation.next_operation.parameters.path %}
            path_format_arguments = {
        {% for path_parameter in operation.next_operation.parameters.path %}
                '{{ path_parameter.rest_api_name }}': {{ operation.next_operation.build_serialize_data_call(path_parameter, "url") }},
        {% endfor %}
            }
            url = self._client.format_url(url, **path_format_arguments)
        {% endif %}
{% else %}
            url = next_link
        {% if operation.parameters.path and not code_model.base_url%}
            path_format_arguments = {
        {% for path_parameter in operation.parameters.path %}
                '{{ path_parameter.rest_api_name }}': {{ operation.build_serialize_data_call(path_parameter, "url") }},
        {% endfor %}
            }
            url = self._client.format_url(url, **path_format_arguments)
        {% endif %}
{% endif %}

        {{ op_tools.query_parameters(operation, async_mode)|indent(8) }}

        {{ op_tools.header_parameters(code_model, operation, async_mode)|indent(8) }}

    {% if operation.parameters.has_body %}
        # Construct body
        {% if not operation.parameters.body.is_stream %}
            {% if operation.parameters.body.required %}
        body_content = self._serialize.body({{ operation.parameters.body.serialized_name }}, '{{ operation.parameters.body.schema.serialization_type }}'{{ request_as_xml }}{{ operation.serialization_context }})
            {% else %}
        if {{ operation.parameters.body.serialized_name }} is not None:
            body_content = self._serialize.body({{ operation.parameters.body.serialized_name }}, '{{ operation.parameters.body.schema.serialization_type }}'{{ request_as_xml }}{{ operation.serialization_context }})
        else:
            body_content = None
            {% endif %}
        {% elif operation.parameters.body.is_form_data %}
        # Construct form data
        form_data_content = {
        ###foreach (var parameter in Model.LocalParameters)
        ###    if (parameter.Location == ParameterLocation.FormData)
        ###    {
        ###            @:'@parameter.SerializedName': @parameter.Name,
        ###    }
        ###}
        }
        {% endif %}

    {% endif %}
        # Construct and send request
    {% if operation.is_form_data %}
        request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, form_content=form_data_content)
    {% elif operation.is_stream_request %}
        request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, stream_content={{ parameter.serialized_name }})
    {% elif operation.parameters.has_body %}
        request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, body_content)
    {% else %}
        request = self._client.{{ operation.method }}(url, query_parameters, header_parameters)
    {% endif %}
        return request

    {{ keywords.def }} extract_data(pipeline_response):
        {% set response = operation.responses[0] %}
        deserialized = self._deserialize('{{ response.schema.serialization_type }}', pipeline_response)
        list_of_elem = deserialized.{{ operation.item_name }}
        if cls:
            list_of_elem = cls(list_of_elem)
        {% if async_mode %}
        return {{ next_link_str }}, AsyncList(list_of_elem)
        {% else %}
        return {{ next_link_str }}, iter(list_of_elem)
        {% endif %}

    {{ keywords.def }} get_next(next_link=None):
        request = prepare_request(next_link)

        pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in {{ operation.success_status_code|string() }}:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            {% if not operation.default_exception %}
            raise {{ core_excep_name }}(response=response)
            {% else %}
            raise models.{{ exception_name() }}.from_response(response, self._deserialize)
            {% endif %}

        return pipeline_response

{% if async_mode %}
    return AsyncItemPaged(
{% else %}
    return ItemPaged(
{% endif %}
        get_next, extract_data
    )
{{ operation.python_name }}.metadata = {'url': '{{ operation.url|replace("'", "\\'") }}'}
