{% import 'operation_tools.jinja2' as op_tools %}
{% import 'paging_operation_helper.jinja2' as helper %}
{% set send_xml = "xml" if preparer.parameters.has_body and "xml" in preparer.content_type  %}
{% set request_as_xml = ", is_xml=True" if send_xml else "" %}
{% set preparer = operation.preparer %}
{% macro return_docstring(async_mode) %}
{% if operation.responses | selectattr('has_body') | first %}
:return: An iterator like instance of either {{ operation.responses|selectattr('has_body')|map(attribute='docstring_text')|unique|join(' or ') }} or the result of cls(response)
:rtype: ~{{ operation.get_pager_path(async_mode) }}[{% for response in operation.responses %}{{response.docstring_type if response.has_body else "None"}}{% if not loop.last -%} or {% endif %}{% endfor %}]
{%- else -%}
:return: None
:rtype: None{%- endif -%}{%- endmacro -%}
{% macro operation_docstring(async_mode) %}
"""{{ operation.summary if operation.summary else operation.description | wordwrap(width=95, break_long_words=False, wrapstring='\n') }}
{% if operation.summary and operation.description %}

{{ operation.description | wordwrap(width=95, break_long_words=False, wrapstring='\n') }}
{% endif %}

{% if operation.deprecated -%}
.. warning::
    This method is deprecated

{% endif -%}
{% for parameter in operation.parameters.method %}
{%- for doc_string in param_documentation_string(parameter).replace('\n', '\n ').split('\n') %}
{{ doc_string | wordwrap(width=95, break_long_words=False, wrapstring='\n ')}}
{% endfor %}
:type {{ parameter.serialized_name }}: {{ parameter.docstring_type }}
{% endfor %}
{% if (preparer.schema_requests | length) > 1 %}
{{ op_tools.content_type_docstring(operation) }}
{% endif %}
:keyword callable cls: A custom type or function that will be passed the direct response
{{ return_docstring(async_mode) }}
:raises: ~azure.core.exceptions.HttpResponseError
"""{% endmacro %}
{% macro param_documentation_string(parameter) %}:param {{ parameter.serialized_name }}: {{ parameter.description }}{% endmacro %}
{# actual template starts here #}
{% if code_model.options['tracing'] and operation.want_tracing %}
@distributed_trace
{% endif %}
{% set return_type_wrapper = ["AsyncIterable" if async_mode else "Iterable"] %}
{{ op_tools.operation_method_signature(operation, async_mode=async_mode, coroutine=False, return_type_wrapper=return_type_wrapper) }}
{%- if not async_mode %}
    {{ op_tools.sync_return_type_annotation(operation, return_type_wrapper) }}
{% endif %}
{% if operation.want_description_docstring %}
    {{ operation_docstring(async_mode) | indent }}
{% endif %}
{% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
{% endif %}
    {{ helper.paging_operation(code_model, operation, async_mode) }}

    return {{ operation.get_pager(async_mode) }}(
        get_next, extract_data
    )
{{ operation.python_name }}.metadata = {'url': '{{ preparer.url|replace("'", "\\'") }}'}  # type: ignore