{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{% set send_xml = "xml" if operation.parameters.has_body and "xml" in operation.request_content_type  %}
{% set request_as_xml = ", is_xml=True" if send_xml else "" %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{% set item_paged = "AsyncItemPaged" if async_mode else "ItemPaged" %}
{% macro return_docstring() %}
{% if operation.responses | selectattr('has_body') | first %}
:return: An iterator like instance of {{ operation.responses|selectattr('has_body')|map(attribute='schema')|map(attribute='docstring_text')|unique|join(' or ') }} or the result of cls(response)
:rtype: ~azure.core.{{ "async_" if async_mode else "" }}paging.{{ item_paged }}[{% for response in operation.responses %}{{response.schema.docstring_type if response.has_body else "None"}}{% if not loop.last -%} or {% endif %}{% endfor %}]
{% else %}
:return: None
:rtype: None{% endif %}{% endmacro %}
{% macro param_documentation_string(parameter) %}:param {{ parameter.serialized_name }}: {{ parameter.description }}{% endmacro %}
{% set next_link_str = "deserialized." + operation.next_link_name + " or None" if operation.next_link_name else "None" %}
{# actual template starts here #}
{% if code_model.options['tracing'] and operation.want_tracing %}
@distributed_trace
{% endif %}
{% set return_type_wrapper = "AsyncIterable" if async_mode else "Iterable" %}
{{ op_tools.method_signature(operation, operation.python_name, async_mode=async_mode, coroutine=False, return_type_wrapper=return_type_wrapper) }}
{%- if not async_mode %}
    {{ op_tools.sync_return_type_annotation(operation, return_type_wrapper) }}
{% endif %}
{% if operation.want_description_docstring %}
    """{{operation.description }}
    {% if operation.summary %}

    {{ operation.summary | wordwrap(width=95, break_long_words=False, wrapstring='\n') }}
    {% endif %}

{% if operation.deprecated -%}
    .. warning::
       This method is deprecated

{% endif -%}
{% for parameter in operation.parameters.method %}
    {%- for doc_string in param_documentation_string(parameter).replace('\n', '\n ').split('\n') %}
    {{ doc_string | wordwrap(width=95, break_long_words=False, wrapstring='\n ')}}
    {% endfor %}
    :type {{ parameter.serialized_name }}: {{ parameter.schema.docstring_type }}
{% endfor %}
    :keyword callable cls: A custom type or function that will be passed the direct response
    {{ return_docstring()|indent }}    :raises: ~azure.core.exceptions.HttpResponseError
    """
{% endif %}
{% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
{% endif %}
    cls = kwargs.pop('cls', None)  # type: ClsType[{{ op_tools.return_type_annotation(operation) }}]
    {{ op_tools.error_map(operation, code_model)|indent }}
{% if operation.parameters.grouped %}
    {{ op_tools.grouped_parameters(operation)|indent }}
{%- endif -%}
{% if operation.parameters.is_flattened %}
    {{ operation.parameters.build_flattened_object() }}
{% endif %}
{% if operation.parameters.constant|selectattr("implementation", "equalto", "Method") %}
    {% for constant_parameter in operation.parameters.constant|selectattr("implementation", "equalto", "Method") %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.schema.constant_value }}
    {% endfor %}
{% endif %}

    def prepare_request(next_link=None):
        if not next_link:
            # Construct URL
            url = self.{{ operation.python_name }}.metadata['url']  # type: ignore
        {% if operation.parameters.path %}
            path_format_arguments = {
        {% for path_parameter in operation.parameters.path %}
                '{{ path_parameter.rest_api_name }}': {{ operation.build_serialize_data_call(path_parameter, "url") }},
        {% endfor %}
            }
            url = self._client.format_url(url, **path_format_arguments)
        {% endif %}
            {{ op_tools.query_parameters(operation, async_mode)|indent(12) }}
        else:
{% if operation.next_operation %}
            url = '{{ operation.next_operation.url }}'
        {% if operation.next_operation.parameters.path %}
            path_format_arguments = {
        {% for path_parameter in operation.next_operation.parameters.path %}
                '{{ path_parameter.rest_api_name }}': {{ operation.next_operation.build_serialize_data_call(path_parameter, "url") }},
        {% endfor %}
            }
            url = self._client.format_url(url, **path_format_arguments)
        {% endif %}
            {{ op_tools.query_parameters(operation.next_operation, async_mode)|indent(12) }}
{% else %}
            url = next_link
            query_parameters = {}  # type: Dict[str, Any]
        {% if operation.parameters.path and not code_model.base_url%}
            path_format_arguments = {
        {% for path_parameter in operation.parameters.path %}
                '{{ path_parameter.rest_api_name }}': {{ operation.build_serialize_data_call(path_parameter, "url") }},
        {% endfor %}
            }
            url = self._client.format_url(url, **path_format_arguments)
        {% endif %}
{% endif %}
        {{ op_tools.header_parameters(code_model, operation, async_mode)|indent(8) }}
        {{ op_tools.body_parameters(operation)|indent(8) }}
        return request

    {{ keywords.def }} extract_data(pipeline_response):
        {% set response = operation.responses[0] %}
        deserialized = self._deserialize('{{ response.schema.serialization_type }}', pipeline_response)
        list_of_elem = deserialized.{{ operation.item_name }}
        if cls:
            list_of_elem = cls(list_of_elem)
        {% if async_mode %}
        return {{ next_link_str }}, AsyncList(list_of_elem)
        {% else %}
        return {{ next_link_str }}, iter(list_of_elem)
        {% endif %}

    {{ keywords.def }} get_next(next_link=None):
        request = prepare_request(next_link)

        pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in {{ operation.success_status_code|string() }}:
            {% if operation.default_exception %}
            error = self._deserialize({{ operation.default_exception }}, response)
            {% endif %}
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response{{ ", model=error" if operation.default_exception else "" }}{{ ", error_format=ARMErrorFormat" if code_model.options['azure_arm'] else "" }})

        return pipeline_response

    return {{ item_paged }}(
        get_next, extract_data
    )
{{ operation.python_name }}.metadata = {'url': '{{ operation.url|replace("'", "\\'") }}'}  # type: ignore