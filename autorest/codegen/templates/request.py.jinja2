{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{{ op_tools.request_method_signature(request, is_python_3_file) }}
{%- if not is_python_3_file %}
    {{ op_tools.sync_return_type_annotation(operation, "", return_type="HttpRequest") }}
{% endif %}
{% if request.parameters.constant|selectattr("implementation", "equalto", "Method")|selectattr("original_parameter", "equalto", None)|selectattr("in_method_code") %}
    {% for constant_parameter in request.parameters.constant|selectattr("implementation", "equalto", "Method")|selectattr("original_parameter", "equalto", None)|selectattr("in_method_code") %}
    {% if constant_parameter.serialized_name == "content_type" %}
    content_type = kwargs.pop("content_type", {{ constant_parameter.constant_declaration }})
    {% else %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.constant_declaration }}
    {% endif %}
    {% endfor %}
{% endif %}

    # Construct URL
    url = kwargs.pop("template_url", {{ keywords.escape_str(request.url) }})
{% if request.parameters.path %}
    {{ op_tools.path_format_arguments(request.parameters.path)|indent }}
    {{ op_tools.format_path_format_arguments()|indent }}
{% endif %}

    {{ op_tools.query_parameters(request, is_python_3_file)|indent }}
    {{ op_tools.header_parameters(code_model, request, is_python_3_file)|indent }}
    {{ op_tools.body_parameters(request)|indent }}
