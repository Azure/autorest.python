{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{% set request_as_xml = ", is_xml=False" if "xml" in operation.request_content_type else "" %}
{% macro return_docstring() %}
{% if operation.responses | selectattr('has_body') | first %}
:return: {{ operation.responses|map(attribute='schema')|map(attribute='name')|join(' or ') }} or the result of cls(response)
:rtype: {% for response in operation.responses %}{{response.schema.get_python_type(code_model.namespace) if response.has_body else "None"}}{% if not loop.last %} or {% endif %}{% endfor %}
{% else %}
:return: None or the result of cls(response)
:rtype: None
{%- endif -%}
{% endmacro %}
{% macro exception_name() %}{{ operation.default_exception.schema.name }}Exception{% endmacro %}
{% set core_excep_name = 'ARMError' if code_model.options['azure_arm'] else 'HttpResponseError' %}
{# actual template starts here #}
{% if code_model.options['tracing'] and operation.want_tracing %}
{{ trace_decorator }}
{% else %}

{% endif %}
{{ keywords.def }} {{ operation.python_name }}(self{{ operation.parameters.method_signature }}, cls=None, **kwargs):
{% if operation.want_description_docstring %}
    """{{operation.description.strip() }}.

    FIXME: add operation.summary

{% if operation.deprecated -%}
    .. warning::
       This method is deprecated

{% endif -%}
{% for parameter in operation.parameters.method %}
    :param {{ parameter.serialized_name }}: {{ parameter.description }}
    :type {{ parameter.serialized_name }}: {{ parameter.schema.get_python_type(code_model.namespace) }}
{% endfor %}
    :param callable cls: A custom type or function that will be passed the direct response
    {{ return_docstring()|indent }}
    {% if not operation.default_exception %}
        {% if code_model.options['azure_arm'] %}
    :raises: ~azure.mgmt.core.ARMError
        {% else %}
    :raises: ~azure.core.HttpResponseError
        {% endif %}
    {% else %}
    :raises: ~{{ code_model.namespace }}.models.{{ exception_name() }}:
    {% endif %}
    """
{% endif %}
{% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
{% endif %}
{%if operation.status_code_exceptions %}
    error_map = {
    {% for excep in operation.status_code_exceptions %}
        {% for status_code in excep.status_codes %}
            {% if excep.schema.is_exception %}
        {{ status_code }}: lambda response: models.{{ excep.schema.get_serialization_type() }}Exception.from_response(response, self._deserialize),
            {% else  %}
        {{ status_code }}: {{ core_excep_name }},
            {% endif %}
        {% endfor %}
    {% endfor %}
    }
    error_map.update(kwargs.pop('error_map', {}))
{% else %}
    error_map = kwargs.pop('error_map', {})
{% endif %}
{% if operation.parameters.is_flattened %}
    {{ operation.parameters.build_flattened_object() }}
{% endif %}
{% if operation.parameters.constant %}
    {% for constant_parameter in operation.parameters.constant %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.schema.get_constant_value() }}
    {% endfor %}
{% endif %}

    # Construct URL
    url = self.{{ operation.python_name }}.metadata['url']
{% if operation.parameters.path %}
    path_format_arguments = {
{% for path_parameter in operation.parameters.path %}
        '{{ path_parameter.rest_api_name }}': {{ operation.build_serialize_data_call(path_parameter, "url") }},
{% endfor %}
    }
    url = self._client.format_url(url, **path_format_arguments)
{% endif %}

    {{ op_tools.query_parameters(operation)|indent }}

    {{ op_tools.header_parameters(code_model, operation)|indent }}

{% if operation.parameters.has_body %}
    # Construct body
    {% if not operation.parameters.body.is_stream %}
        {% if operation.parameters.body.is_required %}
    body_content = self._serialize.body({{ operation.parameters.body.serialized_name }}, '{{ operation.parameters.body.schema.get_serialization_type() }}'{{ request_as_xml }}{{ operation.serialization_context }})
        {% else %}
    if {{ operation.parameters.body.serialized_name }} is not None:
        body_content = self._serialize.body({{ operation.parameters.body.serialized_name }}, '{{ operation.parameters.body.schema.get_serialization_type() }}'{{ request_as_xml }}{{ operation.serialization_context }})
    else:
        body_content = None
        {% endif %}
    {% elif operation.parameters.body.is_form_data %}
    # Construct form data
    form_data_content = {
    ###foreach (var parameter in Model.LocalParameters)
    ###    if (parameter.Location == ParameterLocation.FormData)
    ###    {
    ###            @:'@parameter.SerializedName': @parameter.Name,
    ###    }
    ###}
    }
    {% endif %}

{% endif %}
    # Construct and send request
{% if operation.is_form_data %}
    request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, form_content=form_data_content)
{% elif operation.is_stream_request %}
    request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, stream_content={{ parameter.serialized_name }})
{% elif operation.parameters.has_body %}
    request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, body_content)
{% else %}
    request = self._client.{{ operation.method }}(url, query_parameters, header_parameters)
{% endif %}
    pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
    response = pipeline_response.http_response

    if response.status_code not in {{ operation.success_status_code|string() }}:
        map_error(status_code=response.status_code, response=response, error_map=error_map)
        {% if not operation.default_exception %}
        raise {{ core_excep_name }}(response=response)
        {% else %}
        raise models.{{ exception_name() }}.from_response(response, self._deserialize)
        {% endif %}

{% if operation.any_response_has_headers %}
    response_headers = {}
{% endif %}
{% if operation.has_response_body and operation.responses|count > 1 %}
    deserialized = None
{% endif %}
{% if operation.has_response_body or operation.any_response_has_headers %}
  {% if operation.responses|count > 1 %}
    {% for status_code in operation.success_status_code %}
      {% set response =  operation.get_response_from_status(status_code) %}
      {% if response.headers or response.has_body %}
    if response.status_code == {{ status_code }}:
        {{ op_tools.response_handling(response)|indent(8) }}
      {% endif %}
    {% endfor %}
  {% else %}
    {% set response = operation.responses[0] %}
    {{ op_tools.response_handling(response)|indent }}
  {% endif %}
{% endif %}
    if cls:
      return cls(response, {{ 'deserialized' if operation.has_response_body else 'None'}}, {{ 'response_headers' if operation.any_response_has_headers else '{}' }})

{% if operation.has_response_body %}
    return deserialized
{% endif %}
{% if operation.method == 'head' and code_model.options['head_as_boolean'] %}
    return 200 <= response.status_code <= 299
{% endif %}
{{ operation.python_name }}.metadata = {'url': '{{ operation.url|replace("'", "\\'") }}'}