{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{# return_type is a variable that holds the return type if we already know what it is #}
{% set return_type = "bool" if preparer.method == 'head' and code_model.options['head_as_boolean'] else None %}
{% macro param_documentation_string(parameter) %}:param {{ parameter.serialized_name }}: {{ parameter.description }}{% endmacro %}
{% macro return_docstring(async_mode, return_type=None) %}
{%- if return_type -%}
:return: {{ return_type }}, or the result of cls(response)
:rtype: {{ return_type }}
{%- else -%}
    {% if operation.responses | selectattr('has_body') | first %}
:return: {{ operation.responses|selectattr('has_body')|map(attribute='docstring_text')|unique|join(' or ') }}, or the result of cls(response)
:rtype: {{ operation.responses|selectattr('has_body')| map(attribute='docstring_type')|unique|join(' or ') }}{{ " or None" if operation.has_optional_return_type }}
    {%- else %}
:return: None, or the result of cls(response)
:rtype: None
    {%- endif -%}
{%- endif -%}
{% endmacro %}
{% macro operation_docstring(async_mode, return_type=None) %}
"""{{ operation.summary if operation.summary else operation.description | wordwrap(width=95, break_long_words=False, wrapstring='\n') }}
{% if operation.summary and operation.description %}

{{ operation.description | wordwrap(width=95, break_long_words=False, wrapstring='\n') }}
{% endif %}

{% if operation.deprecated -%}
.. warning::
    This method is deprecated

{% endif -%}
{% for parameter in operation.parameters.method %}
{%- for doc_string in param_documentation_string(parameter).replace('\n', '\n ').split('\n') %}
{{ doc_string | wordwrap(width=95, break_long_words=False, wrapstring='\n ')}}
{% endfor %}
:type {{ parameter.serialized_name }}: {{ parameter.docstring_type }}
{% endfor %}
{% if (preparer.schema_requests | length) > 1 %}
{{ op_tools.content_type_docstring(preparer) }}
{% endif %}
:keyword callable cls: A custom type or function that will be passed the direct response
{{ return_docstring(async_mode, return_type=return_type) }}
:raises: ~azure.core.exceptions.HttpResponseError
"""{% endmacro %}
{# actual template starts here #}
{%- if code_model.options['tracing'] and operation.want_tracing -%}
{{ trace_decorator }}
{% endif %}
{{ op_tools.operation_method_signature(operation, async_mode=async_mode, coroutine=async_mode, return_type_wrapper="", return_type=return_type) }}
{%- if not async_mode %}
    {{ op_tools.sync_return_type_annotation(operation, "", return_type=return_type) }}
{% endif %}
{% if operation.want_description_docstring %}
    {{ operation_docstring(async_mode, return_type=return_type)|indent }}
{% endif %}
    cls = kwargs.pop('cls', None)  # type: {{ op_tools.return_type_annotation(operation, ["ClsType"]) }}
{% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
{% endif %}
    {{ op_tools.error_map(operation, code_model)|indent }}

    {{ op_tools.get_preparer(operation, preparer)|indent }}

    pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
    {{ op_tools.handle_response(code_model, operation) | indent }}
{{ operation.python_name }}.metadata = {'url': {{ keywords.escape_str(preparer.url) }}}  # type: ignore