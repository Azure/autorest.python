{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{# actual template starts here #}
{{ operation_serializer.method_signature_and_response_type_annotation(operation, async_mode) }}
{% if operation.want_description_docstring %}
    {{ op_tools.description(operation, operation_serializer) | indent }}{% endif %}
    {% if not operation.abstract %}
        {% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
        {% endif %}
    {{ op_tools.serialize(operation_serializer.error_map(operation)) | indent }}
        {% if operation_serializer.pop_kwargs_from_signature(operation) %}
    {{ op_tools.serialize(operation_serializer.pop_kwargs_from_signature(operation)) | indent }}
        {% endif %}
    {{ op_tools.serialize(operation_serializer.call_request_builder(operation)) | indent }}
    pipeline_response = {{ keywords.await }}self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
        request,
        {{ stream_request_parameter }},
        **kwargs
    )
    {{ op_tools.serialize(operation_serializer.handle_response(operation)) | indent }}
    {% endif %}
{% if not code_model.options["version_tolerant"] %}
{{ operation_serializer.get_metadata_url(operation) }}
{% endif %}