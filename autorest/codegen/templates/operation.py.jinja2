{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{# actual template starts here #}
{%- if code_model.options['tracing'] and operation.want_tracing -%}
{{ trace_decorator }}
{% endif %}
{{ op_tools.method_signature(operation, operation.python_name, async_mode=async_mode, coroutine=async_mode) }}
{%- if not async_mode %}
    {{ keywords.sync_return_type_annotation(operation) }}
{% endif %}
{% if operation.want_description_docstring %}
{{ op_tools.operation_docstring(operation)|indent }}
{% endif %}
    cls = kwargs.pop('cls', None)  # type: ClsType[{{ keywords.return_type_annotation(operation) }}]
{% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
{% endif %}
    {{ op_tools.error_map(operation, code_model)|indent }}
{% if operation.parameters.grouped %}
    {{ op_tools.grouped_parameters(operation)|indent }}
{%- endif -%}
{% if operation.parameters.is_flattened %}

    {{ operation.parameters.build_flattened_object() }}
{% endif %}
{% if operation.parameters.constant|selectattr("implementation", "equalto", "Method")|selectattr("original_parameter", "equalto", None)|selectattr("in_method_code") %}
    {% for constant_parameter in operation.parameters.constant|selectattr("implementation", "equalto", "Method")|selectattr("original_parameter", "equalto", None)|selectattr("in_method_code") %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.schema.constant_value }}
    {% endfor %}
{% endif %}

    # Construct URL
    url = self.{{ operation.python_name }}.metadata['url']
{% if operation.parameters.path %}
    path_format_arguments = {
{% for path_parameter in operation.parameters.path %}
        '{{ path_parameter.rest_api_name }}': {{ operation.build_serialize_data_call(path_parameter, "url") }},
{% endfor %}
    }
    url = self._client.format_url(url, **path_format_arguments)
{% endif %}

    {{ op_tools.query_parameters(operation, async_mode)|indent }}
    {{ op_tools.header_parameters(code_model, operation, async_mode)|indent }}
    {{ op_tools.body_parameters(operation)|indent }}
    pipeline_response = {{ keywords.await }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
    response = pipeline_response.http_response

    if response.status_code not in {{ operation.success_status_code|string() }}:
        map_error(status_code=response.status_code, response=response, error_map=error_map)
        {% if operation.default_exception %}
        error = self._deserialize(models.{{ operation.default_exception.schema.name }}, response)
        {% endif %}
        raise HttpResponseError(response=response{{ ", model=error" if operation.default_exception else "" }}{{ ", error_format=ARMErrorFormat" if code_model.options['azure_arm'] else "" }})

{% if operation.any_response_has_headers %}
    response_headers = {}
{% endif %}
{% if operation.has_response_body and operation.responses|count > 1 %}
    deserialized = None
{% endif %}
{% if operation.has_response_body or operation.any_response_has_headers %}
  {% if operation.responses|count > 1 %}
    {% for status_code in operation.success_status_code %}
      {% set response =  operation.get_response_from_status(status_code) %}
      {% if response.headers or response.has_body %}
    if response.status_code == {{ status_code }}:
        {{ op_tools.response_handling(response)|indent(8) }}
      {% endif %}
    {% endfor %}
  {% else %}
    {% set response = operation.responses[0] %}
    {{ op_tools.response_handling(response)|indent }}
  {% endif %}
{% endif %}
    if cls:
      return cls(pipeline_response, {{ 'deserialized' if operation.has_response_body else 'None'}}, {{ 'response_headers' if operation.any_response_has_headers else '{}' }})

{% if operation.has_response_body %}
    return deserialized
{% endif %}
{% if operation.method == 'head' and code_model.options['head_as_boolean'] %}
    return 200 <= response.status_code <= 299
{% endif %}
{{ operation.python_name }}.metadata = {'url': {{ keywords.escape_str(operation.url) }}}