{% import 'operation_tools.jinja2' as op_tools %}

{% macro param_documentation_string(parameter) %}:param {{ parameter.serialized_name }}: {{ parameter.description }}{% endmacro %}

{% macro operation_docstring_helper(code_model, operation, async_mode) %}
{% import 'keywords.jinja2' as keywords with context %}
"""{{ operation.summary if operation.summary else operation.description | wordwrap(width=95, break_long_words=False, wrapstring='\n') }}
{% if operation.summary and operation.description %}

{{ operation.description | wordwrap(width=95, break_long_words=False, wrapstring='\n') }}
{% endif %}

{% if operation.deprecated -%}
.. warning::
    This method is deprecated

{% endif -%}
{% for parameter in operation.parameters.method %}
{%- for doc_string in param_documentation_string(parameter).replace('\n', '\n ').split('\n') %}
{{ doc_string | wordwrap(width=95, break_long_words=False, wrapstring='\n ')}}
{% endfor %}
:type {{ parameter.serialized_name }}: {{ parameter.docstring_type }}
{% endfor %}
{% if (operation.requests | length) > 1 %}
{{ op_tools.content_type_docstring(operation) }}
{% endif %}
:keyword callable cls: A custom type or function that will be passed the direct response
:keyword str continuation_token: A continuation token to restart a poller from a saved state.
:keyword polling: Pass in True if you'd like the {{ operation.get_default_polling_method(async_mode, code_model.options["azure_arm"]) }} polling method,
 False for no polling, or your own initialized polling object for a personal polling strategy.
:paramtype polling: bool or ~azure.core.polling.{{ keywords.async_class }}PollingMethod
:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
{%- endmacro -%}


{% macro lro_operation(code_model, operation, async_mode) %}
{% import 'keywords.jinja2' as keywords with context %}
    polling = kwargs.pop('polling', {{ "True" if code_model.options['azure_arm'] else "False" }})  # type: Union[bool, {{ keywords.async_class }}PollingMethod]
    cls = kwargs.pop('cls', None)  # type: ClsType[{{ op_tools.return_type_annotation(operation) }}]
    lro_delay = kwargs.pop(
        'polling_interval',
        self._config.polling_interval
    )
    cont_token = kwargs.pop('continuation_token', None)  # type: Optional[str]
    if cont_token is None:
        raw_result = {{ keywords.await }}self._{{ operation.name }}_initial(
            {% for parameter in operation.parameters.method %}
            {{ parameter.serialized_name }}={{ parameter.serialized_name }},
            {% endfor %}
            cls=lambda x,y,z: x,
            **kwargs
        )

    kwargs.pop('error_map', None)
    kwargs.pop('content_type', None)
    {%- endmacro -%}

    {% macro lro_operation_return(code_model, operation, async_mode) %}
    {% import 'keywords.jinja2' as keywords with context %}
    {% set path_format_arguments = "" %}
    {% set lro_options = (", lro_options={'final-state-via': '"+ operation.lro_options['final-state-via'] + "'}") if operation.lro_options else "" %}
    {% set operation_name = "begin_"+operation.python_name %}
    {% if operation.parameters.path %}
    {% set path_format_arguments = ", path_format_arguments=path_format_arguments" %}
    path_format_arguments = {
        {% for path_parameter in operation.parameters.path %}
        '{{ path_parameter.rest_api_name }}': {{ operation.build_serialize_data_call(path_parameter, "url") }},
        {% endfor %}
    }

    {% endif %}
    if polling is True: polling_method = {{ operation.get_default_polling_method(async_mode, code_model.options["azure_arm"]) }}(lro_delay{{ lro_options }}{{ path_format_arguments }},  **kwargs)
    elif polling is False: polling_method = {{ operation.get_default_no_polling_method(async_mode) }}()
    else: polling_method = polling
    if cont_token:
        return {{ operation.get_poller(async_mode) }}.from_continuation_token(
            polling_method=polling_method,
            continuation_token=cont_token,
            client=self._client,
            deserialization_callback=get_long_running_output
        )
    else:
        return {{ operation.get_poller(async_mode) }}(self._client, raw_result, get_long_running_output, polling_method)
{{ operation_name }}.metadata = {'url': '{{ operation.url }}'}  # type: ignore
{%- endmacro -%}