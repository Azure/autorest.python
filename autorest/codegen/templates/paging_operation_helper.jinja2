{% import 'operation_tools.jinja2' as op_tools %}

{% macro item_paged_retval(operation, async_mode, initial_response=None) %}
{% import 'keywords.jinja2' as keywords with context %}
{% if initial_response %}
    {% set paging_method = "PagingMethodWithInitialResponse" %}
{% else %}
    {% set paging_method = "BasicPagingMethod" %}
{% endif %}
{% if not initial_response %}
_initial_request = self._{{ operation.python_name }}_initial(
    next_link=self._{{ operation.python_name }}_initial.metadata['url'],
    {% for parameter in operation.parameters.method %}
    {{ parameter.serialized_name }}={{ parameter.serialized_name }},
    {% endfor %}
)
{% endif %}
{% if not initial_response %}
    {% if operation.next_operation %}
        {% set next_operation_suffix = "_next" %}
        {% set method_parameters = operation.next_operation.parameters.method %}
    {% else %}
        {% set next_operation_suffix = "_initial" %}
        {% set method_parameters = operation.parameters.method %}
    {% endif %}
_next_request_partial = functools.partial(
    self._{{ operation.python_name }}{{ next_operation_suffix }},
    {% for parameter in method_parameters %}
        {% if parameter.serialized_name != "next_link" %}
    {{ parameter.serialized_name }}={{ parameter.serialized_name }},
        {% endif %}
    {% endfor %}
)
{% endif %}
return {{ operation.get_pager(async_mode) }}(
    paging_method = kwargs.pop("paging_method", {{ keywords.async_class }}{{ paging_method }}()),
    client=self._client,
    deserialize_output=deserialize_output,
    next_link_name={{ ("'" ~ operation.next_link_name ~ "'") if operation.next_link_name else "None" }},
    {% if initial_response %}
    initial_response={{ initial_response }},
    {% else %}
    initial_request=_initial_request,
    next_request_partial=_next_request_partial,
    {% endif %}
    {% if operation.parameters.path and not operation.next_operation %}
    path_format_arguments=path_format_arguments,
    {% endif %}
    {% if operation.item_name != 'value' %}
    item_name='{{ operation.item_name }}',
    {% endif %}
    _cls=kwargs.pop("cls", None),
    **kwargs,
){% endmacro %}


{% macro deserialize_output(operation) %}
{% import 'keywords.jinja2' as keywords with context %}
{{ keywords.def }} deserialize_output(pipeline_response):
    {% set response = operation.responses[0] %}
    return self._deserialize('{{ response.serialization_type }}', pipeline_response){%- endmacro -%}