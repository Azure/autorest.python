{% import 'keywords.jinja2' as keywords with context %}
{% from 'operation_tools.jinja2' import response_handling %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% set async_prefix = "Async" if async_mode else "" %}
{% set poller = "async_poller" if async_mode else "LROPoller" %}
{% macro return_docstring() %}
:return: An instance of LROPoller that returns {{ operation.responses[0].schema.name if operation.responses[0].has_body else "None"}}
    :rtype: ~azure.core.polling.LROPoller[{{ operation.responses[0].schema.get_python_type(code_model.namespace) if operation.responses[0].has_body else "None" }}]
{% endmacro %}
{% macro exception_name() %}{{ operation.exceptions[0].schema.name }}Exception{% endmacro %}
{% macro response_headers(response) %}
response_headers = {
    {% for response_header in response.headers %}
    '{{ response_header.name }}': self._deserialize('{{ response_header.schema.get_serialization_type() }}', response.headers.get('{{ response_header.name }}')),
    {% endfor %}
}
{% endmacro %}
{% set lro_options = (", lro_options={'final-state-via': '"+ operation.lro_options['final-state-via'] + "'}") if operation.lro_options else "" %}
{% set operation_name = operation.python_name if async_mode else "begin_"+operation.python_name %}
{# actual template starts here #}
{% if code_model.options['tracing'] %}
{{ trace_decorator }}
{% endif %}
{{ keywords.def }} {{ operation_name }}(self{{ operation.method_signature }}, cls=None, polling=True, **kwargs):
    """{{operation.description.strip() }}.

    {{ "FIXME: add operation.summary\n" }}

{% if operation.deprecated -%}
    .. warning::
       This method is deprecated

{% endif -%}
{% for parameter in operation.method_parameters %}
    :param {{ parameter.serialized_name }}: {{ parameter.description }}
    :type {{ parameter.serialized_name }}: {{ parameter.schema.get_python_type(code_model.namespace) }}
{% endfor %}
    :param callable cls: A custom type or function that will be passed the direct response
    :param polling: True for ARMPolling, False for no polling, or a
     polling object for personal polling strategy
    {{ return_docstring() }}
    {% if not operation.exceptions %}
        {% if code_model.options['azure_arm'] %}
    :raises ~azure.mgmt.core.ARMError:
        {% else %}
    :raises ~azure.core.HttpResponseError:
        {% endif %}
    {% else %}
    :raises ~{{ code_model.namespace }}.models.{{ exception_name() }}:
    {% endif %}
    """
    raw_result = {{ keywords.await }}self._{{ operation.name }}_initial(
        {% for parameter in operation.method_parameters %}
        {{ parameter.serialized_name }}={{ parameter.serialized_name }},
        {% endfor %}
        cls=lambda x,y,z: x,
        **kwargs
    )

    def get_long_running_output(response):
        {% if operation.lro_response.has_headers %}
        response_headers = {}
        {% endif %}
        {% if operation.lro_response %}
        {{ response_handling(operation.lro_response)|indent(8) }}
        {% endif %}
        if cls:
            return cls(response, {{ 'deserialized' if operation.lro_response.has_body else 'None'}}, {{ 'response_headers' if operation.lro_response.has_headers else '{}' }})
        {% if operation.lro_response.has_body %}
        return deserialized
        {% endif %}

    lro_delay = kwargs.get(
        'polling_interval',
        self._config.polling_interval
    )
    if polling is True: polling_method = {{ async_prefix }}ARMPolling(lro_delay{{ lro_options }},  **kwargs)
    elif polling is False: polling_method = {{ async_prefix }}NoPolling()
    else: polling_method = polling
    return {{ keywords.await }}{{ poller }}(self._client, raw_result, get_long_running_output, polling_method)
{{ operation_name }}.metadata = {'url': '{{ operation.url }}'}
