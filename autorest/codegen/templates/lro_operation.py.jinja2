{% import 'operation_tools.jinja2' as op_tools %}
{% import 'lro_operation_helper.jinja2' as helper %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% set operation_name = "begin_"+operation.python_name %}
{% macro return_docstring(async_mode) %}
:return: An instance of {{ operation.get_poller(async_mode) }} that returns either {{ operation.responses[0].docstring_text }} or the result of cls(response)
:rtype: ~{{ operation.get_poller_path(async_mode)}}[{{ operation.responses[0].docstring_type }}]{% endmacro %}
{% macro response_headers(response) %}
response_headers = {
    {% for response_header in response.headers %}
    '{{ response_header.name }}': self._deserialize('{{ response_header.serialization_type }}', response.headers.get('{{ response_header.name }}')),
    {% endfor %}
}
{% endmacro %}
{% macro operation_docstring(async_mode) %}
{{ helper.operation_docstring_helper(code_model, operation, async_mode) }}
{{ return_docstring(async_mode) }}
:raises ~azure.core.exceptions.HttpResponseError:
"""{% endmacro %}
{# actual template starts here #}
{% if code_model.options['tracing'] %}
{{ trace_decorator }}
{% endif %}
{% set return_type_wrapper = [operation.get_poller(async_mode)] %}
{{ op_tools.method_signature(operation, operation_name, async_mode=async_mode, coroutine=async_mode, return_type_wrapper=return_type_wrapper) }}
{%- if not async_mode %}
    {{ op_tools.sync_return_type_annotation(operation, return_type_wrapper) }}
{% endif %}
    {{ operation_docstring(async_mode) | indent }}
{{ helper.lro_operation(code_model, operation, async_mode) }}

    def get_long_running_output(pipeline_response):
        {% if operation.lro_response.has_headers %}
        response_headers = {}
        response = pipeline_response.http_response
        {% endif %}
        {% if operation.lro_response %}
        {{ op_tools.response_handling(operation.lro_response)|indent(8) }}
        {% endif %}
        if cls:
            return cls(pipeline_response, {{ 'deserialized' if operation.lro_response.has_body else 'None'}}, {{ 'response_headers' if operation.lro_response.has_headers else '{}' }})
        {% if operation.lro_response.has_body %}
        return deserialized
        {% endif %}

{{ helper.lro_operation_return(code_model, operation, async_mode) }}