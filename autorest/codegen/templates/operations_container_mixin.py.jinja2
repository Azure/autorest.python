{% set object_base_class = "" if async_mode else "(object)" %}
# coding=utf-8
{{ code_model.options['license_header'] }}
{{ imports }}

{{ "    " if not async_mode }}T = TypeVar('T')
{{ "    " if not async_mode }}ClsType = Optional[Callable[[PipelineResponse[HttpRequest, {{ "Async" if async_mode else "" }}HttpResponse], T, Dict[str, Any]], Any]]

{% if code_model.options["builders_visibility"] == "embedded" and not async_mode %}
_SERIALIZER = Serializer()
# fmt: off
    {% for request_builder in code_model.rest.request_builders | selectattr("operation_group_name", "equalto", "") %}

    {% include "request_builder.py.jinja2" %}
    {% endfor %}
# fmt: on
{% endif %}
class {{ operation_group.class_name }}{{ object_base_class }}:
{% for operation in operation_group.operations %}

{% set request_builder = operation.request_builder %}
{% set operation_serializer = get_operation_serializer(operation) %}
    {% if is_lro(operation) and is_paging(operation) %}
    {%- macro someop() %}{% include "lro_paging_operation.py.jinja2" %}{% endmacro %}
    {% elif is_lro(operation) %}
    {%- macro someop() %}{% include "lro_operation.py.jinja2" %}{% endmacro %}
    {% elif is_paging(operation) %}
    {% macro someop() %}{% include "paging_operation.py.jinja2" %}{% endmacro %}
    {% else %}
    {% macro someop() %}{% include "operation.py.jinja2" %}{% endmacro %}
    {% endif %}
    {{ someop()|indent }}
{% endfor %}