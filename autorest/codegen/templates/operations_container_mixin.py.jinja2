{% set object_base_class = "" if async_mode else "(object)" %}
# coding=utf-8
{{ code_model.options['license_header'] }}
{{ imports.non_typing() }}
{% if imports.has_typing %}

try:
    from typing import TYPE_CHECKING
except:
    TYPE_CHECKING = False

if TYPE_CHECKING:
    # pylint: disable=unused-import
    {{ imports.typing() }}
{% endif %}

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, {{ "Async" if async_mode else "" }}HttpResponse], T, Dict[str, Any]], Any]]

class {{ operation_group.class_name }}{{ object_base_class }}:
{% for operation in operation_group.operations %}

    {% if is_lro(operation) %}
    {%- macro someop() %}{% include "lro_operation.py.jinja2" %}{% endmacro %}
    {% elif is_paging(operation) %}
    {% macro someop() %}{% include "paging_operation.py.jinja2" %}{% endmacro %}
    {% else %}
    {% macro someop() %}{% include "operation.py.jinja2" %}{% endmacro %}
    {% endif %}
    {{ someop()|indent }}
{% endfor %}