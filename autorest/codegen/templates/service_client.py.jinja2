{% import 'keywords.jinja2' as keywords with context %}
{% set config_import = "._configuration_async" if async_mode else "._configuration" %}
{% set operations_import = ".operations_async" if async_mode else ".operations" %}
{% set path_to_models = ".." if async_mode else "." %}
{% macro method_signature() %}
def __init__(
    self,
    {% if async_mode %}
        {% for param_signature in code_model.global_parameters.async_method_signature %}
    {{ param_signature }},
        {% endfor %}
        {% if code_model.base_url %}
    base_url: Optional[str] = None,
        {% endif %}
    **kwargs: Any
    {% else %}
        {% for param_signature in code_model.global_parameters.sync_method_signature %}
    {{ param_signature }}
        {% endfor %}
        {% if code_model.base_url %}
    base_url=None,  # type: Optional[str]
        {% endif %}
    **kwargs  # type: Any
    {% endif %}
){{" -> None" if async_mode else "" }}:{% endmacro %}
{% set config_signature = code_model.global_parameters.method|join(', ', attribute='serialized_name') ~ (", " if code_model.global_parameters.method else "") %}
{% set has_mixin_operation_group = code_model.operation_groups|selectattr("is_empty_operation_group")|first %}
{% macro mixin_operation_group_name() %}{{ code_model.class_name }}OperationsMixin{% endmacro %}
{% set base_class = mixin_operation_group_name() if has_mixin_operation_group else "object" %}
{# actual template starts here #}
# coding=utf-8
{{ code_model.options['license_header'] }}

{{ imports }}

from {{ config_import }} import {{ code_model.class_name }}Configuration
{% for operation_group in code_model.operation_groups %}
from {{ operations_import }} import {{ operation_group.class_name }}
{% endfor %}
{% if code_model.sorted_schemas %}
from {{ path_to_models }} import models
{% endif %}


class {{ code_model.class_name }}({{ base_class }}):
    """{{ code_model.description }}

    {% for operation_group in code_model.operation_groups|rejectattr("is_empty_operation_group") %}
    :ivar {{ operation_group.name  }}: {{ operation_group.class_name }} operations
    {% if async_mode %}
    :vartype {{ operation_group.name }}: {{ code_model.namespace }}.aio.operations_async.{{ operation_group.class_name }}
    {% else %}
    :vartype {{ operation_group.name }}: {{ code_model.namespace }}.operations.{{ operation_group.class_name }}
    {% endif %}
    {% endfor %}
{% for parameter in code_model.global_parameters.method %}
    :param {{ parameter.serialized_name }}: {{ parameter.description }}
    :type {{ parameter.serialized_name }}: {{ parameter.schema.docstring_type }}
{% endfor %}
    {% if not code_model.custom_base_url %}
    :param str base_url: Service URL
    {% endif %}
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    {{ method_signature()|indent }}
        {% if not async_mode %}
        # type: (...) -> None
        {% endif %}
        {% if not code_model.base_url %}
        base_url = {{ keywords.escape_str(code_model.custom_base_url) }}
        {% else %}
        if not base_url:
            base_url = {{ keywords.escape_str(code_model.base_url) }}
        {% endif %}
        self._config = {{ code_model.class_name }}Configuration({{ config_signature }}**kwargs)
        self._client = {{ code_model.service_client.pipeline_class(code_model, async_mode) }}(base_url=base_url, config=self._config, **kwargs)

        {% if code_model.sorted_schemas %}
        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        {% else %}
        client_models = {}
        {% endif %}
        self._serialize = Serializer(client_models)
        {% if not code_model.options['client_side_validation'] %}
        self._serialize.client_side_validation = False
        {% endif %}
        self._deserialize = Deserializer(client_models)

        {% for operation_group in code_model.operation_groups|rejectattr("is_empty_operation_group") %}
        self.{{ operation_group.name }} = {{ operation_group.class_name }}(
            self._client, self._config, self._serialize, self._deserialize)
        {% endfor %}

    {{ keywords.def }} close(self){{ " -> None" if async_mode else "" }}:
        {% if not async_mode %}
        # type: () -> None
        {% endif %}
        {{ keywords.await }}self._client.close()

    {{ keywords.def }} __{{ keywords.async_prefix }}enter__(self){{ (" -> \"" + code_model.class_name + "\"") if async_mode else "" }}:
        {% if not async_mode %}
        # type: () -> {{ code_model.class_name }}
        {% endif %}
        {{ keywords.await }}self._client.__{{ keywords.async_prefix }}enter__()
        return self

    {{ keywords.def }} __{{ keywords.async_prefix }}exit__(self, *exc_details){{ " -> None" if async_mode else "" }}:
        {% if not async_mode %}
        # type: (Any) -> None
        {% endif %}
        {{ keywords.await }}self._client.__{{ keywords.async_prefix }}exit__(*exc_details)
