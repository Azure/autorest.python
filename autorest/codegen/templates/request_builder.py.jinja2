{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools with context %}
{{ request_builder_serializer.method_signature_and_response_type_annotation(request_builder) }}
{% if code_model.options["builders_visibility"] == "public" %}
    {{ op_tools.description(request_builder, request_builder_serializer) | indent }}
{% endif %}
{% if request_builder.parameters.kwargs_to_pop(is_python3_file) %}
    {{ op_tools.serialize(request_builder_serializer.pop_kwargs_from_signature(request_builder)) | indent }}
{% endif %}
{% if request_builder.parameters.constant|selectattr("original_parameter", "equalto", None)|selectattr("in_method_code")|selectattr("in_method_signature", "equalto", False) %}
    {% for constant_parameter in request_builder.parameters.constant|selectattr("original_parameter", "equalto", None)|selectattr("in_method_code")|selectattr("in_method_signature", "equalto", False) %}
    {{ constant_parameter.serialized_name }} = {{ constant_parameter.constant_declaration }}
    {% endfor %}
{% endif %}
    # Construct URL
    url = kwargs.pop("template_url", {{ keywords.escape_str(request_builder.url) }})
{% if request_builder.parameters.path %}
    {{ op_tools.serialize(request_builder_serializer.serialize_path(request_builder)) | indent }}
    url = _format_url_section(url, **path_format_arguments)
{% endif %}

{% if request_builder.parameters.query %}
    {{ op_tools.serialize(request_builder_serializer.serialize_query(request_builder)) | indent }}
{% endif %}
{% if request_builder.parameters.headers %}
    {{ op_tools.serialize(request_builder_serializer.serialize_headers(request_builder)) | indent }}
{% endif %}
    {{ op_tools.serialize(request_builder_serializer.create_http_request(request_builder)) | indent }}
