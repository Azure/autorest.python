{% macro return_type_annotation(operation, return_type_wrapper) %}
{{ ((return_type_wrapper + "[") if return_type_wrapper else "") ~ ("Optional[" if operation.has_optional_return_type else "" ) ~ ("Union[" if operation.responses | selectattr('has_body') | map(attribute='schema') | map(attribute='operation_type_annotation') | unique | list  | length > 1 else "") ~
(operation.responses | selectattr('has_body') | map(attribute='schema') | map(attribute='operation_type_annotation') | unique | join(', ')) ~
("]" if operation.responses | selectattr('has_body') | map(attribute='schema') | map(attribute='operation_type_annotation')| unique | list | length > 1 else "") ~ ("]" if operation.has_optional_return_type else "") ~ ( "]" if return_type_wrapper else "")
if operation.responses | selectattr('has_body') | first
else ((return_type_wrapper + "[") if return_type_wrapper else "") ~ ("Optional[" if operation.has_optional_return_type else "" ) ~ "None" ~ ("]" if operation.has_optional_return_type else "") ~ ( "]" if return_type_wrapper else "") }}{% endmacro %}
{# get async mypy typing #}
{% macro async_return_type_annotation(operation, return_type_wrapper) %}
{{ " -> " + return_type_annotation(operation, return_type_wrapper) }}{% endmacro %}
{# get sync mypy typing #}
{% macro sync_return_type_annotation(operation, return_type_wrapper) %}
{{ "# type: (...) -> " + return_type_annotation(operation, return_type_wrapper) }}{% endmacro %}
{# get method signature #}
{% macro method_signature(operation, operation_name, async_mode, coroutine, return_type_wrapper) %}
{{ "async " if coroutine else "" }}def {{ operation_name }}(
{% if async_mode %}
    self,
    {% for param_signature in operation.parameters.async_method_signature %}
    {{ param_signature }},
    {% endfor %}
    **kwargs
){{ async_return_type_annotation(operation, return_type_wrapper) }}:
{% else %}
    self,
    {% for param_signature in operation.parameters.sync_method_signature %}
    {{ param_signature }}
    {% endfor %}
    **kwargs  # type: Any
):
{% endif %}{% endmacro %}
{# handle response headers/deserialization #}
{# error map handling #}
{% macro error_map(operation, code_model) %}
{%if operation.status_code_exceptions %}
error_map = {
    {% if not [404] in operation.status_code_exceptions | map(attribute='status_codes') %}
    404: ResourceNotFoundError,
    {% endif %}
    {% if not [409] in operation.status_code_exceptions | map(attribute='status_codes') %}
    409: ResourceExistsError,
    {% endif %}
{% for excep in operation.status_code_exceptions %}
    {% for status_code in excep.status_codes %}
    {% set error_model = ", model=self._deserialize(models." + excep.schema.serialization_type + ", response)" if excep.schema.is_exception else "" %}
    {% set error_format = ", error_format=ARMErrorFormat" if code_model.options['azure_arm'] else "" %}
    {% if status_code == 404 %}
    404: lambda response: ResourceNotFoundError(response=response{{ error_model }}{{ error_format }}),
    {% elif status_code == 409 %}
    409: lambda response: ResourceExistsError(response=response{{ error_model }}{{ error_format }}),
    {% else %}
    {% if not error_model and not error_format %}
    {{ status_code }}: HttpResponseError,
    {% else %}
    {{ status_code }}: lambda response: HttpResponseError(response=response{{ error_model }}{{ error_format }}),
    {% endif %}
    {% endif %}
    {% endfor %}
{% endfor %}
}
{% else %}
error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
{% endif %}
error_map.update(kwargs.pop('error_map', {})){%- endmacro -%}
{% macro response_handling(response) %}
  {% if response.headers %}
    {% for response_header in response.headers %}
response_headers['{{ response_header.name }}']=self._deserialize('{{ response_header.schema.serialization_type }}', response.headers.get('{{ response_header.name }}'))
    {% endfor %}
  {% endif %}
  {% if response.is_stream_response %}
deserialized = response.stream_download(self._client._pipeline)
  {% elif response.has_body %}
deserialized = self._deserialize('{{ response.schema.serialization_type }}', pipeline_response)
  {% endif %}
{% endmacro %}
{# write grouped parameters #}
{% macro grouped_parameters(operation) %}
{% if operation.parameters.grouped %}

    {% for grouped_parameter in operation.parameters.grouped %}
{{ grouped_parameter.serialized_name }} = None
    {% endfor %}
    {% for grouper_name, grouped_parameters in operation.parameters.grouped|groupby("grouped_by.serialized_name") %}
if {{ grouper_name }} is not None:
        {% for grouped_parameter in grouped_parameters %}
    {{ grouped_parameter.serialized_name }} = {{ grouper_name }}.{{ grouped_parameter.serialized_name.lstrip('_') }}
        {% endfor %}
    {% endfor %}
{% endif %}
{% endmacro %}
{# write queryparameters #}
{% macro query_parameters(operation, async_mode) %}
# Construct parameters
query_parameters = {}  # type: Dict[str, Any]
{% if operation.parameters.query %}
    {% for query_parameter in operation.parameters.query %}
        {%if query_parameter.required %}
query_parameters['{{ query_parameter.rest_api_name }}'] = {{ operation.build_serialize_data_call(query_parameter, "query") }}
        {% else %}
if {{ query_parameter.full_serialized_name }} is not None:
    query_parameters['{{ query_parameter.rest_api_name }}'] = {{ operation.build_serialize_data_call(query_parameter, "query") }}
        {% endif %}
    {% endfor %}
{% endif %}{% endmacro %}
{# write request headers #}
{% macro header_parameters(code_model, operation, async_mode) %}
# Construct headers
header_parameters = {}  # type: Dict[str, Any]
{% if operation.parameters.headers %}
    {% for header_parameter in operation.parameters.headers %}
        {%if header_parameter.required %}
header_parameters['{{ header_parameter.rest_api_name }}'] = {{ operation.build_serialize_data_call(header_parameter, "header") }}
        {% else %}
if {{ header_parameter.full_serialized_name }} is not None:
    header_parameters['{{ header_parameter.rest_api_name }}'] = {{ operation.build_serialize_data_call(header_parameter, "header") }}
        {% endif %}
    {% endfor %}
{% endif %}
{% if operation.has_response_body %}
header_parameters['Accept'] = '{{ operation.accept_content_type }}'
{% endif %}{% endmacro %}
{# helper for stream body params #}
{% macro stream_body_params(operation) %}body_content_kwargs['stream_content'] = {{ operation.parameters.body.serialized_name }}{% endmacro %}
{# helper for non-stream body params with schema #}
{% macro non_stream_body_params(operation, send_xml, request_as_xml) %}
{% set ser_ctxt = operation.parameters.body.schema.xml_serialization_ctxt() if send_xml else None %}
{% if ser_ctxt %}
serialization_ctxt = {'xml': {{ "{" }}{{ ser_ctxt }}{{ "}}" }}
{% endif %}
{% if operation.parameters.body.required %}
body_content = self._serialize.body({{ operation.parameters.body.serialized_name }}, '{{ operation.parameters.body.schema.serialization_type }}'{{ request_as_xml }}{{ ", serialization_ctxt=serialization_ctxt" if ser_ctxt else "" }})
{% else %}
if {{ operation.parameters.body.serialized_name }} is not None:
    body_content = self._serialize.body({{ operation.parameters.body.serialized_name }}, '{{ operation.parameters.body.schema.serialization_type }}'{{ request_as_xml }}{{ ", serialization_ctxt=serialization_ctxt" if ser_ctxt else "" }})
else:
    body_content = None
{% endif %}
body_content_kwargs['content'] = body_content{% endmacro %}
{# write body parameters #}
{% macro body_parameters(operation, http_verb=None) %}
{% set send_xml = "xml" if operation.parameters.has_body and "xml" in operation.request_content_type %}
{% set request_as_xml = ", is_xml=True" if send_xml else "" %}
{% if operation.parameters.has_body %}
body_content_kwargs = {}  # type: Dict[str, Any]
    {% if (operation.requests | length) == 1 %}
        {% if operation.requests[0].is_stream_request %}
{{ stream_body_params(operation) }}
        {% elif operation.requests[0].body_parameter_has_schema %}
{{ non_stream_body_params(operation, send_xml, request_as_xml) }}
        {% endif %}
    {% else %}
        {% for request in operation.requests %}
{{ "el" if not loop.first }}if header_parameters['Content-Type'].split(";")[0] in {{ request.pre_semicolon_media_types }}:
            {% if request.is_stream_request %}
    {{ stream_body_params(operation)|indent }}
            {% elif request.body_parameter_has_schema %}
    {{ non_stream_body_params(request, send_xml, request_as_xml)|indent }}
            {% endif %}
        {% endfor %}
else:
    raise ValueError(
        "The content_type '{}' is not one of the allowed values: "
        "{{ operation.requests | map(attribute="media_types") | sum(start = []) | unique | list }}".format(header_parameters['Content-Type'])
    )
{% endif %}
request = self._client.{{ http_verb if http_verb else operation.method }}(url, query_parameters, header_parameters, **body_content_kwargs)
{% else %}
request = self._client.{{ http_verb if http_verb else operation.method }}(url, query_parameters, header_parameters){% endif %}{% endmacro %}