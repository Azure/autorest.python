{% set disable = "  # pylint: disable=too-many-public-methods" if operation_group.operations | length > 20 else "" %}
{% set base_class = ("(" + operation_group.base_class(async_mode) + ")") if operation_group.base_class(async_mode) else "" %}
class {{ operation_group.class_name }}{{ base_class }}:{{ disable }}
{% if not operation_group.is_empty_operation_group %}
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`{{ "~" + code_model.namespace + (".aio." if async_mode else ".") + code_model.class_name }}`'s
        :attr:`{{ operation_group.name }}` attribute.
    """

{% if code_model.schemas and code_model.options["models_mode"] %}
    models = _models

{% endif %}
    def __init__(self, *args, **kwargs){{ return_none_type_annotation }}:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

{% endif %}
{% for operation in operation_group.operations %}

{% set request_builder = operation.request_builder %}
{% set operation_serializer = get_operation_serializer(operation) %}
    {% if is_lro(operation) and is_paging(operation) %}
    {%- macro someop() %}{% include "lro_paging_operation.py.jinja2" %}{% endmacro %}
    {% elif is_lro(operation) %}
    {%- macro someop() %}{% include "lro_operation.py.jinja2" %}{% endmacro %}
    {% elif is_paging(operation) %}
    {% macro someop() %}{% include "paging_operation.py.jinja2" %}{% endmacro %}
    {% else %}
    {% macro someop() %}{% include "operation.py.jinja2" %}{% endmacro %}
    {% endif %}
    {{ someop()|indent }}
{% endfor %}