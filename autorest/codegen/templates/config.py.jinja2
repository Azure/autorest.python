{% import 'keywords.jinja2' as keywords with context %}
{% import 'operation_tools.jinja2' as op_tools %}
{% set version_import = ".._version" if async_mode else "._version" %}
{# actual template starts here #}
# coding=utf-8
{{ code_model.options['license_header'] }}

{{ imports }}

{% if not code_model.options['package_version'] %}
VERSION = "unknown"
{% endif %}

class {{ code_model.client.name }}Configuration(Configuration):  # pylint: disable=too-many-instance-attributes
    """Configuration for {{ code_model.client.name }}.

    Note that all parameters used to create this instance are saved as instance
    attributes.
{% if code_model.config.parameters.method | first %}

{% endif %}
    {{ op_tools.serialize_with_wrap(serializer.property_descriptions(async_mode), "\n ") | indent }}
    {{ serializer.init_signature_and_response_type_annotation(async_mode) | indent }}
        super({{ code_model.client.name }}Configuration, self).__init__(**kwargs)
    {% if code_model.config.parameters.kwargs_to_pop(async_mode) %}
        {{ op_tools.serialize(serializer.pop_kwargs_from_signature(async_mode)) | indent(8) }}
    {% endif %}
{% if serializer.check_required_parameters() %}
        {{ op_tools.serialize(serializer.check_required_parameters()) | indent(8) -}}
{% endif %}

{% for parameter in code_model.config.parameters.method %}
        self.{{ parameter.client_name }} = {{ parameter.client_name }}
{% endfor %}
{% if serializer.set_constants() %}
        {{ op_tools.serialize(serializer.set_constants()) | indent(8) -}}
{% endif %}
{% if code_model.credential and code_model.credential.type.policy.credential_scopes is defined %}
        self.credential_scopes = kwargs.pop('credential_scopes', {{ code_model.credential.type.policy.credential_scopes }})
{% endif %}
        kwargs.setdefault('sdk_moniker', '{{ sdk_moniker }}/{}'.format(VERSION))
        self._configure(**kwargs)

    def _configure(
        self,
        **kwargs{{": Any" if async_mode else "  # type: Any"}}
    ){{ " -> None" if async_mode else "" }}:
        {% if not async_mode %}
        # type: (...) -> None
        {% endif %}
        self.user_agent_policy = kwargs.get('user_agent_policy') or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get('headers_policy') or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get('proxy_policy') or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get('logging_policy') or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.http_logging_policy = kwargs.get('http_logging_policy') or {{ "ARM" if code_model.options['azure_arm'] else "policies." }}HttpLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get('retry_policy') or policies.{{ keywords.async_class }}RetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get('custom_hook_policy') or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get('redirect_policy') or policies.{{ keywords.async_class }}RedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get('authentication_policy')
        {% if code_model.credential %}
        {# only adding this if credential_scopes is not passed during code generation #}
        {% if code_model.credential.type.policy.credential_scopes is defined and code_model.credential.type.policy.credential_scopes | length == 0 %}
        if not self.credential_scopes and not self.authentication_policy:
            raise ValueError("You must provide either credential_scopes or authentication_policy as kwargs")
        {% endif %}
        if self.credential and not self.authentication_policy:
            self.authentication_policy = {{ code_model.credential.type.policy.call(async_mode) }}
        {% endif %}
