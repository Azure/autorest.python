{% set version_import = ".._version" if async_mode else "._version" %}
{% set async_prefix = "Async" if async_mode else "" %}
{% set credential_scopes = "*self.credential_scopes, " if code_model.options['credential_scopes'] else "" %}
{# actual template starts here #}
# coding=utf-8
{{ code_model.options['license_header'] }}

from azure.core.configuration import Configuration
from azure.core.pipeline import policies

{% if code_model.options['package_version'] %}
from {{ version_import }} import VERSION
{% else %}
VERSION = "unknown"
{% endif %}


class {{ code_model.class_name }}Configuration(Configuration):
    """Configuration for {{ code_model.class_name }}
    Note that all parameters used to create this instance are saved as instance
    attributes.
{% if code_model.global_parameters | first %}

{% endif %}
{% for parameter in code_model.global_parameters.method %}
    :param {{ parameter.serialized_name }}: {{ parameter.description }}
    :type {{ parameter.serialized_name }}: {{ parameter.schema.get_python_type(code_model.namespace) }}
{% endfor %}
    """

    def __init__(self{{ code_model.global_parameters.method_signature }}, **kwargs):
{% for parameter in code_model.global_parameters.method|selectattr('is_required') %}
        if {{ parameter.serialized_name }} is None:
            raise ValueError("Parameter '{{ parameter.serialized_name }}' must not be None.")
{% endfor %}
        super({{ code_model.class_name }}Configuration, self).__init__(**kwargs)

{% for parameter in code_model.global_parameters.method %}
        self.{{ parameter.serialized_name }} = {{ parameter.serialized_name }}
{% endfor %}
{% if code_model.global_parameters.constant %}
    {% for constant_parameter in code_model.global_parameters.constant %}
        self.{{ constant_parameter.serialized_name }} = {{ constant_parameter.schema.get_constant_value() }}
    {% endfor %}
{% endif %}
{% if code_model.options['credential_scopes'] %}
        self.credential_scopes = {{ code_model.options['credential_scopes'] }}
{% endif %}
        self._configure(**kwargs)
        self.user_agent_policy.add_user_agent('azsdk-python-{{ code_model.class_name|lower }}/{}'.format(VERSION))

    def _configure(self, **kwargs):
        self.user_agent_policy = kwargs.get('user_agent_policy') or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get('headers_policy') or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get('proxy_policy') or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get('logging_policy') or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get('retry_policy') or policies.{{ async_prefix }}RetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get('custom_hook_policy') or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get('redirect_policy') or policies.{{ async_prefix }}RedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get('authentication_policy')
        {% if code_model.options['credential'] %}
        if self.credential and not self.authentication_policy:
            self.authentication_policy = policies.{{ async_prefix }}BearerTokenCredentialPolicy(self.credential, {{ credential_scopes }}**kwargs)
        {% endif %}
