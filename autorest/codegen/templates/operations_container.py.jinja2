{% set object_base_class = "" if async_mode else "(object)" %}
{% set operations_description = "async operations" if async_mode else "operations" %}
{% set return_none_type_annotation = " -> None" if async_mode else "" %}
{% set operation_group = operation_groups[0] %}
# coding=utf-8
{{ code_model.options['license_header'] }}
{{ imports }}

{{ "    " if not is_python_3_file }}T = TypeVar('T')
{{ "    " if not is_python_3_file }}ClsType = Optional[Callable[[PipelineResponse[HttpRequest, {{ "Async" if async_mode else "" }}HttpResponse], T, Dict[str, Any]], Any]]

{% if code_model.options["builders_visibility"] == "embedded" and not async_mode %}
_SERIALIZER = Serializer()
{% if not is_python_3_file %}
# fmt: off
{% endif %}
{% if not code_model.options['combine_operation_files'] %}
    {% for request_builder in code_model.rest.request_builders | selectattr("operation_group_name", "equalto", operation_group.name) %}

        {% include "request_builder.py.jinja2" %}
    {% endfor %}
{% else %}
    {% for request_builder in code_model.rest.request_builders %}

        {% include "request_builder.py.jinja2" %}
    {% endfor %}
{% endif %}
{% if not is_python_3_file %}
# fmt: on
{% endif %}
{% endif %}
{% if not code_model.options['combine_operation_files'] %}
    {% include "operations_class.py.jinja2" %}
{% else %}
    {% for operation_group in operation_groups %}
        {% if operation_group.is_empty_operation_group %}
            {% include "operations_class_mixin.py.jinja2" %}
        {% else %}
            {% include "operations_class.py.jinja2" %}
        {% endif %}
    {% endfor %}
{% endif %}