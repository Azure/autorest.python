{% if model.base_model is defined and model.base_model.name|length %}
class {{ model.name }}({{ model.base_model.name }}):
{% else %}
class {{ model.name }}(Model):
{% endif %}
    {{'\"\"\"' + model.description }}

    {% if model.properties != None %}
        {% for p in model.properties %}
    {{ p.documentation_string }}
        {% endfor %}
    {% endif %}
    {{'\"\"\"'}}
    {% if (model.properties | selectattr('validation_map') ) | first %}

    _validation = {
        {% for p in model.properties | selectattr('validation_map')%}
        '{{ p.name }}': {{ str(p.validation_map) }},
        {% endfor %}
    }
    {% endif %}

    _attribute_map = {
        {% if model.properties != None %}
            {% for p in model.properties %}
        '{{ p.name }}': {'key': '{{ p.escaped_swagger_name }}', 'type': '{{ p.schema.get_serialization_type()}}'},
            {% endfor %}
        {% else%}
        {% endif %}
    }
    {% if model.discriminator_name %}

    _subtype_map = {
        '{{ model.discriminator_name }}': {{ str(model.subtype_map) }}
    }
    {% endif %}
    {% if (model.properties | selectattr('constant') | first) is defined %}

        {% for p in model.properties | selectattr('constant')%}
    {{ p.name }} = {{ p.schema.get_constant_value() }}
        {% endfor %}
    {% endif %}

    {{ model.init_line }}
    {% for arg in model.init_args %}
        {{ arg }}
    {% endfor %}


{% if model.is_exception %}
class {{ model.name + "Exception" }}(HttpResponseError):
    {{'\"\"\"Server responded with exception of type: \'' + model.name + "\'.\n"}}
    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    {{'\"\"\"\n'}}
    def __init__(self, response, deserialize, *args):

        model_name = '{{ model.name }}'
        self.error = deserialize(model_name, response)
        if self.error is None:
            self.error = deserialize.dependencies[model_name]()
        super({{ model.name + "Exception" }}, self).__init__(response=response)


{% endif %}