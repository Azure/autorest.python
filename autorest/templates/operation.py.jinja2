{% set def_keyword = "async def" if async_mode else "def" %}
{% set await_keyword = "await " if async_mode else "" %}
{% set trace_decorator = "@distributed_trace_async" if async_mode else "@distributed_trace" %}
{% set stream_request_parameter = "stream=" ~ ("True" if operation.is_stream_response else "False") %}
{% set request_as_xml = ", is_xml=False" if "xml" in operation.request_content_type else "" %}
{% macro exception_name() %}{{ operation.exceptions[0].schema.name }}Exception{% endmacro %}
{% macro response_handling(response) %}
  {% if response.headers %}
    {% for header_parameter in response.headers %}
response_headers['{{ header_parameter.name }}']=self._deserialize('{{ header_parameter.schema.get_serialization_type() }}', response.headers.get('{{ header_parameter.name }}'))
    {% endfor %}
  {% endif %}
  {% if operation.has_response_body and operation.is_stream_response %}
deserialized = response.stream_download(self._client._pipeline)
  {% elif operation.has_response_body %}
deserialized = self._deserialize('{{ response.schema.get_serialization_type() }}', response)
  {% endif %}
{% endmacro %}
{# actual template starts here #}
{{ trace_decorator }}
{{ def_keyword }} {{ operation.python_name }}(self{{ operation.method_signature }}, cls=None, **kwargs):
    """{{operation.description}}.

    {{operation.summary}}

{%- if operation.deprecated -%}
    .. warning::
       This method is deprecated

{%- endif -%}
    {{operation.doc_parameters}}
    :param callable cls: A custom type or function that will be passed the direct response
    :return: FIXME or the result of cls(response)
    :rtype: FIXME
    {% if not operation.exceptions %}
    :raises ~azure.core.HttpResponseError:
    {% else %}
    :raises ~{{ code_model.namespace }}.models.{{ exception_name() }}:
    {% endif %}
    """
{% if operation.deprecated %}
    warnings.warn('Method {{operation.name}} is deprecated', DeprecationWarning)
{% endif %}
    error_map = kwargs.pop('error_map', None)
    # Construct URL
    url = self.{{ operation.python_name }}.metadata['url']

    # Construct parameters
    query_parameters = {}
{% if operation.query_parameters %}
    {% for query_parameter in operation.query_parameters %}
        {%if query_parameter.required %}
    query_parameters['{{ query_parameter.name }}'] = {{ operation.build_serialize_data_call(query_parameter, "query") }}
        {% else %}
    if {{ query_parameter.serialized_name }} is not None:
        query_parameters['{{ query_parameter.name }}'] = {{ operation.build_serialize_data_call(query_parameter, "query") }}
        {% endif %}
    {% endfor %}
{% endif %}

    # Construct headers
    header_parameters = {}
{% if operation.headers_parameters %}
    {% for header_parameter in operation.headers_parameters %}
        {%if header_parameter.required %}
    header_parameters['{{ header_parameter.name }}'] = {{ operation.build_serialize_data_call(header_parameter, "header") }}
        {% else %}
    if {{ header_parameter.serialized_name }} is not None:
        header_parameters['{{ header_parameter.name }}'] = {{ operation.build_serialize_data_call(header_parameter, "header") }}
        {% endif %}
    {% endfor %}
{% endif %}
{% if operation.has_response_body %}
    header_parameters['Accept'] = '{{ operation.accept_content_type }}'
{% endif %}
{% if operation.has_request_body %}
    header_parameters['Content-Type'] = '{{ operation.request_content_type }}'
{% endif %}

{% if operation.has_request_body %}
    # Construct body
    {% if not operation.body_parameter.is_stream %}
        {% if operation.body_parameter.is_required %}
    body_content = self._serialize.body({{ operation.body_parameter.serialized_name }}, '{{ operation.body_parameter.schema.name }}'{{ request_as_xml }}{{ operation.serialization_context }})
        {% else %}
    if {{ operation.body_parameter.serialized_name }} is not None:
        body_content = self._serialize.body({{ operation.body_parameter.serialized_name }}, '{{ operation.body_parameter.schema.name }}'{{ request_as_xml }}{{ operation.serialization_context }})
    else:
        body_content = None
        {% endif %}
    {% elif operation.body_parameter.is_form_data %}
    # Construct form data
    form_data_content = {
    ###foreach (var parameter in Model.LocalParameters)
    ###    if (parameter.Location == ParameterLocation.FormData)
    ###    {
    ###            @:'@parameter.SerializedName': @parameter.Name,
    ###    }
    ###}
    }
    {% endif %}

{% endif %}
    # Construct and send request
{% if operation.is_form_data %}
    request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, form_content=form_data_content)
{% elif operation.is_stream_request %}
    request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, stream_content=@parameter.Name)
{% elif operation.has_request_body %}
    request = self._client.{{ operation.method }}(url, query_parameters, header_parameters, body_content)
{% else %}
    request = self._client.{{ operation.method }}(url, query_parameters, header_parameters)
{% endif %}
    pipeline_response = {{ await_keyword }}self._client._pipeline.run(request, {{ stream_request_parameter }}, **kwargs)
    response = pipeline_response.http_response

    if response.status_code not in {{ operation.success_status_code|string() }}:
        map_error(status_code=response.status_code, response=response, error_map=error_map)
        {% if not operation.exceptions %}
        raise HttpResponseError(response=response)
        {% else %}
        raise models.{{ exception_name() }}(response, self._deserialize)
        {% endif %}

{% if operation.any_response_has_headers %}
    response_headers = {}
{% endif %}
{% if operation.has_response_body and operation.responses|count > 1 %}
    deserialized = None
{% endif %}
{% if operation.has_response_body or operation.any_response_has_headers %}
  {% if operation.responses|count > 1 %}
    {% for status_code in operation.success_status_code %}
      {% set response =  operation.get_response_from_status(status_code) %}
    if response.status_code == {{ status_code }}:
        {{ response_handling(response) }}
    {% endfor %}
  {% else %}
    {% set response = operation.responses[0] %}
    {{ response_handling(response) }}
  {% endif %}
{% endif %}
    if cls:
      return cls(response, {{ 'deserialized' if operation.has_response_body else 'None'}}, {{ 'response_headers' if operation.any_response_has_headers else '{}' }})

{% if operation.has_response_body %}
    return deserialized
{% endif %}
{{ operation.python_name }}.metadata = {'url': '{{ operation.url }}'}
