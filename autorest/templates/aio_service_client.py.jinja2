# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.core import AsyncPipelineClient
from msrest import Serializer, Deserializer

from ._configuration_async import {{ code_model.client_name }}Configuration
from azure.core.exceptions import map_error
{%- for operation_group_name in operation_group_names %}
from .operations_async import {{ operation_group_name }}Operations
{%- endfor %}
from .. import models


class {{ code_model.client_name }}(object):
    """{{ code_model.description }}

    {% for operation_group_name in operation_group_names %}
    :ivar {{ get_method_name(operation_group_name) }}: {{ operation_group_name }} operations
    :vartype {{ get_method_name(operation_group_name) }}: {{ code_model.namespace }}.operations.{{ operation_group_name }}Operations
    {% endfor %}
    :param str base_url: Service URL
    """

    def __init__(
            self, base_url=None, **kwargs):

        if not base_url:
            base_url = 'http://localhost:3000'
        self._config = AdditionalPropertiesClientConfiguration(**kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '{{ code_model.api_version }}'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        {% for operation_group_name in operation_group_names %}
        self.{{ get_method_name(operation_group_name) }} = {{ operation_group_name + "Operations" }}(
            self._client, self._config, self._serialize, self._deserialize)
        {% endfor %}
    async def __aenter__(self):
        await self._client.__aenter__()
        return self
    async def __aexit__(self, *exc_details):
        await self._client.__aexit__(*exc_details)
