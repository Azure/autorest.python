{% set global_parameters_method = global_parameters["method"] %}
{% macro method_signature() %}
def __init__(
    self,
    {% for serialized_name, gp_dict in global_parameters_method.items() %}
        {% if gp_dict["required"] %}
    {{ gp_dict["method_signature"] }}
        {% endif %}
    {% endfor %}
    {% for serialized_name, gp_dict in global_parameters_method.items() %}
        {% if not gp_dict["required"] %}
    {{ gp_dict["method_signature"] }}
        {% endif %}
    {% endfor %}
    api_version=None,
    base_url=None,
    profile=KnownProfiles.default,
    **kwargs  # type: Any
){{" -> None" if async_mode else "" }}:{% endmacro %}
{# actual template starts here #}
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.mgmt.core import ARMPipelineClient
from msrest import Serializer, Deserializer

from azure.profiles import KnownProfiles, ProfileDefinition
from azure.profiles.multiapiclient import MultiApiClientMixin
from ._configuration import {{ client_name }}Configuration
{% if mixin_operations %}from ._operations_mixin import {{ client_name }}OperationsMixin{% endif %}

class _SDKClient(object):
    def __init__(self, *args, **kwargs):
        """This is a fake class to support current implemetation of MultiApiClientMixin."
        Will be removed in final version of multiapi azure-core based client
        """
        pass

class {{ client_name }}({% if mixin_operations %}{{ client_name }}OperationsMixin, {% endif %}MultiApiClientMixin, _SDKClient):
    """{{ client_doc }}

    This ready contains multiple API versions, to help you deal with all of the Azure clouds
    (Azure Stack, Azure Government, Azure China, etc.).
    By default, it uses the latest API version available on public Azure.
    For production, you should stick to a particular api-version and/or profile.
    The profile sets a mapping between an operation group and its API version.
    The api-version parameter sets the default API version if the operation
    group is not described in the profile.
{% if global_parameters_method %}

{% endif %}
{% for serialized_name, gp_dict in global_parameters_method.items() %}
    :param {{ serialized_name }}: {{ gp_dict["description"] }}
    :type {{ serialized_name }}: {{ gp_dict["docstring_type"] }}
{% endfor %}
    :param str api_version: API version to use if no profile is provided, or if
     missing in profile.
    :param str base_url: Service URL
    :param profile: A profile definition, from KnownProfiles to dict.
    :type profile: azure.profiles.KnownProfiles
    """

    DEFAULT_API_VERSION = '{{ last_api_version }}'
    _PROFILE_TAG = "{{ module_name }}.{{ client_name }}"
    LATEST_PROFILE = ProfileDefinition({
        _PROFILE_TAG: {
            None: DEFAULT_API_VERSION,
{% for rt_name, api_version in last_rt_list|dictsort %}
            '{{ rt_name }}': '{{ mod_to_api_version[api_version] }}',
{% endfor %}
        }},
        _PROFILE_TAG + " latest"
    )

    {{ method_signature()|indent }}
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = {{ client_name }}Configuration({{ global_parameters["call"] }}, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)
        super({{ client_name }}, self).__init__(
            credential,
            self._config,
            api_version=api_version,
            profile=profile
        )

    @classmethod
    def _models_dict(cls, api_version):
        return {k: v for k, v in cls.models(api_version).__dict__.items() if isinstance(v, type)}

    @classmethod
    def models(cls, api_version=DEFAULT_API_VERSION):
        """Module depends on the API version:

        {% for mod_api_version, api_version in mod_to_api_version|dictsort %}
           * {{ api_version }}: :mod:`{{ mod_api_version }}.models<{{ module_name }}.{{ mod_api_version }}.models>`
        {% endfor %}
        """
        {% for mod_api_version, api_version in mod_to_api_version|dictsort %}
        {% set if_statement = "if" if loop.first else "elif" %}
        {{if_statement }} api_version == '{{ api_version }}':
            from .{{ mod_api_version }} import models
            return models
        {% endfor %}
        raise NotImplementedError("APIVersion {} is not available".format(api_version))
    {% for operation_name, available_apis in operations|dictsort %}

    @property
    def {{ operation_name }}(self):
        """Instance depends on the API version:

        {% for api in available_apis | sort %}
           * {{ mod_to_api_version[api[0]] }}: :class:`{{ api[1] }}<{{ module_name }}.{{ api[0] }}.operations.{{ api[1] }}>`
        {% endfor %}
        """
        api_version = self._get_api_version('{{ operation_name }}')
        {% for api in available_apis | sort %}
        {% set if_statement = "if" if loop.first else "elif" %}
        {{ if_statement }} api_version == '{{ mod_to_api_version[api[0]] }}':
            from .{{ api[0] }}.operations import {{ api[1] }} as OperationClass
        {% endfor %}
        else:
            raise NotImplementedError("APIVersion {} is not available".format(api_version))
        return OperationClass(self._client, self._config, Serializer(self._models_dict(api_version)), Deserializer(self._models_dict(api_version)))
    {% endfor %}

    def close(self):
        self._client.close()
    def __enter__(self):
        self._client.__enter__()
        return self
    def __exit__(self, *exc_details):
        self._client.__exit__(*exc_details)
