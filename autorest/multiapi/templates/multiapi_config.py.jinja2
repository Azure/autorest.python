{% macro method_signature() %}
def __init__(
    self,
    {% for serialized_name, gp_dict in global_parameters["method"].items() %}
        {% if gp_dict["required"] %}
    {{ gp_dict["method_signature"] }}
        {% endif %}
    {% endfor %}
    {% for serialized_name, gp_dict in global_parameters["method"].items() %}
        {% if not gp_dict["required"] %}
    {{ gp_dict["method_signature"] }}
        {% endif %}
    {% endfor %}
    **kwargs  # type: Any
){{" -> None" if async_mode else "" }}:{% endmacro %}
{# actual template starts here #}
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

{{ imports }}

{% if not package_version %}
VERSION = "unknown"
{% endif %}

class {{ client_name }}Configuration(Configuration):
    """Configuration for {{ client_name }}
    Note that all parameters used to create this instance are saved as instance
    attributes.
{% if global_parameters["method"] %}

{% endif %}
{% for serialized_name, gp_dict in global_parameters["method"].items() %}
    :param {{ serialized_name }}: {{ gp_dict["description"] }}
    :type {{ serialized_name }}: {{ gp_dict["docstring_type"] }}
{% endfor %}
    """

    {{ method_signature()|indent }}
        # type: (...) -> None
{% for gp in global_parameters["method"] | selectattr('required') %}
        if {{ gp }} is None:
            raise ValueError("Parameter '{{ gp }}' must not be None.")
{% endfor %}
        super({{ client_name }}Configuration, self).__init__(**kwargs)

{% for gp in global_parameters["method"] %}
        self.{{ gp }} = {{ gp }}
{% endfor %}
{% if global_parameters["constant"] %}
    {% for serialized_name, constant_value in global_parameters["constant"].items() %}
        self.{{ serialized_name }} = {{ constant_value }}
    {% endfor %}
{% endif %}
{% if credential_scopes %}
        self.credential_scopes = {{ credential_scopes }}
{% endif %}
        self._configure(**kwargs)
        self.user_agent_policy.add_user_agent('azsdk-python-{{ client_name|lower }}/{}'.format(VERSION))

    def _configure(
        self,
        **kwargs{{": Any" if async_mode else "  # type: Any"}}
    ){{ " -> None" if async_mode else "" }}:
        {% if not async_mode %}
        # type: (...) -> None
        {% endif %}
        self.user_agent_policy = kwargs.get('user_agent_policy') or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get('headers_policy') or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get('proxy_policy') or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get('logging_policy') or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get('retry_policy') or policies.RetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get('custom_hook_policy') or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get('redirect_policy') or policies.RedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get('authentication_policy')
        {% if credential %}
        if self.credential and not self.authentication_policy:
            self.authentication_policy = policies.BearerTokenCredentialPolicy(self.credential, {{ "*self.credential_scopes, " if credential_scopes else "" }}**kwargs)
        {% endif %}
