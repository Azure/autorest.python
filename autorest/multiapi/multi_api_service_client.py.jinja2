{% import 'keywords.jinja2' as keywords with context %}
{% set config_import = "._configuration_async" if async_mode else "._configuration" %}
{% set operations_import = ".operations_async" if async_mode else ".operations" %}
{% set path_to_models = ".." if async_mode else "." %}
{% macro method_signature() %}
def __init__(
    self,
    {% if async_mode %}
    credential,
    {% if "subscription_id" in code_model.global_parameters.method | map(attribute='serialized_name') %}
    subscription_id: str,
    {% endif %}
    api_version: Optional[str] = None,
    base_url: Optional[str] = None,
    profile: Optional[KnownProfiles] = KnownProfiles.default
    {% endif %}
    {% else %}
    credential,
    {% if "subscription_id" in code_model.global_parameters.method | map(attribute='serialized_name') %}
    subscription_id, # type: str
    {% endif %}
    base_url=None,  # type: Optional[str]
    profile=KnownProfiles.default  # type: Optional[KnownProfiles]
    {% endif %}
){{" -> None" if async_mode else "" }}:{% endmacro %}
{% set config_signature = code_model.global_parameters.method|join(', ', attribute='serialized_name') ~ (", " if code_model.global_parameters.method else "") %}
{% set has_mixin_operation_group = code_model.operation_groups|selectattr("is_empty_operation_group")|first %}
{% macro mixin_operation_group_name() %}{{ code_model.class_name }}OperationsMixin{% endmacro %}
{% set base_class = mixin_operation_group_name() if has_mixin_operation_group else "object" %}
{# actual template starts here #}
# coding=utf-8
{{ code_model.options['license_header'] }}

{{ imports }}

from {{ config_import }} import {{ code_model.class_name }}Configuration
{% for operation_group in code_model.operation_groups %}
from {{ operations_import }} import {{ operation_group.class_name }}
{% endfor %}
{% if code_model.sorted_schemas %}
from {{ path_to_models }} import models
{% endif %}


class {{ code_model.class_name }}({% if mixin_operations %}{{ code_model.class_name }}OperationsMixin, {% endif %}MultiApiClientMixin):
    """{{ code_model.description }}

    This client contains multiple API versions to deal with all of the Azure clouds
    (Azure Stack, Azure Government, Azure CHina, etc.).
    By default, this uses the latest API version available on public Azure.
    For production, you should stick to a particular api-version and/or proile.
    The profile sets a mapping between an operation group and an API version.
    The api-version parameter sets the default API version if the operation group is
    not described in the profile.

    :param credential: Credential needed for the client to connect to Azure
    :type credential: azure.core.credentials.TokenCredential
    {% if "subscription_id" in code_model.global_parameters.method | map(attribute='serialized_name') %}
    :param subscription_id: Subscription credentials which uniquely identify
     Microsoft Azure subscription. The subscription ID forms part of the URI
     for every service call.
    :type subscription_id: str
    {% endif %}
    :param str api_version: API version to use if no profile is provided, or it
     missing in profile.
    :param str base_url: Service URL
    :param profile: A profile definition, from KnownProfiles to dict.
    :type profile: azure.profiles.KnownProfiles
    """

    DEFAULT_API_VERSION = FIXME
    _PROFILE_TAG = "{{ code_model.module_name }}.{{ code_model.class_name }}"
    LATEST_PROFILE = ProfileDefinition(
        _PROFILE_TAG: {
            None: DEFAULT_API_VERSION,
            FIXME
        },
        _PROFILE_TAG + " latest"
    )
    {{ method_signature()|indent }}
        {% if not async_mode %}
        # type: (...) -> None
        {% endif %}
        {% if not code_model.base_url %}
        base_url = {{ keywords.escape_str(code_model.custom_base_url) }}
        {% else %}
        if not base_url:
            base_url = {{ keywords.escape_str(code_model.base_url) }}
        {% endif %}
        self._config = {{ code_model.class_name }}Configuration({{ config_signature }}**kwargs)
        self._client = {{ code_model.service_client.pipeline_class(code_model, async_mode) }}(base_url=base_url, config=self._config, **kwargs)

    @classmethod
    def _models_dict(cls, api_version):
        return {k: v for k, v in cls.models(api_version).__dict__.items() if isinstance(v, type)}

    @classmethod
    def models(cls, api_version=DEFAULT_API_VERSION):
        """Module depends on the API version:
        """



    {{ keywords.def }} close(self){{ " -> None" if async_mode else "" }}:
        {% if not async_mode %}
        # type: () -> None
        {% endif %}
        {{ keywords.await }}self._client.close()

    {{ keywords.def }} __{{ keywords.async_prefix }}enter__(self){{ (" -> \"" + code_model.class_name + "\"") if async_mode else "" }}:
        {% if not async_mode %}
        # type: () -> {{ code_model.class_name }}
        {% endif %}
        {{ keywords.await }}self._client.__{{ keywords.async_prefix }}enter__()
        return self

    {{ keywords.def }} __{{ keywords.async_prefix }}exit__(self, *exc_details){{ " -> None" if async_mode else "" }}:
        {% if not async_mode %}
        # type: (Any) -> None
        {% endif %}
        {{ keywords.await }}self._client.__{{ keywords.async_prefix }}exit__(*exc_details)
