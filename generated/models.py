# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from msrest.serialization import Model

class Bar(Model):
    """The URIs that are used to perform a retrieval of a public blob, queue or table object.

    :param recursive_point: Recursive Endpoints.
    :type recursive_point: Endpoints
    """

    _attribute_map = {
        'recursive_point': {'key': 'recursive_point', 'type': 'Endpoints'}
        
    }

    def __init__(self, **kwargs):
        super(Bar, self).__init__(**kwargs)
        self.recursive_point = kwargs.get('recursive_point', None)

class CheckNameAvailabilityResult(Model):
    """The CheckNameAvailability operation response.

    :param message: Gets an error message explaining the Reason value in more detail.
    :type message: str
    :param name_available: Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or invalid and cannot be used.
    :type name_available: bool
    :param reason: Gets the reason that a storage account name could not be used. The Reason element is only returned if NameAvailable is false.
    :type reason: str
    """

    _attribute_map = {
        'message': {'key': 'message', 'type': 'str'}
        'name_available': {'key': 'name_available', 'type': 'bool'}
        'reason': {'key': 'reason', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.message = kwargs.get('message', None)
        self.name_available = kwargs.get('name_available', None)
        self.reason = kwargs.get('reason', None)

class CustomDomain(Model):
    """The custom domain assigned to this storage account. This can be set via Update.

    :param name: Gets or sets the custom domain name. Name is the CNAME source.
    :type name: str
    :param use_sub_domain: Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
    :type use_sub_domain: bool
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'}
        'use_sub_domain': {'key': 'use_sub_domain', 'type': 'bool'}
        
    }

    def __init__(self, **kwargs):
        super(CustomDomain, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.use_sub_domain = kwargs.get('use_sub_domain', None)

class Endpoints(Model):
    """The URIs that are used to perform a retrieval of a public blob, queue or table object.

    :param foo_point: Foo point.
    :type foo_point: Foo
    :param blob: Gets the blob endpoint.
    :type blob: str
    :param dummy_end_point: Dummy EndPoint.
    :type dummy_end_point: Endpoints
    :param queue: Gets the queue endpoint.
    :type queue: str
    :param table: Gets the table endpoint.
    :type table: str
    """

    _attribute_map = {
        'foo_point': {'key': 'foo_point', 'type': 'Foo'}
        'blob': {'key': 'blob', 'type': 'str'}
        'dummy_end_point': {'key': 'dummy_end_point', 'type': 'Endpoints'}
        'queue': {'key': 'queue', 'type': 'str'}
        'table': {'key': 'table', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(Endpoints, self).__init__(**kwargs)
        self.foo_point = kwargs.get('foo_point', None)
        self.blob = kwargs.get('blob', None)
        self.dummy_end_point = kwargs.get('dummy_end_point', None)
        self.queue = kwargs.get('queue', None)
        self.table = kwargs.get('table', None)

class Foo(Model):
    """The URIs that are used to perform a retrieval of a public blob, queue or table object.

    :param bar._point: Bar point.
    :type bar._point: Bar
    """

    _attribute_map = {
        'bar._point': {'key': 'bar._point', 'type': 'Bar'}
        
    }

    def __init__(self, **kwargs):
        super(Foo, self).__init__(**kwargs)
        self.bar._point = kwargs.get('bar._point', None)

class Resource(Model):
    """Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Resource name.
    :type name: str
    :ivar type: Resource type.
    :type type: str
    :ivar id: Resource Id.
    :type id: str
    :param location: Required. Resource location.
    :type location: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'id': {'readonly': True},
        'location': {'required': True},
    }
    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'}
        'type': {'key': 'type', 'type': 'str'}
        'id': {'key': 'id', 'type': 'str'}
        'location': {'key': 'location', 'type': 'str'}
        'tags': {'key': 'tags', 'type': '{str}'}
        
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.id = kwargs.get('id', None)
        self.location = None
        self.tags = kwargs.get('tags', None)

class Resource-tags(Model):
    """Resource tags

    """

    _attribute_map = {
    }

    def __init__(self, **kwargs):
        super(Resource-tags, self).__init__(**kwargs)

class Resource(Model):
    """Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Resource name.
    :type name: str
    :ivar type: Resource type.
    :type type: str
    :ivar id: Resource Id.
    :type id: str
    :param location: Required. Resource location.
    :type location: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'id': {'readonly': True},
        'location': {'required': True},
    }
    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'}
        'type': {'key': 'type', 'type': 'str'}
        'id': {'key': 'id', 'type': 'str'}
        'location': {'key': 'location', 'type': 'str'}
        'tags': {'key': 'tags', 'type': '{str}'}
        
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.id = kwargs.get('id', None)
        self.location = None
        self.tags = kwargs.get('tags', None)

class StorageAccount(Resource):
    """The storage account.

    :param properties:
    :type properties: StorageAccountProperties
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'StorageAccountProperties'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccount, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)

class StorageAccountCheckNameAvailabilityParameters(Model):
    """StorageAccountCheckNameAvailabilityParameters.

    :param name: Required.
    :type name: str
    :param type: Default value: "Microsoft.Storage/storageAccounts".
    :type type: str
    """

    _validation = {
        'name': {'required': True},
    }
    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'}
        'type': {'key': 'type', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountCheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = None
        self.type = kwargs.get('type', None)

class Resource(Model):
    """Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Resource name.
    :type name: str
    :ivar type: Resource type.
    :type type: str
    :ivar id: Resource Id.
    :type id: str
    :param location: Required. Resource location.
    :type location: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'id': {'readonly': True},
        'location': {'required': True},
    }
    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'}
        'type': {'key': 'type', 'type': 'str'}
        'id': {'key': 'id', 'type': 'str'}
        'location': {'key': 'location', 'type': 'str'}
        'tags': {'key': 'tags', 'type': '{str}'}
        
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.id = kwargs.get('id', None)
        self.location = None
        self.tags = kwargs.get('tags', None)

class StorageAccountCreateParameters(Resource):
    """The parameters to provide for the account.

    :param properties:
    :type properties: StorageAccountPropertiesCreateParameters
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'StorageAccountPropertiesCreateParameters'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountCreateParameters, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)

class StorageAccountKeys(Model):
    """The access keys for the storage account.

    :param key1: Gets the value of key 1.
    :type key1: str
    :param key2: Gets the value of key 2.
    :type key2: str
    """

    _attribute_map = {
        'key1': {'key': 'key1', 'type': 'str'}
        'key2': {'key': 'key2', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountKeys, self).__init__(**kwargs)
        self.key1 = kwargs.get('key1', None)
        self.key2 = kwargs.get('key2', None)

class StorageAccountListResult(Model):
    """The list storage accounts operation response.

    :param next_link: Gets the link to the next set of results. Currently this will always be empty as the API does not support pagination.
    :type next_link: str
    :param value: Gets the list of storage accounts and their properties.
    :type value: list[StorageAccount]
    """

    _attribute_map = {
        'next_link': {'key': 'next_link', 'type': 'str'}
        'value': {'key': 'value', 'type': '[StorageAccount]'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountListResult, self).__init__(**kwargs)
        self.next_link = kwargs.get('next_link', None)
        self.value = kwargs.get('value', None)

class StorageAccountProperties(Model):
    """StorageAccountProperties.

    :param account_type: Gets the type of the storage account.
    :type account_type: str
    :param creation_time: Gets the creation date and time of the storage account in UTC.
    :type creation_time: str
    :param custom_domain: Gets the user assigned custom domain assigned to this storage account.
    :type custom_domain: CustomDomain
    :param last_geo_failover_time: Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is StandardGRS or StandardRAGRS.
    :type last_geo_failover_time: str
    :param primary_endpoints: Gets the URLs that are used to perform a retrieval of a public blob, queue or table object.Note that StandardZRS and PremiumLRS accounts only return the blob endpoint.
    :type primary_endpoints: Endpoints
    :param primary_location: Gets the location of the primary for the storage account.
    :type primary_location: str
    :param provisioning_state: Gets the status of the storage account at the time the operation was called.
    :type provisioning_state: str
    :param secondary_endpoints: Gets the URLs that are used to perform a retrieval of a public blob, queue or table object from the secondary location of the storage account. Only available if the accountType is StandardRAGRS.
    :type secondary_endpoints: Endpoints
    :param secondary_location: Gets the location of the geo replicated secondary for the storage account. Only available if the accountType is StandardGRS or StandardRAGRS.
    :type secondary_location: str
    :param status_of_primary: Gets the status indicating whether the primary location of the storage account is available or unavailable.
    :type status_of_primary: str
    :param status_of_secondary: Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the accountType is StandardGRS or StandardRAGRS.
    :type status_of_secondary: str
    """

    _attribute_map = {
        'account_type': {'key': 'account_type', 'type': 'str'}
        'creation_time': {'key': 'creation_time', 'type': 'str'}
        'custom_domain': {'key': 'custom_domain', 'type': 'CustomDomain'}
        'last_geo_failover_time': {'key': 'last_geo_failover_time', 'type': 'str'}
        'primary_endpoints': {'key': 'primary_endpoints', 'type': 'Endpoints'}
        'primary_location': {'key': 'primary_location', 'type': 'str'}
        'provisioning_state': {'key': 'provisioning_state', 'type': 'str'}
        'secondary_endpoints': {'key': 'secondary_endpoints', 'type': 'Endpoints'}
        'secondary_location': {'key': 'secondary_location', 'type': 'str'}
        'status_of_primary': {'key': 'status_of_primary', 'type': 'str'}
        'status_of_secondary': {'key': 'status_of_secondary', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountProperties, self).__init__(**kwargs)
        self.account_type = kwargs.get('account_type', None)
        self.creation_time = kwargs.get('creation_time', None)
        self.custom_domain = kwargs.get('custom_domain', None)
        self.last_geo_failover_time = kwargs.get('last_geo_failover_time', None)
        self.primary_endpoints = kwargs.get('primary_endpoints', None)
        self.primary_location = kwargs.get('primary_location', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.secondary_endpoints = kwargs.get('secondary_endpoints', None)
        self.secondary_location = kwargs.get('secondary_location', None)
        self.status_of_primary = kwargs.get('status_of_primary', None)
        self.status_of_secondary = kwargs.get('status_of_secondary', None)

class StorageAccountPropertiesCreateParameters(Model):
    """StorageAccountPropertiesCreateParameters.

    :param account_type: Gets or sets the account type.
    :type account_type: str
    """

    _attribute_map = {
        'account_type': {'key': 'account_type', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountPropertiesCreateParameters, self).__init__(**kwargs)
        self.account_type = kwargs.get('account_type', None)

class StorageAccountPropertiesUpdateParameters(Model):
    """StorageAccountPropertiesUpdateParameters.

    :param account_type: Gets or sets the account type. Note that StandardZRS and PremiumLRS accounts cannot be changed to other account types, and other account types cannot be changed to StandardZRS or PremiumLRS.
    :type account_type: str
    :param custom_domain: User domain assigned to the storage account. Name is the CNAME source. Only one custom domain is supported per storage account at this time. To clear the existing custom domain, use an empty string for the custom domain name property.
    :type custom_domain: CustomDomain
    """

    _attribute_map = {
        'account_type': {'key': 'account_type', 'type': 'str'}
        'custom_domain': {'key': 'custom_domain', 'type': 'CustomDomain'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountPropertiesUpdateParameters, self).__init__(**kwargs)
        self.account_type = kwargs.get('account_type', None)
        self.custom_domain = kwargs.get('custom_domain', None)

class StorageAccountRegenerateKeyParameters(Model):
    """StorageAccountRegenerateKeyParameters.

    :param key_name:
    :type key_name: str
    """

    _attribute_map = {
        'key_name': {'key': 'key_name', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountRegenerateKeyParameters, self).__init__(**kwargs)
        self.key_name = kwargs.get('key_name', None)

class Resource(Model):
    """Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Resource name.
    :type name: str
    :ivar type: Resource type.
    :type type: str
    :ivar id: Resource Id.
    :type id: str
    :param location: Required. Resource location.
    :type location: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'id': {'readonly': True},
        'location': {'required': True},
    }
    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'}
        'type': {'key': 'type', 'type': 'str'}
        'id': {'key': 'id', 'type': 'str'}
        'location': {'key': 'location', 'type': 'str'}
        'tags': {'key': 'tags', 'type': '{str}'}
        
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)
        self.id = kwargs.get('id', None)
        self.location = None
        self.tags = kwargs.get('tags', None)

class StorageAccountUpdateParameters(Resource):
    """The parameters to update on the account.

    :param properties:
    :type properties: StorageAccountPropertiesUpdateParameters
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'StorageAccountPropertiesUpdateParameters'}
        
    }

    def __init__(self, **kwargs):
        super(StorageAccountUpdateParameters, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)

class StorageIdentity(Model):
    """StorageIdentity.

    :param account_name: The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.
    :type account_name: str
    :param resource_group_name: The name of the resource group within the userâ€™s subscription.
    :type resource_group_name: str
    :param subscription_id: Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
    :type subscription_id: str
    """

    _attribute_map = {
        'account_name': {'key': 'account_name', 'type': 'str'}
        'resource_group_name': {'key': 'resource_group_name', 'type': 'str'}
        'subscription_id': {'key': 'subscription_id', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(StorageIdentity, self).__init__(**kwargs)
        self.account_name = kwargs.get('account_name', None)
        self.resource_group_name = kwargs.get('resource_group_name', None)
        self.subscription_id = kwargs.get('subscription_id', None)

class SubResource(Model):
    """SubResource.

    :param id: Resource Id.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(SubResource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)

class Usage(Model):
    """Describes Storage Resource Usage.

    :param name: Gets the name of the type of usage.
    :type name: UsageName
    :param current_value: Gets the current count of the allocated resources in the subscription.
    :type current_value: int
    :param limit: Gets the maximum count of the resources that can be allocated in the subscription.
    :type limit: int
    :param unit: Gets the unit of measurement.
    :type unit: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'UsageName'}
        'current_value': {'key': 'current_value', 'type': 'int'}
        'limit': {'key': 'limit', 'type': 'int'}
        'unit': {'key': 'unit', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(Usage, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.current_value = kwargs.get('current_value', None)
        self.limit = kwargs.get('limit', None)
        self.unit = kwargs.get('unit', None)

class UsageListResult(Model):
    """The List Usages operation response.

    :param value: Gets or sets the list Storage Resource Usages.
    :type value: list[Usage]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Usage]'}
        
    }

    def __init__(self, **kwargs):
        super(UsageListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)

class UsageName(Model):
    """The Usage Names.

    :param localized_value: Gets a localized string describing the resource name.
    :type localized_value: str
    :param value: Gets a string describing the resource name.
    :type value: str
    """

    _attribute_map = {
        'localized_value': {'key': 'localized_value', 'type': 'str'}
        'value': {'key': 'value', 'type': 'str'}
        
    }

    def __init__(self, **kwargs):
        super(UsageName, self).__init__(**kwargs)
        self.localized_value = kwargs.get('localized_value', None)
        self.value = kwargs.get('value', None)